/*! For license information please see worker.js.LICENSE.txt */
(()=>{var e={819:(e,t,n)=>{"use strict";function r(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function o(e){return!!e&&!!e[V]}function i(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return!t||t===Object.prototype}(e)||Array.isArray(e)||!!e[z]||!!e.constructor[z]||f(e)||d(e))}function a(e,t,n){void 0===n&&(n=!1),0===s(e)?(n?Object.keys:W)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function s(e){var t=e[V];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:f(e)?2:d(e)?3:0}function c(e,t){return 2===s(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function u(e,t,n){var r=s(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function l(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function f(e){return F&&e instanceof Map}function d(e){return U&&e instanceof Set}function p(e){return e.o||e.t}function v(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=K(e);delete t[V];for(var n=W(t),r=0;r<n.length;r++){var o=n[r],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function h(e,t){return void 0===t&&(t=!1),y(e)||o(e)||!i(e)||(s(e)>1&&(e.set=e.add=e.clear=e.delete=m),Object.freeze(e),t&&a(e,(function(e,t){return h(t,!0)}),!0)),e}function m(){r(2)}function y(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function g(e){var t=q[e];return t||r(18,e),t}function b(){return R}function _(e,t){t&&(g("Patches"),e.u=[],e.s=[],e.v=t)}function w(e){A(e),e.p.forEach($),e.p=null}function A(e){e===R&&(R=e.l)}function O(e){return R={p:[],l:R,h:e,m:!0,_:0}}function $(e){var t=e[V];0===t.i||1===t.i?t.j():t.g=!0}function k(e,t){t._=t.p.length;var n=t.p[0],o=void 0!==e&&e!==n;return t.h.O||g("ES5").S(t,e,o),o?(n[V].P&&(w(t),r(4)),i(e)&&(e=x(t,e),t.l||C(t,e)),t.u&&g("Patches").M(n[V],e,t.u,t.s)):e=x(t,n,[]),w(t),t.u&&t.v(t.u,t.s),e!==H?e:void 0}function x(e,t,n){if(y(t))return t;var r=t[V];if(!r)return a(t,(function(o,i){return S(e,r,t,o,i,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return C(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=v(r.k):r.o;a(3===r.i?new Set(o):o,(function(t,i){return S(e,r,o,t,i,n)})),C(e,o,!1),n&&e.u&&g("Patches").R(r,n,e.u,e.s)}return r.o}function S(e,t,n,r,a,s){if(o(a)){var l=x(e,a,s&&t&&3!==t.i&&!c(t.D,r)?s.concat(r):void 0);if(u(n,r,l),!o(l))return;e.m=!1}if(i(a)&&!y(a)){if(!e.h.N&&e._<1)return;x(e,a),t&&t.A.l||C(e,a)}}function C(e,t,n){void 0===n&&(n=!1),e.h.N&&e.m&&h(t,n)}function j(e,t){var n=e[V];return(n?p(n):e)[t]}function E(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function P(e){e.P||(e.P=!0,e.l&&P(e.l))}function T(e){e.o||(e.o=v(e.t))}function I(e,t,n){var r=f(t)?g("MapSet").T(t,n):d(t)?g("MapSet").F(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:b(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,i=J;n&&(o=[r],i=Z);var a=Proxy.revocable(o,i),s=a.revoke,c=a.proxy;return r.k=c,r.j=s,c}(t,n):g("ES5").J(t,n);return(n?n.A:b()).p.push(r),r}function N(e){return o(e)||r(22,e),function e(t){if(!i(t))return t;var n,r=t[V],o=s(t);if(r){if(!r.P&&(r.i<4||!g("ES5").K(r)))return r.t;r.I=!0,n=D(t,o),r.I=!1}else n=D(t,o);return a(n,(function(t,o){r&&function(e,t){return 2===s(e)?e.get(t):e[t]}(r.t,t)===o||u(n,t,e(o))})),3===o?new Set(n):n}(e)}function D(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return v(e)}n.r(t),n.d(t,{MiddlewareArray:()=>Se,__DO_NOT_USE__ActionTypes:()=>te,applyMiddleware:()=>de,bindActionCreators:()=>se,combineReducers:()=>ie,compose:()=>fe,configureStore:()=>Ne,createAction:()=>De,createAsyncThunk:()=>Ze,createDraftSafeSelector:()=>ge,createEntityAdapter:()=>Ve,createImmutableStateInvariantMiddleware:()=>je,createNextState:()=>Y,createReducer:()=>Fe,createSelector:()=>me,createSerializableStateInvariantMiddleware:()=>Te,createSlice:()=>Ue,createStore:()=>re,current:()=>N,findNonSerializableValue:()=>Pe,freeze:()=>h,getDefaultMiddleware:()=>Ie,getType:()=>Re,isAllOf:()=>Qe,isAnyOf:()=>Ye,isAsyncThunkAction:()=>at,isFulfilled:()=>it,isImmutableDefault:()=>Ce,isPending:()=>nt,isPlain:()=>Ee,isPlainObject:()=>xe,isRejected:()=>rt,isRejectedWithValue:()=>ot,nanoid:()=>We,unwrapResult:()=>Xe});var M,R,L="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),F="undefined"!=typeof Map,U="undefined"!=typeof Set,B="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,H=L?Symbol.for("immer-nothing"):((M={})["immer-nothing"]=!0,M),z=L?Symbol.for("immer-draftable"):"__$immer_draftable",V=L?Symbol.for("immer-state"):"__$immer_state",W=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames),K=Object.getOwnPropertyDescriptors||function(e){var t={};return W(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},q={},J={get:function(e,t){if(t===V)return e;var n=p(e);if(!c(n,t))return function(e,t,n){var r,o=E(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!i(r)?r:r===j(e.t,t)?(T(e),e.o[t]=I(e.A.h,r,e)):r},has:function(e,t){return t in p(e)},ownKeys:function(e){return Reflect.ownKeys(p(e))},set:function(e,t,n){var r=E(p(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=j(p(e),t),i=null==o?void 0:o[V];if(i&&i.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(l(n,o)&&(void 0!==n||c(e.t,t)))return!0;T(e),P(e)}return e.o[t]=n,e.D[t]=!0,!0},deleteProperty:function(e,t){return void 0!==j(e.t,t)||t in e.t?(e.D[t]=!1,T(e),P(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=p(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){r(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){r(12)}},Z={};a(J,(function(e,t){Z[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),Z.deleteProperty=function(e,t){return J.deleteProperty.call(this,e[0],t)},Z.set=function(e,t,n){return J.set.call(this,e[0],t,n,e[0])};var X=new(function(){function e(e){this.O=B,this.N=!0,"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var t=e.prototype;return t.produce=function(e,t,n){if("function"==typeof e&&"function"!=typeof t){var o=t;t=e;var a=this;return function(e){var n=this;void 0===e&&(e=o);for(var r=arguments.length,i=Array(r>1?r-1:0),s=1;s<r;s++)i[s-1]=arguments[s];return a.produce(e,(function(e){var r;return(r=t).call.apply(r,[n,e].concat(i))}))}}var s;if("function"!=typeof t&&r(6),void 0!==n&&"function"!=typeof n&&r(7),i(e)){var c=O(this),u=I(this,e,void 0),l=!0;try{s=t(u),l=!1}finally{l?w(c):A(c)}return"undefined"!=typeof Promise&&s instanceof Promise?s.then((function(e){return _(c,n),k(e,c)}),(function(e){throw w(c),e})):(_(c,n),k(s,c))}if(!e||"object"!=typeof e){if((s=t(e))===H)return;return void 0===s&&(s=e),this.N&&h(s,!0),s}r(21,e)},t.produceWithPatches=function(e,t){var n,r,o=this;return"function"==typeof e?function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return o.produceWithPatches(t,(function(t){return e.apply(void 0,[t].concat(r))}))}:[this.produce(e,t,(function(e,t){n=e,r=t})),n,r]},t.createDraft=function(e){i(e)||r(8),o(e)&&(e=N(e));var t=O(this),n=I(this,e,void 0);return n[V].C=!0,A(t),n},t.finishDraft=function(e,t){var n=(e&&e[V]).A;return _(n,t),k(void 0,n)},t.setAutoFreeze=function(e){this.N=e},t.setUseProxies=function(e){e&&!B&&r(20),this.O=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}var i=g("Patches").$;return o(e)?i(e,t):this.produce(e,(function(e){return i(e,t.slice(n+1))}))},e}()),G=X.produce;X.produceWithPatches.bind(X),X.setAutoFreeze.bind(X),X.setUseProxies.bind(X),X.applyPatches.bind(X),X.createDraft.bind(X),X.finishDraft.bind(X);const Y=G;var Q=n(121),ee=function(){return Math.random().toString(36).substring(7).split("").join(".")},te={INIT:"@@redux/INIT"+ee(),REPLACE:"@@redux/REPLACE"+ee(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+ee()}};function ne(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function re(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(re)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,i=t,a=[],s=a,c=!1;function u(){s===a&&(s=a.slice())}function l(){if(c)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return i}function f(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(c)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return u(),s.push(e),function(){if(t){if(c)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,u();var n=s.indexOf(e);s.splice(n,1),a=null}}}function d(e){if(!ne(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw new Error("Reducers may not dispatch actions.");try{c=!0,i=o(i,e)}finally{c=!1}for(var t=a=s,n=0;n<t.length;n++)(0,t[n])();return e}function p(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,d({type:te.REPLACE})}function v(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(l())}return n(),{unsubscribe:t(n)}}})[Q.Z]=function(){return this},e}return d({type:te.INIT}),(r={dispatch:d,subscribe:f,getState:l,replaceReducer:p})[Q.Z]=v,r}function oe(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function ie(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:te.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:te.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+te.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},s=0;s<a.length;s++){var c=a[s],u=n[c],l=e[c],f=u(l,t);if(void 0===f){var d=oe(c,t);throw new Error(d)}o[c]=f,r=r||f!==l}return(r=r||a.length!==Object.keys(e).length)?o:e}}function ae(e,t){return function(){return t(e.apply(this,arguments))}}function se(e,t){if("function"==typeof e)return ae(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=ae(o,t))}return n}function ce(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ue(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function le(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ue(n,!0).forEach((function(t){ce(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ue(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function fe(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function de(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return le({},n,{dispatch:r=fe.apply(void 0,i)(n.dispatch)})}}}function pe(e,t){return e===t}function ve(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,o=0;o<r;o++)if(!e(t[o],n[o]))return!1;return!0}function he(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return typeof e})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}var me=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){for(var t=arguments.length,r=Array(t),o=0;o<t;o++)r[o]=arguments[o];var i=0,a=r.pop(),s=he(r),c=e.apply(void 0,[function(){return i++,a.apply(null,arguments)}].concat(n)),u=e((function(){for(var e=[],t=s.length,n=0;n<t;n++)e.push(s[n].apply(null,arguments));return c.apply(null,e)}));return u.resultFunc=a,u.dependencies=s,u.recomputations=function(){return i},u.resetRecomputations=function(){return i=0},u}}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:pe,n=null,r=null;return function(){return ve(t,n,arguments)||(r=e.apply(null,arguments)),n=arguments,r}})),ye=n(894),ge=function(){var e=me.apply(void 0,arguments),t=function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return e.apply(void 0,[o(t)?N(t):t].concat(r))};return t};function be(){return(be=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function _e(e){return(_e=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function we(e,t){return(we=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ae(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function Oe(e,t,n){return(Oe=Ae()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&we(o,n.prototype),o}).apply(null,arguments)}function $e(e){var t="function"==typeof Map?new Map:void 0;return($e=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return Oe(e,arguments,_e(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),we(r,e)})(e)}var ke="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?fe:fe.apply(null,arguments)};function xe(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}var Se=function(e){var t,n;function r(){return e.apply(this,arguments)||this}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.concat=function(){for(var t,n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return Oe(r,(t=e.prototype.concat).call.apply(t,[this].concat(o)))},o.prepend=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 1===t.length&&Array.isArray(t[0])?Oe(r,t[0].concat(this)):Oe(r,t.concat(this))},r}($e(Array));function Ce(e){return"object"!=typeof e||null==e}function je(e){return void 0===e&&(e={}),function(){return function(e){return function(t){return e(t)}}}}function Ee(e){return null==e||"string"==typeof e||"boolean"==typeof e||"number"==typeof e||Array.isArray(e)||xe(e)}function Pe(e,t,n,r,o){var i;if(void 0===t&&(t=[]),void 0===n&&(n=Ee),void 0===o&&(o=[]),!n(e))return{keyPath:t.join(".")||"<root>",value:e};if("object"!=typeof e||null===e)return!1;var a=null!=r?r(e):Object.entries(e),s=o.length>0,c=a,u=Array.isArray(c),l=0;for(c=u?c:c[Symbol.iterator]();;){var f;if(u){if(l>=c.length)break;f=c[l++]}else{if((l=c.next()).done)break;f=l.value}var d=f,p=d[0],v=d[1],h=t.concat(p);if(!(s&&o.indexOf(h.join("."))>=0)){if(!n(v))return{keyPath:h.join("."),value:v};if("object"==typeof v&&(i=Pe(v,h,n,r,o)))return i}}return!1}function Te(e){return void 0===e&&(e={}),function(){return function(e){return function(t){return e(t)}}}}function Ie(e){void 0===e&&(e={});var t=e,n=t.thunk,r=void 0===n||n,o=(t.immutableCheck,t.serializableCheck,new Se);return r&&(function(e){return"boolean"==typeof e}(r)?o.push(ye.default):o.push(ye.default.withExtraArgument(r.extraArgument))),o}function Ne(e){var t,n=function(e){return Ie(e)},r=e||{},o=r.reducer,i=void 0===o?void 0:o,a=r.middleware,s=void 0===a?n():a,c=r.devTools,u=void 0===c||c,l=r.preloadedState,f=void 0===l?void 0:l,d=r.enhancers,p=void 0===d?void 0:d;if("function"==typeof i)t=i;else{if(!xe(i))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=ie(i)}var v=de.apply(void 0,"function"==typeof s?s(n):s),h=fe;u&&(h=ke(be({trace:!1},"object"==typeof u&&u)));var m=[v];return Array.isArray(p)?m=[v].concat(p):"function"==typeof p&&(m=p(m)),re(t,f,h.apply(void 0,m))}function De(e,t){function n(){if(t){var n=t.apply(void 0,arguments);if(!n)throw new Error("prepareAction did not return an object");return be({type:e,payload:n.payload},"meta"in n&&{meta:n.meta},{},"error"in n&&{error:n.error})}return{type:e,payload:arguments.length<=0?void 0:arguments[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function Me(e){return["type","payload","error","meta"].indexOf(e)>-1}function Re(e){return""+e}function Le(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}function Fe(e,t,n,r){void 0===n&&(n=[]);var a="function"==typeof t?Le(t):[t,n,r],s=a[0],c=a[1],u=a[2];return function(t,n){void 0===t&&(t=e);var r=[s[n.type]].concat(c.filter((function(e){return(0,e.matcher)(n)})).map((function(e){return e.reducer})));return 0===r.filter((function(e){return!!e})).length&&(r=[u]),r.reduce((function(e,t){if(t){if(o(e)){var r=t(e,n);return void 0===r?e:r}if(i(e))return Y(e,(function(e){return t(e,n)}));var a=t(e,n);if(void 0===a){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return a}return e}),t)}}function Ue(e){var t=e.name,n=e.initialState;if(!t)throw new Error("`name` is a required option for createSlice");var r=e.reducers||{},o=void 0===e.extraReducers?[]:"function"==typeof e.extraReducers?Le(e.extraReducers):[e.extraReducers],i=o[0],a=void 0===i?{}:i,s=o[1],c=void 0===s?[]:s,u=o[2],l=void 0===u?void 0:u,f=Object.keys(r),d={},p={},v={};f.forEach((function(e){var n,o,i=r[e],a=t+"/"+e;"reducer"in i?(n=i.reducer,o=i.prepare):n=i,d[e]=n,p[a]=n,v[e]=o?De(a,o):De(a)}));var h=Fe(n,be({},a,{},p),c,l);return{name:t,reducer:h,actions:v,caseReducers:d}}function Be(e){return function(t,n){var r=function(t){!function(e){return xe(t=e)&&"string"==typeof t.type&&Object.keys(t).every(Me);var t}(n)?e(n,t):e(n.payload,t)};return o(t)?(r(t),t):Y(t,r)}}function He(e,t){return t(e)}function ze(e){function t(t,n){var r=He(t,e);r in n.entities||(n.ids.push(r),n.entities[r]=t)}function n(e,n){Array.isArray(e)||(e=Object.values(e));var r=e,o=Array.isArray(r),i=0;for(r=o?r:r[Symbol.iterator]();;){var a;if(o){if(i>=r.length)break;a=r[i++]}else{if((i=r.next()).done)break;a=i.value}t(a,n)}}function r(e,t){var n=!1;e.forEach((function(e){e in t.entities&&(delete t.entities[e],n=!0)})),n&&(t.ids=t.ids.filter((function(e){return e in t.entities})))}function o(t,n){var r={},o={};t.forEach((function(e){e.id in n.entities&&(o[e.id]={id:e.id,changes:be({},o[e.id]?o[e.id].changes:null,{},e.changes)})})),(t=Object.values(o)).length>0&&t.filter((function(t){return function(t,n,r){var o=r.entities[n.id],i=Object.assign({},o,n.changes),a=He(i,e),s=a!==n.id;return s&&(t[n.id]=a,delete r.entities[n.id]),r.entities[a]=i,s}(r,t,n)})).length>0&&(n.ids=n.ids.map((function(e){return r[e]||e})))}function i(t,r){Array.isArray(t)||(t=Object.values(t));var i=[],a=[],s=t,c=Array.isArray(s),u=0;for(s=c?s:s[Symbol.iterator]();;){var l;if(c){if(u>=s.length)break;l=s[u++]}else{if((u=s.next()).done)break;l=u.value}var f=l,d=He(f,e);d in r.entities?a.push({id:d,changes:f}):i.push(f)}o(a,r),n(i,r)}return{removeAll:(a=function(e){Object.assign(e,{ids:[],entities:{}})},s=Be((function(e,t){return a(t)})),function(e){return s(e,void 0)}),addOne:Be(t),addMany:Be(n),setAll:Be((function(e,t){Array.isArray(e)||(e=Object.values(e)),t.ids=[],t.entities={},n(e,t)})),updateOne:Be((function(e,t){return o([e],t)})),updateMany:Be(o),upsertOne:Be((function(e,t){return i([e],t)})),upsertMany:Be(i),removeOne:Be((function(e,t){return r([e],t)})),removeMany:Be(r)};var a,s}function Ve(e){void 0===e&&(e={});var t=be({sortComparer:!1,selectId:function(e){return e.id}},e),n=t.selectId,r=t.sortComparer;return be({selectId:n,sortComparer:r},{getInitialState:function(e){return void 0===e&&(e={}),Object.assign({ids:[],entities:{}},e)}},{},{getSelectors:function(e){var t=function(e){return e.ids},n=function(e){return e.entities},r=ge(t,n,(function(e,t){return e.map((function(e){return t[e]}))})),o=function(e,t){return t},i=function(e,t){return e[t]},a=ge(t,(function(e){return e.length}));if(!e)return{selectIds:t,selectEntities:n,selectAll:r,selectTotal:a,selectById:ge(n,o,i)};var s=ge(e,n);return{selectIds:ge(e,t),selectEntities:s,selectAll:ge(e,r),selectTotal:ge(e,a),selectById:ge(s,o,i)}}},{},r?function(e,t){var n=ze(e);function r(t,n){Array.isArray(t)||(t=Object.values(t));var r=t.filter((function(t){return!(He(t,e)in n.entities)}));0!==r.length&&a(r,n)}function o(t,n){var r=[];t.forEach((function(t){return function(t,n,r){if(!(n.id in r.entities))return!1;var o=r.entities[n.id],i=Object.assign({},o,n.changes),a=He(i,e);return delete r.entities[n.id],t.push(i),a!==n.id}(r,t,n)})),0!==r.length&&a(r,n)}function i(t,n){Array.isArray(t)||(t=Object.values(t));var i=[],a=[],s=t,c=Array.isArray(s),u=0;for(s=c?s:s[Symbol.iterator]();;){var l;if(c){if(u>=s.length)break;l=s[u++]}else{if((u=s.next()).done)break;l=u.value}var f=l,d=He(f,e);d in n.entities?a.push({id:d,changes:f}):i.push(f)}o(a,n),r(i,n)}function a(n,r){n.sort(t),n.forEach((function(t){r.entities[e(t)]=t}));var o=Object.values(r.entities);o.sort(t);var i=o.map(e);(function(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(e[n]!==t[n])return!1;return!0})(r.ids,i)||(r.ids=i)}return{removeOne:n.removeOne,removeMany:n.removeMany,removeAll:n.removeAll,addOne:Be((function(e,t){return r([e],t)})),updateOne:Be((function(e,t){return o([e],t)})),upsertOne:Be((function(e,t){return i([e],t)})),setAll:Be((function(e,t){Array.isArray(e)||(e=Object.values(e)),t.entities={},t.ids=[],r(e,t)})),addMany:Be(r),updateMany:Be(o),upsertMany:Be(i)}}(n,r):ze(n))}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var We=function(e){void 0===e&&(e=21);for(var t="",n=e;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t},Ke=["name","message","stack","code"],qe=function(e){this.payload=e,this.name="RejectWithValue",this.message="Rejected"},Je=function(e){if("object"==typeof e&&null!==e){var t={},n=Ke,r=Array.isArray(n),o=0;for(n=r?n:n[Symbol.iterator]();;){var i;if(r){if(o>=n.length)break;i=n[o++]}else{if((o=n.next()).done)break;i=o.value}var a=i;"string"==typeof e[a]&&(t[a]=e[a])}return t}return{message:String(e)}};function Ze(e,t,n){var r=De(e+"/fulfilled",(function(e,t,n){return{payload:e,meta:{arg:n,requestId:t,requestStatus:"fulfilled"}}})),o=De(e+"/pending",(function(e,t){return{payload:void 0,meta:{arg:t,requestId:e,requestStatus:"pending"}}})),i=De(e+"/rejected",(function(e,t,r){var o=e instanceof qe,i=!!e&&"AbortError"===e.name,a=!!e&&"ConditionError"===e.name;return{payload:e instanceof qe?e.payload:void 0,error:(n&&n.serializeError||Je)(e||"Rejected"),meta:{arg:r,requestId:t,rejectedWithValue:o,requestStatus:"rejected",aborted:i,condition:a}}})),a="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){}}}return e.prototype.abort=function(){},e}();return Object.assign((function(e){return function(s,c,u){var l,f=We(),d=new a,p=new Promise((function(e,t){return d.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:l||"Aborted"})}))})),v=!1,h=function(){try{var a,l=function(e){return h?e:(n&&!n.dispatchConditionRejection&&i.match(a)&&a.meta.condition||s(a),a)},h=!1,m=function(l,h){try{var m=function(){if(n&&n.condition&&!1===n.condition(e,{getState:c,extra:u}))throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return v=!0,s(o(f,e)),Promise.resolve(Promise.race([p,Promise.resolve(t(e,{dispatch:s,getState:c,extra:u,requestId:f,signal:d.signal,rejectWithValue:function(e){return new qe(e)}})).then((function(t){return t instanceof qe?i(t,f,e):r(t,f,e)}))])).then((function(e){a=e}))}()}catch(e){return h(e)}return m&&m.then?m.then(void 0,h):m}(0,(function(t){a=i(t,f,e)}));return Promise.resolve(m&&m.then?m.then(l):l(m))}catch(e){return Promise.reject(e)}}();return Object.assign(h,{abort:function(e){v&&(l=e,d.abort())},requestId:f,arg:e})}}),{pending:o,rejected:i,fulfilled:r,typePrefix:e})}function Xe(e){if(e.meta&&e.meta.rejectedWithValue)throw e.payload;if(e.error)throw e.error;return e.payload}var Ge=function(e,t){return function(e){return e&&"function"==typeof e.match}(e)?e.match(t):e(t)};function Ye(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return t.some((function(t){return Ge(t,e)}))}}function Qe(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return t.every((function(t){return Ge(t,e)}))}}function et(e,t){if(!e||!e.meta)return!1;var n="string"==typeof e.meta.requestId,r=t.indexOf(e.meta.requestStatus)>-1;return n&&r}function tt(e){return"function"==typeof e[0]&&"pending"in e[0]&&"fulfilled"in e[0]&&"rejected"in e[0]}function nt(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return et(e,["pending"])}:tt(t)?function(e){var n=t.map((function(e){return e.pending}));return Ye.apply(void 0,n)(e)}:nt()(t[0])}function rt(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return et(e,["rejected"])}:tt(t)?function(e){var n=t.map((function(e){return e.rejected}));return Ye.apply(void 0,n)(e)}:rt()(t[0])}function ot(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=function(e){return e&&e.meta&&e.meta.rejectedWithValue};return 0===t.length||tt(t)?function(e){return Qe(rt.apply(void 0,t),r)(e)}:ot()(t[0])}function it(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return et(e,["fulfilled"])}:tt(t)?function(e){var n=t.map((function(e){return e.fulfilled}));return Ye.apply(void 0,n)(e)}:it()(t[0])}function at(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return et(e,["pending","fulfilled","rejected"])}:tt(t)?function(e){var n=[],r=t,o=Array.isArray(r),i=0;for(r=o?r:r[Symbol.iterator]();;){var a;if(o){if(i>=r.length)break;a=r[i++]}else{if((i=r.next()).done)break;a=i.value}var s=a;n.push(s.pending,s.rejected,s.fulfilled)}return Ye.apply(void 0,n)(e)}:at()(t[0])}!function(){function e(e,t){var n=i[e];return n?n.enumerable=t:i[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[V];return J.get(t,e)},set:function(t){var n=this[V];J.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][V];if(!o.P)switch(o.i){case 5:r(o)&&P(o);break;case 4:n(o)&&P(o)}}}function n(e){for(var t=e.t,n=e.k,r=W(n),o=r.length-1;o>=0;o--){var i=r[o];if(i!==V){var a=t[i];if(void 0===a&&!c(t,i))return!0;var s=n[i],u=s&&s[V];if(u?u.t!==a:!l(s,a))return!0}}var f=!!t[V];return r.length!==W(t).length+(f?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}var i={};!function(e,t){q[e]||(q[e]=t)}("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var i=K(n);delete i[V];for(var a=W(i),s=0;s<a.length;s++){var c=a[s];i[c]=e(c,t||!!i[c].enumerable)}return Object.create(Object.getPrototypeOf(n),i)}(r,t),i={i:r?5:4,A:n?n.A:b(),P:!1,I:!1,D:{},l:n,t,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,V,{value:i,writable:!0}),o},S:function(e,n,i){i?o(n)&&n[V].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[V];if(n){var o=n.t,i=n.k,s=n.D,u=n.i;if(4===u)a(i,(function(t){t!==V&&(void 0!==o[t]||c(o,t)?s[t]||e(i[t]):(s[t]=!0,P(n)))})),a(o,(function(e){void 0!==i[e]||c(i,e)||(s[e]=!1,P(n))}));else if(5===u){if(r(n)&&(P(n),s.length=!0),i.length<o.length)for(var l=i.length;l<o.length;l++)s[l]=!1;else for(var f=o.length;f<i.length;f++)s[f]=!0;for(var d=Math.min(i.length,o.length),p=0;p<d;p++)void 0===s[p]&&e(i[p])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}()},904:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(15),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".error {\r\n  color: red;\r\n}\r\n.primary {\r\n  color: blue;\r\n}","",{version:3,sources:["webpack://./webapp/src/worker/main.css"],names:[],mappings:"AAAA;EACE,UAAU;AACZ;AACA;EACE,WAAW;AACb",sourcesContent:[".error {\r\n  color: red;\r\n}\r\n.primary {\r\n  color: blue;\r\n}"],sourceRoot:""}]);const s=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),u="/*# ".concat(c," */"),l=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(l).concat([u]).join("\n")}return[i].join("\n")}},894:(e,t,n)=>{"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}n.r(t),n.d(t,{default:()=>i});var o=r();o.withExtraArgument=r;const i=o},379:(e,t,n)=>{"use strict";var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function a(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],o=0;o<e.length;o++){var s=e[o],c=t.base?s[0]+t.base:s[0],u=n[c]||0,l="".concat(c," ").concat(u);n[c]=u+1;var f=a(l),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:l,updater:h(d,t),references:1}),r.push(l)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var u,l=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function f(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=l(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function d(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,v=0;function h(e,t){var n,r,o;if(t.singleton){var i=v++;n=p||(p=c(t)),r=f.bind(null,n,i,!1),o=f.bind(null,n,i,!0)}else n=c(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=a(n[r]);i[o].references--}for(var c=s(e,t),u=0;u<n.length;u++){var l=a(n[u]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}n=c}}}},121:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r}),e=n.hmd(e);const r=function(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:e)},936:e=>{async function t(e,t,{method:n,body:r,...o}={}){let i;t&&(i={"Content-Type":"application/json"});const a={method:n,...o,headers:{...i,...o.headers}};if(r)if(t)a.body=JSON.stringify(r);else{const e=new FormData;for(const t in r)e.append(t,r[t]);a.body=e}let s;try{const t=await window.fetch(e,a);if(s=await t.json(),!t.ok)throw new Error(s.statusText);return s}catch(e){return Promise.reject(e.message||s)}}t.get=(e,n={})=>t(e,!0,{method:"GET",...n}),t.post=(e,n,r,o={})=>t(e,r,{method:"POST",body:n,...o}),t.put=(e,n,r,o={})=>t(e,r,{method:"PUT",body:n,...o}),t.del=(e,n,r,o={})=>t(e,r,{method:"DELETE",body:n,...o}),e.exports={client:t}},77:(e,t,n)=>{const{loadingAction:r,errorAction:o,registeredAction:i,removedAction:a,workersLoadedAction:s}=n(845),c=n(646);t.z2=e=>async t=>{t(r());try{const n=await c.register(e);t(i(n))}catch(n){t(o(`gagal mendaftarkan ${e.name}`))}},t.Od=e=>async t=>{t(r());try{await c.remove(e),t(a(e))}catch(e){t(o("gagal menghapus pekerja"))}},t.gp=async e=>{e(r());try{const t=await c.list();e(s(t))}catch(t){e(o("gagal memuat daftar pekerja"))}}},480:(e,t)=>{t.SERVICE_BASEURL="http://localhost:7001"},796:(e,t,n)=>{const{SERVICE_BASEURL:r}=n(480);e.exports={initialState:{loading:!1,error:null,workers:[]},registered:function(e,t){const n=t.payload;return e.workers.push({id:n.id,name:n.name,photo:`${r}/photo/${n.photo}`,bio:n.bio}),e.loading=!1,e.error=null,e},removed:function(e,t){const n=e.workers.findIndex((e=>e.id===t.payload));return e.workers.splice(n,1),e.loading=!1,e.error=null,e},workersLoaded:function(e,t){return e.workers=t.payload.map((e=>({id:e.id,name:e.name,photo:`${r}/photo/${e.photo}`,bio:e.bio}))),e.loading=!1,e.error=null,e},error:function(e,t){e.loading=!1,e.error=t.payload},loading:function(e){e.loading=!0,e.error=null},clearError:function(e){e.error=null}}},845:(e,t,n)=>{const{createAction:r,createReducer:o,configureStore:i}=n(819),{initialState:a,error:s,loading:c,registered:u,removed:l,workersLoaded:f,clearError:d}=n(796),p=n(894),v=r("error"),h=r("loading"),m=r("registered"),y=r("removed"),g=r("workersLoaded"),b=r("clearError"),_=i({reducer:o(a,{[v]:s,[b]:d,[h]:c,[m]:u,[y]:l,[g]:f}),middleware:[p.default]});e.exports={store$:_,errorAction:v,loadingAction:h,registeredAction:m,removedAction:y,workersLoadedAction:g,clearErrorAction:b}},646:(e,t,n)=>{const{client:r}=n(936),{SERVICE_BASEURL:o}=n(480);e.exports={register:function(e){return r.post(`${o}/register`,e)},list:function(){return r.get(`${o}/list`)},remove:function(e){return r.del(`${o}/remove?id=${e}`)},info:function(e){return r.get(`${o}/info?id=${e}`)}}}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={id:r,loaded:!1,exports:{}};return e[r](o,o.exports,n),o.loaded=!0,o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=n(379),t=n.n(e),r=n(904);t()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var o=Object.freeze({});function i(e){return null==e}function a(e){return null!=e}function s(e){return!0===e}function c(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function u(e){return null!==e&&"object"==typeof e}var l=Object.prototype.toString;function f(e){return"[object Object]"===l.call(e)}function d(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function p(e){return a(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function v(e){return null==e?"":Array.isArray(e)||f(e)&&e.toString===l?JSON.stringify(e,null,2):String(e)}function h(e){var t=parseFloat(e);return isNaN(t)?e:t}function m(e,t){for(var n=Object.create(null),r=e.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var y=m("slot,component",!0),g=m("key,ref,slot,slot-scope,is");function b(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var _=Object.prototype.hasOwnProperty;function w(e,t){return _.call(e,t)}function A(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var O=/-(\w)/g,$=A((function(e){return e.replace(O,(function(e,t){return t?t.toUpperCase():""}))})),k=A((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),x=/\B([A-Z])/g,S=A((function(e){return e.replace(x,"-$1").toLowerCase()})),C=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function j(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function E(e,t){for(var n in t)e[n]=t[n];return e}function P(e){for(var t={},n=0;n<e.length;n++)e[n]&&E(t,e[n]);return t}function T(e,t,n){}var I=function(e,t,n){return!1},N=function(e){return e};function D(e,t){if(e===t)return!0;var n=u(e),r=u(t);if(!n||!r)return!n&&!r&&String(e)===String(t);try{var o=Array.isArray(e),i=Array.isArray(t);if(o&&i)return e.length===t.length&&e.every((function(e,n){return D(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(o||i)return!1;var a=Object.keys(e),s=Object.keys(t);return a.length===s.length&&a.every((function(n){return D(e[n],t[n])}))}catch(e){return!1}}function M(e,t){for(var n=0;n<e.length;n++)if(D(e[n],t))return n;return-1}function R(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var L="data-server-rendered",F=["component","directive","filter"],U=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],B={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:I,isReservedAttr:I,isUnknownElement:I,getTagNamespace:T,parsePlatformTagName:N,mustUseProp:I,async:!0,_lifecycleHooks:U},H=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function z(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function V(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var W,K=new RegExp("[^"+H.source+".$_\\d]"),q="__proto__"in{},J="undefined"!=typeof window,Z="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,X=Z&&WXEnvironment.platform.toLowerCase(),G=J&&window.navigator.userAgent.toLowerCase(),Y=G&&/msie|trident/.test(G),Q=G&&G.indexOf("msie 9.0")>0,ee=G&&G.indexOf("edge/")>0,te=(G&&G.indexOf("android"),G&&/iphone|ipad|ipod|ios/.test(G)||"ios"===X),ne=(G&&/chrome\/\d+/.test(G),G&&/phantomjs/.test(G),G&&G.match(/firefox\/(\d+)/)),re={}.watch,oe=!1;if(J)try{var ie={};Object.defineProperty(ie,"passive",{get:function(){oe=!0}}),window.addEventListener("test-passive",null,ie)}catch(e){}var ae=function(){return void 0===W&&(W=!J&&!Z&&void 0!==n.g&&n.g.process&&"server"===n.g.process.env.VUE_ENV),W},se=J&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ce(e){return"function"==typeof e&&/native code/.test(e.toString())}var ue,le="undefined"!=typeof Symbol&&ce(Symbol)&&"undefined"!=typeof Reflect&&ce(Reflect.ownKeys);ue="undefined"!=typeof Set&&ce(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var fe=T,de=0,pe=function(){this.id=de++,this.subs=[]};pe.prototype.addSub=function(e){this.subs.push(e)},pe.prototype.removeSub=function(e){b(this.subs,e)},pe.prototype.depend=function(){pe.target&&pe.target.addDep(this)},pe.prototype.notify=function(){for(var e=this.subs.slice(),t=0,n=e.length;t<n;t++)e[t].update()},pe.target=null;var ve=[];function he(e){ve.push(e),pe.target=e}function me(){ve.pop(),pe.target=ve[ve.length-1]}var ye=function(e,t,n,r,o,i,a,s){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},ge={child:{configurable:!0}};ge.child.get=function(){return this.componentInstance},Object.defineProperties(ye.prototype,ge);var be=function(e){void 0===e&&(e="");var t=new ye;return t.text=e,t.isComment=!0,t};function _e(e){return new ye(void 0,void 0,void 0,String(e))}function we(e){var t=new ye(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var Ae=Array.prototype,Oe=Object.create(Ae);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=Ae[e];V(Oe,e,(function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o,i=t.apply(this,n),a=this.__ob__;switch(e){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&a.observeArray(o),a.dep.notify(),i}))}));var $e=Object.getOwnPropertyNames(Oe),ke=!0;function xe(e){ke=e}var Se=function(e){this.value=e,this.dep=new pe,this.vmCount=0,V(e,"__ob__",this),Array.isArray(e)?(q?function(e,t){e.__proto__=t}(e,Oe):function(e,t,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];V(e,i,t[i])}}(e,Oe,$e),this.observeArray(e)):this.walk(e)};function Ce(e,t){var n;if(u(e)&&!(e instanceof ye))return w(e,"__ob__")&&e.__ob__ instanceof Se?n=e.__ob__:ke&&!ae()&&(Array.isArray(e)||f(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Se(e)),t&&n&&n.vmCount++,n}function je(e,t,n,r,o){var i=new pe,a=Object.getOwnPropertyDescriptor(e,t);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=e[t]);var u=!o&&Ce(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):n;return pe.target&&(i.depend(),u&&(u.dep.depend(),Array.isArray(t)&&Te(t))),t},set:function(t){var r=s?s.call(e):n;t===r||t!=t&&r!=r||s&&!c||(c?c.call(e,t):n=t,u=!o&&Ce(t),i.notify())}})}}function Ee(e,t,n){if(Array.isArray(e)&&d(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var r=e.__ob__;return e._isVue||r&&r.vmCount?n:r?(je(r.value,t,n),r.dep.notify(),n):(e[t]=n,n)}function Pe(e,t){if(Array.isArray(e)&&d(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount||w(e,t)&&(delete e[t],n&&n.dep.notify())}}function Te(e){for(var t=void 0,n=0,r=e.length;n<r;n++)(t=e[n])&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&Te(t)}Se.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)je(e,t[n])},Se.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)Ce(e[t])};var Ie=B.optionMergeStrategies;function Ne(e,t){if(!t)return e;for(var n,r,o,i=le?Reflect.ownKeys(t):Object.keys(t),a=0;a<i.length;a++)"__ob__"!==(n=i[a])&&(r=e[n],o=t[n],w(e,n)?r!==o&&f(r)&&f(o)&&Ne(r,o):Ee(e,n,o));return e}function De(e,t,n){return n?function(){var r="function"==typeof t?t.call(n,n):t,o="function"==typeof e?e.call(n,n):e;return r?Ne(r,o):o}:t?e?function(){return Ne("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function Me(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function Re(e,t,n,r){var o=Object.create(e||null);return t?E(o,t):o}Ie.data=function(e,t,n){return n?De(e,t,n):t&&"function"!=typeof t?e:De(e,t)},U.forEach((function(e){Ie[e]=Me})),F.forEach((function(e){Ie[e+"s"]=Re})),Ie.watch=function(e,t,n,r){if(e===re&&(e=void 0),t===re&&(t=void 0),!t)return Object.create(e||null);if(!e)return t;var o={};for(var i in E(o,e),t){var a=o[i],s=t[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},Ie.props=Ie.methods=Ie.inject=Ie.computed=function(e,t,n,r){if(!e)return t;var o=Object.create(null);return E(o,e),t&&E(o,t),o},Ie.provide=De;var Le=function(e,t){return void 0===t?e:t};function Fe(e,t,n){if("function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var r,o,i={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(o=n[r])&&(i[$(o)]={type:null});else if(f(n))for(var a in n)o=n[a],i[$(a)]=f(o)?o:{type:o};e.props=i}}(t),function(e,t){var n=e.inject;if(n){var r=e.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(f(n))for(var i in n){var a=n[i];r[i]=f(a)?E({from:i},a):{from:a}}}}(t),function(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}(t),!t._base&&(t.extends&&(e=Fe(e,t.extends,n)),t.mixins))for(var r=0,o=t.mixins.length;r<o;r++)e=Fe(e,t.mixins[r],n);var i,a={};for(i in e)s(i);for(i in t)w(e,i)||s(i);function s(r){var o=Ie[r]||Le;a[r]=o(e[r],t[r],n,r)}return a}function Ue(e,t,n,r){if("string"==typeof n){var o=e[t];if(w(o,n))return o[n];var i=$(n);if(w(o,i))return o[i];var a=k(i);return w(o,a)?o[a]:o[n]||o[i]||o[a]}}function Be(e,t,n,r){var o=t[e],i=!w(n,e),a=n[e],s=Ve(Boolean,o.type);if(s>-1)if(i&&!w(o,"default"))a=!1;else if(""===a||a===S(e)){var c=Ve(String,o.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=function(e,t,n){if(w(t,"default")){var r=t.default;return e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n]?e._props[n]:"function"==typeof r&&"Function"!==He(t.type)?r.call(e):r}}(r,o,e);var u=ke;xe(!0),Ce(a),xe(u)}return a}function He(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function ze(e,t){return He(e)===He(t)}function Ve(e,t){if(!Array.isArray(t))return ze(t,e)?0:-1;for(var n=0,r=t.length;n<r;n++)if(ze(t[n],e))return n;return-1}function We(e,t,n){he();try{if(t)for(var r=t;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{if(!1===o[i].call(r,e,t,n))return}catch(e){qe(e,r,"errorCaptured hook")}}qe(e,t,n)}finally{me()}}function Ke(e,t,n,r,o){var i;try{(i=n?e.apply(t,n):e.call(t))&&!i._isVue&&p(i)&&!i._handled&&(i.catch((function(e){return We(e,r,o+" (Promise/async)")})),i._handled=!0)}catch(e){We(e,r,o)}return i}function qe(e,t,n){if(B.errorHandler)try{return B.errorHandler.call(null,e,t,n)}catch(t){t!==e&&Je(t)}Je(e)}function Je(e,t,n){if(!J&&!Z||"undefined"==typeof console)throw e;console.error(e)}var Ze,Xe=!1,Ge=[],Ye=!1;function Qe(){Ye=!1;var e=Ge.slice(0);Ge.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&ce(Promise)){var et=Promise.resolve();Ze=function(){et.then(Qe),te&&setTimeout(T)},Xe=!0}else if(Y||"undefined"==typeof MutationObserver||!ce(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Ze="undefined"!=typeof setImmediate&&ce(setImmediate)?function(){setImmediate(Qe)}:function(){setTimeout(Qe,0)};else{var tt=1,nt=new MutationObserver(Qe),rt=document.createTextNode(String(tt));nt.observe(rt,{characterData:!0}),Ze=function(){tt=(tt+1)%2,rt.data=String(tt)},Xe=!0}function ot(e,t){var n;if(Ge.push((function(){if(e)try{e.call(t)}catch(e){We(e,t,"nextTick")}else n&&n(t)})),Ye||(Ye=!0,Ze()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){n=e}))}var it=new ue;function at(e){st(e,it),it.clear()}function st(e,t){var n,r,o=Array.isArray(e);if(!(!o&&!u(e)||Object.isFrozen(e)||e instanceof ye)){if(e.__ob__){var i=e.__ob__.dep.id;if(t.has(i))return;t.add(i)}if(o)for(n=e.length;n--;)st(e[n],t);else for(n=(r=Object.keys(e)).length;n--;)st(e[r[n]],t)}}var ct=A((function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),r="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=r?e.slice(1):e,once:n,capture:r,passive:t}}));function ut(e,t){function n(){var e=arguments,r=n.fns;if(!Array.isArray(r))return Ke(r,null,arguments,t,"v-on handler");for(var o=r.slice(),i=0;i<o.length;i++)Ke(o[i],null,e,t,"v-on handler")}return n.fns=e,n}function lt(e,t,n,r,o,a){var c,u,l,f;for(c in e)u=e[c],l=t[c],f=ct(c),i(u)||(i(l)?(i(u.fns)&&(u=e[c]=ut(u,a)),s(f.once)&&(u=e[c]=o(f.name,u,f.capture)),n(f.name,u,f.capture,f.passive,f.params)):u!==l&&(l.fns=u,e[c]=l));for(c in t)i(e[c])&&r((f=ct(c)).name,t[c],f.capture)}function ft(e,t,n){var r;e instanceof ye&&(e=e.data.hook||(e.data.hook={}));var o=e[t];function c(){n.apply(this,arguments),b(r.fns,c)}i(o)?r=ut([c]):a(o.fns)&&s(o.merged)?(r=o).fns.push(c):r=ut([o,c]),r.merged=!0,e[t]=r}function dt(e,t,n,r,o){if(a(t)){if(w(t,n))return e[n]=t[n],o||delete t[n],!0;if(w(t,r))return e[n]=t[r],o||delete t[r],!0}return!1}function pt(e){return c(e)?[_e(e)]:Array.isArray(e)?ht(e):void 0}function vt(e){return a(e)&&a(e.text)&&!1===e.isComment}function ht(e,t){var n,r,o,u,l=[];for(n=0;n<e.length;n++)i(r=e[n])||"boolean"==typeof r||(u=l[o=l.length-1],Array.isArray(r)?r.length>0&&(vt((r=ht(r,(t||"")+"_"+n))[0])&&vt(u)&&(l[o]=_e(u.text+r[0].text),r.shift()),l.push.apply(l,r)):c(r)?vt(u)?l[o]=_e(u.text+r):""!==r&&l.push(_e(r)):vt(r)&&vt(u)?l[o]=_e(u.text+r.text):(s(e._isVList)&&a(r.tag)&&i(r.key)&&a(t)&&(r.key="__vlist"+t+"_"+n+"__"),l.push(r)));return l}function mt(e,t){if(e){for(var n=Object.create(null),r=le?Reflect.ownKeys(e):Object.keys(e),o=0;o<r.length;o++){var i=r[o];if("__ob__"!==i){for(var a=e[i].from,s=t;s;){if(s._provided&&w(s._provided,a)){n[i]=s._provided[a];break}s=s.$parent}if(!s&&"default"in e[i]){var c=e[i].default;n[i]="function"==typeof c?c.call(t):c}}}return n}}function yt(e,t){if(!e||!e.length)return{};for(var n={},r=0,o=e.length;r<o;r++){var i=e[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==t&&i.fnContext!==t||!a||null==a.slot)(n.default||(n.default=[])).push(i);else{var s=a.slot,c=n[s]||(n[s]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var u in n)n[u].every(gt)&&delete n[u];return n}function gt(e){return e.isComment&&!e.asyncFactory||" "===e.text}function bt(e,t,n){var r,i=Object.keys(t).length>0,a=e?!!e.$stable:!i,s=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(a&&n&&n!==o&&s===n.$key&&!i&&!n.$hasNormal)return n;for(var c in r={},e)e[c]&&"$"!==c[0]&&(r[c]=_t(t,c,e[c]))}else r={};for(var u in t)u in r||(r[u]=wt(t,u));return e&&Object.isExtensible(e)&&(e._normalized=r),V(r,"$stable",a),V(r,"$key",s),V(r,"$hasNormal",i),r}function _t(e,t,n){var r=function(){var e=arguments.length?n.apply(null,arguments):n({});return(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:pt(e))&&(0===e.length||1===e.length&&e[0].isComment)?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:r,enumerable:!0,configurable:!0}),r}function wt(e,t){return function(){return e[t]}}function At(e,t){var n,r,o,i,s;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),r=0,o=e.length;r<o;r++)n[r]=t(e[r],r);else if("number"==typeof e)for(n=new Array(e),r=0;r<e;r++)n[r]=t(r+1,r);else if(u(e))if(le&&e[Symbol.iterator]){n=[];for(var c=e[Symbol.iterator](),l=c.next();!l.done;)n.push(t(l.value,n.length)),l=c.next()}else for(i=Object.keys(e),n=new Array(i.length),r=0,o=i.length;r<o;r++)s=i[r],n[r]=t(e[s],s,r);return a(n)||(n=[]),n._isVList=!0,n}function Ot(e,t,n,r){var o,i=this.$scopedSlots[e];i?(n=n||{},r&&(n=E(E({},r),n)),o=i(n)||t):o=this.$slots[e]||t;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},o):o}function $t(e){return Ue(this.$options,"filters",e)||N}function kt(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function xt(e,t,n,r,o){var i=B.keyCodes[t]||n;return o&&r&&!B.keyCodes[t]?kt(o,r):i?kt(i,e):r?S(r)!==t:void 0}function St(e,t,n,r,o){if(n&&u(n)){var i;Array.isArray(n)&&(n=P(n));var a=function(a){if("class"===a||"style"===a||g(a))i=e;else{var s=e.attrs&&e.attrs.type;i=r||B.mustUseProp(t,s,a)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var c=$(a),u=S(a);c in i||u in i||(i[a]=n[a],o&&((e.on||(e.on={}))["update:"+a]=function(e){n[a]=e}))};for(var s in n)a(s)}return e}function Ct(e,t){var n=this._staticTrees||(this._staticTrees=[]),r=n[e];return r&&!t||Et(r=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),r}function jt(e,t,n){return Et(e,"__once__"+t+(n?"_"+n:""),!0),e}function Et(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&Pt(e[r],t+"_"+r,n);else Pt(e,t,n)}function Pt(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function Tt(e,t){if(t&&f(t)){var n=e.on=e.on?E({},e.on):{};for(var r in t){var o=n[r],i=t[r];n[r]=o?[].concat(o,i):i}}return e}function It(e,t,n,r){t=t||{$stable:!n};for(var o=0;o<e.length;o++){var i=e[o];Array.isArray(i)?It(i,t,n):i&&(i.proxy&&(i.fn.proxy=!0),t[i.key]=i.fn)}return r&&(t.$key=r),t}function Nt(e,t){for(var n=0;n<t.length;n+=2){var r=t[n];"string"==typeof r&&r&&(e[t[n]]=t[n+1])}return e}function Dt(e,t){return"string"==typeof e?t+e:e}function Mt(e){e._o=jt,e._n=h,e._s=v,e._l=At,e._t=Ot,e._q=D,e._i=M,e._m=Ct,e._f=$t,e._k=xt,e._b=St,e._v=_e,e._e=be,e._u=It,e._g=Tt,e._d=Nt,e._p=Dt}function Rt(e,t,n,r,i){var a,c=this,u=i.options;w(r,"_uid")?(a=Object.create(r))._original=r:(a=r,r=r._original);var l=s(u._compiled),f=!l;this.data=e,this.props=t,this.children=n,this.parent=r,this.listeners=e.on||o,this.injections=mt(u.inject,r),this.slots=function(){return c.$slots||bt(e.scopedSlots,c.$slots=yt(n,r)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return bt(e.scopedSlots,this.slots())}}),l&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=bt(e.scopedSlots,this.$slots)),u._scopeId?this._c=function(e,t,n,o){var i=Vt(a,e,t,n,o,f);return i&&!Array.isArray(i)&&(i.fnScopeId=u._scopeId,i.fnContext=r),i}:this._c=function(e,t,n,r){return Vt(a,e,t,n,r,f)}}function Lt(e,t,n,r,o){var i=we(e);return i.fnContext=n,i.fnOptions=r,t.slot&&((i.data||(i.data={})).slot=t.slot),i}function Ft(e,t){for(var n in t)e[$(n)]=t[n]}Mt(Rt.prototype);var Ut={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;Ut.prepatch(n,n)}else(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},r=e.data.inlineTemplate;return a(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns),new e.componentOptions.Ctor(n)}(e,tn)).$mount(t?e.elm:void 0,t)},prepatch:function(e,t){var n=t.componentOptions;!function(e,t,n,r,i){var a=r.data.scopedSlots,s=e.$scopedSlots,c=!!(a&&!a.$stable||s!==o&&!s.$stable||a&&e.$scopedSlots.$key!==a.$key),u=!!(i||e.$options._renderChildren||c);if(e.$options._parentVnode=r,e.$vnode=r,e._vnode&&(e._vnode.parent=r),e.$options._renderChildren=i,e.$attrs=r.data.attrs||o,e.$listeners=n||o,t&&e.$options.props){xe(!1);for(var l=e._props,f=e.$options._propKeys||[],d=0;d<f.length;d++){var p=f[d],v=e.$options.props;l[p]=Be(p,v,t,e)}xe(!0),e.$options.propsData=t}n=n||o;var h=e.$options._parentListeners;e.$options._parentListeners=n,en(e,n,h),u&&(e.$slots=yt(i,r.context),e.$forceUpdate())}(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t,n=e.context,r=e.componentInstance;r._isMounted||(r._isMounted=!0,sn(r,"mounted")),e.data.keepAlive&&(n._isMounted?((t=r)._inactive=!1,un.push(t)):on(r,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?an(t,!0):t.$destroy())}},Bt=Object.keys(Ut);function Ht(e,t,n,r,c){if(!i(e)){var l=n.$options._base;if(u(e)&&(e=l.extend(e)),"function"==typeof e){var f;if(i(e.cid)&&void 0===(e=function(e,t){if(s(e.error)&&a(e.errorComp))return e.errorComp;if(a(e.resolved))return e.resolved;var n=qt;if(n&&a(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n),s(e.loading)&&a(e.loadingComp))return e.loadingComp;if(n&&!a(e.owners)){var r=e.owners=[n],o=!0,c=null,l=null;n.$on("hook:destroyed",(function(){return b(r,n)}));var f=function(e){for(var t=0,n=r.length;t<n;t++)r[t].$forceUpdate();e&&(r.length=0,null!==c&&(clearTimeout(c),c=null),null!==l&&(clearTimeout(l),l=null))},d=R((function(n){e.resolved=Jt(n,t),o?r.length=0:f(!0)})),v=R((function(t){a(e.errorComp)&&(e.error=!0,f(!0))})),h=e(d,v);return u(h)&&(p(h)?i(e.resolved)&&h.then(d,v):p(h.component)&&(h.component.then(d,v),a(h.error)&&(e.errorComp=Jt(h.error,t)),a(h.loading)&&(e.loadingComp=Jt(h.loading,t),0===h.delay?e.loading=!0:c=setTimeout((function(){c=null,i(e.resolved)&&i(e.error)&&(e.loading=!0,f(!1))}),h.delay||200)),a(h.timeout)&&(l=setTimeout((function(){l=null,i(e.resolved)&&v(null)}),h.timeout)))),o=!1,e.loading?e.loadingComp:e.resolved}}(f=e,l)))return function(e,t,n,r,o){var i=be();return i.asyncFactory=e,i.asyncMeta={data:t,context:n,children:r,tag:o},i}(f,t,n,r,c);t=t||{},Cn(e),a(t.model)&&function(e,t){var n=e.model&&e.model.prop||"value",r=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var o=t.on||(t.on={}),i=o[r],s=t.model.callback;a(i)?(Array.isArray(i)?-1===i.indexOf(s):i!==s)&&(o[r]=[s].concat(i)):o[r]=s}(e.options,t);var d=function(e,t,n){var r=t.options.props;if(!i(r)){var o={},s=e.attrs,c=e.props;if(a(s)||a(c))for(var u in r){var l=S(u);dt(o,c,u,l,!0)||dt(o,s,u,l,!1)}return o}}(t,e);if(s(e.options.functional))return function(e,t,n,r,i){var s=e.options,c={},u=s.props;if(a(u))for(var l in u)c[l]=Be(l,u,t||o);else a(n.attrs)&&Ft(c,n.attrs),a(n.props)&&Ft(c,n.props);var f=new Rt(n,c,i,r,e),d=s.render.call(null,f._c,f);if(d instanceof ye)return Lt(d,n,f.parent,s);if(Array.isArray(d)){for(var p=pt(d)||[],v=new Array(p.length),h=0;h<p.length;h++)v[h]=Lt(p[h],n,f.parent,s);return v}}(e,d,t,n,r);var v=t.on;if(t.on=t.nativeOn,s(e.options.abstract)){var h=t.slot;t={},h&&(t.slot=h)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<Bt.length;n++){var r=Bt[n],o=t[r],i=Ut[r];o===i||o&&o._merged||(t[r]=o?zt(i,o):i)}}(t);var m=e.options.name||c;return new ye("vue-component-"+e.cid+(m?"-"+m:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:d,listeners:v,tag:c,children:r},f)}}}function zt(e,t){var n=function(n,r){e(n,r),t(n,r)};return n._merged=!0,n}function Vt(e,t,n,r,o,i){return(Array.isArray(n)||c(n))&&(o=r,r=n,n=void 0),s(i)&&(o=2),function(e,t,n,r,o){if(a(n)&&a(n.__ob__))return be();if(a(n)&&a(n.is)&&(t=n.is),!t)return be();var i,s,c;(Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0),2===o?r=pt(r):1===o&&(r=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(r)),"string"==typeof t)?(s=e.$vnode&&e.$vnode.ns||B.getTagNamespace(t),i=B.isReservedTag(t)?new ye(B.parsePlatformTagName(t),n,r,void 0,void 0,e):n&&n.pre||!a(c=Ue(e.$options,"components",t))?new ye(t,n,r,void 0,void 0,e):Ht(c,n,e,r,t)):i=Ht(t,n,e,r);return Array.isArray(i)?i:a(i)?(a(s)&&Wt(i,s),a(n)&&function(e){u(e.style)&&at(e.style),u(e.class)&&at(e.class)}(n),i):be()}(e,t,n,r,o)}function Wt(e,t,n){if(e.ns=t,"foreignObject"===e.tag&&(t=void 0,n=!0),a(e.children))for(var r=0,o=e.children.length;r<o;r++){var c=e.children[r];a(c.tag)&&(i(c.ns)||s(n)&&"svg"!==c.tag)&&Wt(c,t,n)}}var Kt,qt=null;function Jt(e,t){return(e.__esModule||le&&"Module"===e[Symbol.toStringTag])&&(e=e.default),u(e)?t.extend(e):e}function Zt(e){return e.isComment&&e.asyncFactory}function Xt(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(a(n)&&(a(n.componentOptions)||Zt(n)))return n}}function Gt(e,t){Kt.$on(e,t)}function Yt(e,t){Kt.$off(e,t)}function Qt(e,t){var n=Kt;return function r(){var o=t.apply(null,arguments);null!==o&&n.$off(e,r)}}function en(e,t,n){Kt=e,lt(t,n||{},Gt,Yt,Qt,e),Kt=void 0}var tn=null;function nn(e){var t=tn;return tn=e,function(){tn=t}}function rn(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function on(e,t){if(t){if(e._directInactive=!1,rn(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)on(e.$children[n]);sn(e,"activated")}}function an(e,t){if(!(t&&(e._directInactive=!0,rn(e))||e._inactive)){e._inactive=!0;for(var n=0;n<e.$children.length;n++)an(e.$children[n]);sn(e,"deactivated")}}function sn(e,t){he();var n=e.$options[t],r=t+" hook";if(n)for(var o=0,i=n.length;o<i;o++)Ke(n[o],e,null,e,r);e._hasHookEvent&&e.$emit("hook:"+t),me()}var cn=[],un=[],ln={},fn=!1,dn=!1,pn=0,vn=0,hn=Date.now;if(J&&!Y){var mn=window.performance;mn&&"function"==typeof mn.now&&hn()>document.createEvent("Event").timeStamp&&(hn=function(){return mn.now()})}function yn(){var e,t;for(vn=hn(),dn=!0,cn.sort((function(e,t){return e.id-t.id})),pn=0;pn<cn.length;pn++)(e=cn[pn]).before&&e.before(),t=e.id,ln[t]=null,e.run();var n=un.slice(),r=cn.slice();pn=cn.length=un.length=0,ln={},fn=dn=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,on(e[t],!0)}(n),function(e){for(var t=e.length;t--;){var n=e[t],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&sn(r,"updated")}}(r),se&&B.devtools&&se.emit("flush")}var gn=0,bn=function(e,t,n,r,o){this.vm=e,o&&(e._watcher=this),e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++gn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ue,this.newDepIds=new ue,this.expression="","function"==typeof t?this.getter=t:(this.getter=function(e){if(!K.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=T)),this.value=this.lazy?void 0:this.get()};bn.prototype.get=function(){var e;he(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;We(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&at(e),me(),this.cleanupDeps()}return e},bn.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},bn.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},bn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==ln[t]){if(ln[t]=!0,dn){for(var n=cn.length-1;n>pn&&cn[n].id>e.id;)n--;cn.splice(n+1,0,e)}else cn.push(e);fn||(fn=!0,ot(yn))}}(this)},bn.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||u(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){We(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},bn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},bn.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},bn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||b(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var _n={enumerable:!0,configurable:!0,get:T,set:T};function wn(e,t,n){_n.get=function(){return this[t][n]},_n.set=function(e){this[t][n]=e},Object.defineProperty(e,n,_n)}var An={lazy:!0};function On(e,t,n){var r=!ae();"function"==typeof n?(_n.get=r?$n(t):kn(n),_n.set=T):(_n.get=n.get?r&&!1!==n.cache?$n(t):kn(n.get):T,_n.set=n.set||T),Object.defineProperty(e,t,_n)}function $n(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),pe.target&&t.depend(),t.value}}function kn(e){return function(){return e.call(this,this)}}function xn(e,t,n,r){return f(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}var Sn=0;function Cn(e){var t=e.options;if(e.super){var n=Cn(e.super);if(n!==e.superOptions){e.superOptions=n;var r=function(e){var t,n=e.options,r=e.sealedOptions;for(var o in n)n[o]!==r[o]&&(t||(t={}),t[o]=n[o]);return t}(e);r&&E(e.extendOptions,r),(t=e.options=Fe(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function jn(e){this._init(e)}function En(e){return e&&(e.Ctor.options.name||e.tag)}function Pn(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:(n=e,!("[object RegExp]"!==l.call(n))&&e.test(t));var n}function Tn(e,t){var n=e.cache,r=e.keys,o=e._vnode;for(var i in n){var a=n[i];if(a){var s=En(a.componentOptions);s&&!t(s)&&In(n,i,r,o)}}}function In(e,t,n,r){var o=e[t];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),e[t]=null,b(n,t)}!function(e){e.prototype._init=function(e){var t=this;t._uid=Sn++,t._isVue=!0,e&&e._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),r=t._parentVnode;n.parent=t.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(t,e):t.$options=Fe(Cn(t.constructor),e||{},t),t._renderProxy=t,t._self=t,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(t),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&en(e,t)}(t),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,r=n&&n.context;e.$slots=yt(t._renderChildren,r),e.$scopedSlots=o,e._c=function(t,n,r,o){return Vt(e,t,n,r,o,!1)},e.$createElement=function(t,n,r,o){return Vt(e,t,n,r,o,!0)};var i=n&&n.data;je(e,"$attrs",i&&i.attrs||o,null,!0),je(e,"$listeners",t._parentListeners||o,null,!0)}(t),sn(t,"beforeCreate"),function(e){var t=mt(e.$options.inject,e);t&&(xe(!1),Object.keys(t).forEach((function(n){je(e,n,t[n])})),xe(!0))}(t),function(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},r=e._props={},o=e.$options._propKeys=[];e.$parent&&xe(!1);var i=function(i){o.push(i);var a=Be(i,t,n,e);je(r,i,a),i in e||wn(e,"_props",i)};for(var a in t)i(a);xe(!0)}(e,t.props),t.methods&&function(e,t){for(var n in e.$options.props,t)e[n]="function"!=typeof t[n]?T:C(t[n],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;f(t=e._data="function"==typeof t?function(e,t){he();try{return e.call(t,t)}catch(e){return We(e,t,"data()"),{}}finally{me()}}(t,e):t||{})||(t={});for(var n=Object.keys(t),r=e.$options.props,o=(e.$options.methods,n.length);o--;){var i=n[o];r&&w(r,i)||z(i)||wn(e,"_data",i)}Ce(t,!0)}(e):Ce(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),r=ae();for(var o in t){var i=t[o],a="function"==typeof i?i:i.get;r||(n[o]=new bn(e,a||T,T,An)),o in e||On(e,o,i)}}(e,t.computed),t.watch&&t.watch!==re&&function(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)xn(e,n,r[o]);else xn(e,n,r)}}(e,t.watch)}(t),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(t),sn(t,"created"),t.$options.el&&t.$mount(t.$options.el)}}(jn),function(e){Object.defineProperty(e.prototype,"$data",{get:function(){return this._data}}),Object.defineProperty(e.prototype,"$props",{get:function(){return this._props}}),e.prototype.$set=Ee,e.prototype.$delete=Pe,e.prototype.$watch=function(e,t,n){var r=this;if(f(t))return xn(r,e,t,n);(n=n||{}).user=!0;var o=new bn(r,e,t,n);if(n.immediate)try{t.call(r,o.value)}catch(e){We(e,r,'callback for immediate watcher "'+o.expression+'"')}return function(){o.teardown()}}}(jn),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this;if(Array.isArray(e))for(var o=0,i=e.length;o<i;o++)r.$on(e[o],n);else(r._events[e]||(r._events[e]=[])).push(n),t.test(e)&&(r._hasHookEvent=!0);return r},e.prototype.$once=function(e,t){var n=this;function r(){n.$off(e,r),t.apply(n,arguments)}return r.fn=t,n.$on(e,r),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var r=0,o=e.length;r<o;r++)n.$off(e[r],t);return n}var i,a=n._events[e];if(!a)return n;if(!t)return n._events[e]=null,n;for(var s=a.length;s--;)if((i=a[s])===t||i.fn===t){a.splice(s,1);break}return n},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?j(n):n;for(var r=j(arguments,1),o='event handler for "'+e+'"',i=0,a=n.length;i<a;i++)Ke(n[i],t,r,t,o)}return t}}(jn),function(e){e.prototype._update=function(e,t){var n=this,r=n.$el,o=n._vnode,i=nn(n);n._vnode=e,n.$el=o?n.__patch__(o,e):n.__patch__(n.$el,e,t,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){sn(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||b(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),sn(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(jn),function(e){Mt(e.prototype),e.prototype.$nextTick=function(e){return ot(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,r=n.render,o=n._parentVnode;o&&(t.$scopedSlots=bt(o.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=o;try{qt=t,e=r.call(t._renderProxy,t.$createElement)}catch(n){We(n,t,"render"),e=t._vnode}finally{qt=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof ye||(e=be()),e.parent=o,e}}(jn);var Nn=[String,RegExp,Array],Dn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Nn,exclude:Nn,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)In(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",(function(t){Tn(e,(function(e){return Pn(t,e)}))})),this.$watch("exclude",(function(t){Tn(e,(function(e){return!Pn(t,e)}))}))},render:function(){var e=this.$slots.default,t=Xt(e),n=t&&t.componentOptions;if(n){var r=En(n),o=this.include,i=this.exclude;if(o&&(!r||!Pn(o,r))||i&&r&&Pn(i,r))return t;var a=this.cache,s=this.keys,c=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;a[c]?(t.componentInstance=a[c].componentInstance,b(s,c),s.push(c)):(a[c]=t,s.push(c),this.max&&s.length>parseInt(this.max)&&In(a,s[0],s,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return B}};Object.defineProperty(e,"config",t),e.util={warn:fe,extend:E,mergeOptions:Fe,defineReactive:je},e.set=Ee,e.delete=Pe,e.nextTick=ot,e.observable=function(e){return Ce(e),e},e.options=Object.create(null),F.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,E(e.options.components,Dn),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=j(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Fe(this.options,e),this}}(e),function(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,o=e._Ctor||(e._Ctor={});if(o[r])return o[r];var i=e.name||n.options.name,a=function(e){this._init(e)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=t++,a.options=Fe(n.options,e),a.super=n,a.options.props&&function(e){var t=e.options.props;for(var n in t)wn(e.prototype,"_props",n)}(a),a.options.computed&&function(e){var t=e.options.computed;for(var n in t)On(e.prototype,n,t[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,F.forEach((function(e){a[e]=n[e]})),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=e,a.sealedOptions=E({},a.options),o[r]=a,a}}(e),function(e){F.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&f(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}(e)}(jn),Object.defineProperty(jn.prototype,"$isServer",{get:ae}),Object.defineProperty(jn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(jn,"FunctionalRenderContext",{value:Rt}),jn.version="2.6.12";var Mn=m("style,class"),Rn=m("input,textarea,option,select,progress"),Ln=function(e,t,n){return"value"===n&&Rn(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},Fn=m("contenteditable,draggable,spellcheck"),Un=m("events,caret,typing,plaintext-only"),Bn=m("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Hn="http://www.w3.org/1999/xlink",zn=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Vn=function(e){return zn(e)?e.slice(6,e.length):""},Wn=function(e){return null==e||!1===e};function Kn(e,t){return{staticClass:qn(e.staticClass,t.staticClass),class:a(e.class)?[e.class,t.class]:t.class}}function qn(e,t){return e?t?e+" "+t:e:t||""}function Jn(e){return Array.isArray(e)?function(e){for(var t,n="",r=0,o=e.length;r<o;r++)a(t=Jn(e[r]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):u(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var Zn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Xn=m("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Gn=m("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Yn=function(e){return Xn(e)||Gn(e)};function Qn(e){return Gn(e)?"svg":"math"===e?"math":void 0}var er=Object.create(null),tr=m("text,number,password,search,email,tel,url");function nr(e){return"string"==typeof e?document.querySelector(e)||document.createElement("div"):e}var rr=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(e,t){return document.createElementNS(Zn[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),or={create:function(e,t){ir(t)},update:function(e,t){e.data.ref!==t.data.ref&&(ir(e,!0),ir(t))},destroy:function(e){ir(e,!0)}};function ir(e,t){var n=e.data.ref;if(a(n)){var r=e.context,o=e.componentInstance||e.elm,i=r.$refs;t?Array.isArray(i[n])?b(i[n],o):i[n]===o&&(i[n]=void 0):e.data.refInFor?Array.isArray(i[n])?i[n].indexOf(o)<0&&i[n].push(o):i[n]=[o]:i[n]=o}}var ar=new ye("",{},[]),sr=["create","activate","update","remove","destroy"];function cr(e,t){return e.key===t.key&&(e.tag===t.tag&&e.isComment===t.isComment&&a(e.data)===a(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,r=a(n=e.data)&&a(n=n.attrs)&&n.type,o=a(n=t.data)&&a(n=n.attrs)&&n.type;return r===o||tr(r)&&tr(o)}(e,t)||s(e.isAsyncPlaceholder)&&e.asyncFactory===t.asyncFactory&&i(t.asyncFactory.error))}function ur(e,t,n){var r,o,i={};for(r=t;r<=n;++r)a(o=e[r].key)&&(i[o]=r);return i}var lr={create:fr,update:fr,destroy:function(e){fr(e,ar)}};function fr(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,r,o,i=e===ar,a=t===ar,s=pr(e.data.directives,e.context),c=pr(t.data.directives,t.context),u=[],l=[];for(n in c)r=s[n],o=c[n],r?(o.oldValue=r.value,o.oldArg=r.arg,hr(o,"update",t,e),o.def&&o.def.componentUpdated&&l.push(o)):(hr(o,"bind",t,e),o.def&&o.def.inserted&&u.push(o));if(u.length){var f=function(){for(var n=0;n<u.length;n++)hr(u[n],"inserted",t,e)};i?ft(t,"insert",f):f()}if(l.length&&ft(t,"postpatch",(function(){for(var n=0;n<l.length;n++)hr(l[n],"componentUpdated",t,e)})),!i)for(n in s)c[n]||hr(s[n],"unbind",e,e,a)}(e,t)}var dr=Object.create(null);function pr(e,t){var n,r,o=Object.create(null);if(!e)return o;for(n=0;n<e.length;n++)(r=e[n]).modifiers||(r.modifiers=dr),o[vr(r)]=r,r.def=Ue(t.$options,"directives",r.name);return o}function vr(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function hr(e,t,n,r,o){var i=e.def&&e.def[t];if(i)try{i(n.elm,e,n,r,o)}catch(r){We(r,n.context,"directive "+e.name+" "+t+" hook")}}var mr=[or,lr];function yr(e,t){var n=t.componentOptions;if(!(a(n)&&!1===n.Ctor.options.inheritAttrs||i(e.data.attrs)&&i(t.data.attrs))){var r,o,s=t.elm,c=e.data.attrs||{},u=t.data.attrs||{};for(r in a(u.__ob__)&&(u=t.data.attrs=E({},u)),u)o=u[r],c[r]!==o&&gr(s,r,o);for(r in(Y||ee)&&u.value!==c.value&&gr(s,"value",u.value),c)i(u[r])&&(zn(r)?s.removeAttributeNS(Hn,Vn(r)):Fn(r)||s.removeAttribute(r))}}function gr(e,t,n){e.tagName.indexOf("-")>-1?br(e,t,n):Bn(t)?Wn(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):Fn(t)?e.setAttribute(t,function(e,t){return Wn(t)||"false"===t?"false":"contenteditable"===e&&Un(t)?t:"true"}(t,n)):zn(t)?Wn(n)?e.removeAttributeNS(Hn,Vn(t)):e.setAttributeNS(Hn,t,n):br(e,t,n)}function br(e,t,n){if(Wn(n))e.removeAttribute(t);else{if(Y&&!Q&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var r=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",r)};e.addEventListener("input",r),e.__ieph=!0}e.setAttribute(t,n)}}var _r={create:yr,update:yr};function wr(e,t){var n=t.elm,r=t.data,o=e.data;if(!(i(r.staticClass)&&i(r.class)&&(i(o)||i(o.staticClass)&&i(o.class)))){var s=function(e){for(var t=e.data,n=e,r=e;a(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(t=Kn(r.data,t));for(;a(n=n.parent);)n&&n.data&&(t=Kn(t,n.data));return o=t.staticClass,i=t.class,a(o)||a(i)?qn(o,Jn(i)):"";var o,i}(t),c=n._transitionClasses;a(c)&&(s=qn(s,Jn(c))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var Ar,Or,$r,kr,xr,Sr,Cr={create:wr,update:wr},jr=/[\w).+\-_$\]]/;function Er(e){var t,n,r,o,i,a=!1,s=!1,c=!1,u=!1,l=0,f=0,d=0,p=0;for(r=0;r<e.length;r++)if(n=t,t=e.charCodeAt(r),a)39===t&&92!==n&&(a=!1);else if(s)34===t&&92!==n&&(s=!1);else if(c)96===t&&92!==n&&(c=!1);else if(u)47===t&&92!==n&&(u=!1);else if(124!==t||124===e.charCodeAt(r+1)||124===e.charCodeAt(r-1)||l||f||d){switch(t){case 34:s=!0;break;case 39:a=!0;break;case 96:c=!0;break;case 40:d++;break;case 41:d--;break;case 91:f++;break;case 93:f--;break;case 123:l++;break;case 125:l--}if(47===t){for(var v=r-1,h=void 0;v>=0&&" "===(h=e.charAt(v));v--);h&&jr.test(h)||(u=!0)}}else void 0===o?(p=r+1,o=e.slice(0,r).trim()):m();function m(){(i||(i=[])).push(e.slice(p,r).trim()),p=r+1}if(void 0===o?o=e.slice(0,r).trim():0!==p&&m(),i)for(r=0;r<i.length;r++)o=Pr(o,i[r]);return o}function Pr(e,t){var n=t.indexOf("(");if(n<0)return'_f("'+t+'")('+e+")";var r=t.slice(0,n),o=t.slice(n+1);return'_f("'+r+'")('+e+(")"!==o?","+o:o)}function Tr(e,t){console.error("[Vue compiler]: "+e)}function Ir(e,t){return e?e.map((function(e){return e[t]})).filter((function(e){return e})):[]}function Nr(e,t,n,r,o){(e.props||(e.props=[])).push(zr({name:t,value:n,dynamic:o},r)),e.plain=!1}function Dr(e,t,n,r,o){(o?e.dynamicAttrs||(e.dynamicAttrs=[]):e.attrs||(e.attrs=[])).push(zr({name:t,value:n,dynamic:o},r)),e.plain=!1}function Mr(e,t,n,r){e.attrsMap[t]=n,e.attrsList.push(zr({name:t,value:n},r))}function Rr(e,t,n,r,o,i,a,s){(e.directives||(e.directives=[])).push(zr({name:t,rawName:n,value:r,arg:o,isDynamicArg:i,modifiers:a},s)),e.plain=!1}function Lr(e,t,n){return n?"_p("+t+',"'+e+'")':e+t}function Fr(e,t,n,r,i,a,s,c){var u;(r=r||o).right?c?t="("+t+")==='click'?'contextmenu':("+t+")":"click"===t&&(t="contextmenu",delete r.right):r.middle&&(c?t="("+t+")==='click'?'mouseup':("+t+")":"click"===t&&(t="mouseup")),r.capture&&(delete r.capture,t=Lr("!",t,c)),r.once&&(delete r.once,t=Lr("~",t,c)),r.passive&&(delete r.passive,t=Lr("&",t,c)),r.native?(delete r.native,u=e.nativeEvents||(e.nativeEvents={})):u=e.events||(e.events={});var l=zr({value:n.trim(),dynamic:c},s);r!==o&&(l.modifiers=r);var f=u[t];Array.isArray(f)?i?f.unshift(l):f.push(l):u[t]=f?i?[l,f]:[f,l]:l,e.plain=!1}function Ur(e,t,n){var r=Br(e,":"+t)||Br(e,"v-bind:"+t);if(null!=r)return Er(r);if(!1!==n){var o=Br(e,t);if(null!=o)return JSON.stringify(o)}}function Br(e,t,n){var r;if(null!=(r=e.attrsMap[t]))for(var o=e.attrsList,i=0,a=o.length;i<a;i++)if(o[i].name===t){o.splice(i,1);break}return n&&delete e.attrsMap[t],r}function Hr(e,t){for(var n=e.attrsList,r=0,o=n.length;r<o;r++){var i=n[r];if(t.test(i.name))return n.splice(r,1),i}}function zr(e,t){return t&&(null!=t.start&&(e.start=t.start),null!=t.end&&(e.end=t.end)),e}function Vr(e,t,n){var r=n||{},o=r.number,i="$$v";r.trim&&(i="(typeof $$v === 'string'? $$v.trim(): $$v)"),o&&(i="_n("+i+")");var a=Wr(t,i);e.model={value:"("+t+")",expression:JSON.stringify(t),callback:"function ($$v) {"+a+"}"}}function Wr(e,t){var n=function(e){if(e=e.trim(),Ar=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<Ar-1)return(kr=e.lastIndexOf("."))>-1?{exp:e.slice(0,kr),key:'"'+e.slice(kr+1)+'"'}:{exp:e,key:null};for(Or=e,kr=xr=Sr=0;!qr();)Jr($r=Kr())?Xr($r):91===$r&&Zr($r);return{exp:e.slice(0,xr),key:e.slice(xr+1,Sr)}}(e);return null===n.key?e+"="+t:"$set("+n.exp+", "+n.key+", "+t+")"}function Kr(){return Or.charCodeAt(++kr)}function qr(){return kr>=Ar}function Jr(e){return 34===e||39===e}function Zr(e){var t=1;for(xr=kr;!qr();)if(Jr(e=Kr()))Xr(e);else if(91===e&&t++,93===e&&t--,0===t){Sr=kr;break}}function Xr(e){for(var t=e;!qr()&&(e=Kr())!==t;);}var Gr;function Yr(e,t,n){var r=Gr;return function o(){var i=t.apply(null,arguments);null!==i&&to(e,o,n,r)}}var Qr=Xe&&!(ne&&Number(ne[1])<=53);function eo(e,t,n,r){if(Qr){var o=vn,i=t;t=i._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=o||e.timeStamp<=0||e.target.ownerDocument!==document)return i.apply(this,arguments)}}Gr.addEventListener(e,t,oe?{capture:n,passive:r}:n)}function to(e,t,n,r){(r||Gr).removeEventListener(e,t._wrapper||t,n)}function no(e,t){if(!i(e.data.on)||!i(t.data.on)){var n=t.data.on||{},r=e.data.on||{};Gr=t.elm,function(e){if(a(e.__r)){var t=Y?"change":"input";e[t]=[].concat(e.__r,e[t]||[]),delete e.__r}a(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(n),lt(n,r,eo,to,Yr,t.context),Gr=void 0}}var ro,oo={create:no,update:no};function io(e,t){if(!i(e.data.domProps)||!i(t.data.domProps)){var n,r,o=t.elm,s=e.data.domProps||{},c=t.data.domProps||{};for(n in a(c.__ob__)&&(c=t.data.domProps=E({},c)),s)n in c||(o[n]="");for(n in c){if(r=c[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),r===s[n])continue;1===o.childNodes.length&&o.removeChild(o.childNodes[0])}if("value"===n&&"PROGRESS"!==o.tagName){o._value=r;var u=i(r)?"":String(r);ao(o,u)&&(o.value=u)}else if("innerHTML"===n&&Gn(o.tagName)&&i(o.innerHTML)){(ro=ro||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var l=ro.firstChild;o.firstChild;)o.removeChild(o.firstChild);for(;l.firstChild;)o.appendChild(l.firstChild)}else if(r!==s[n])try{o[n]=r}catch(e){}}}}function ao(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,r=e._vModifiers;if(a(r)){if(r.number)return h(n)!==h(t);if(r.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var so={create:io,update:io},co=A((function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var r=e.split(n);r.length>1&&(t[r[0].trim()]=r[1].trim())}})),t}));function uo(e){var t=lo(e.style);return e.staticStyle?E(e.staticStyle,t):t}function lo(e){return Array.isArray(e)?P(e):"string"==typeof e?co(e):e}var fo,po=/^--/,vo=/\s*!important$/,ho=function(e,t,n){if(po.test(t))e.style.setProperty(t,n);else if(vo.test(n))e.style.setProperty(S(t),n.replace(vo,""),"important");else{var r=yo(t);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)e.style[r]=n[o];else e.style[r]=n}},mo=["Webkit","Moz","ms"],yo=A((function(e){if(fo=fo||document.createElement("div").style,"filter"!==(e=$(e))&&e in fo)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<mo.length;n++){var r=mo[n]+t;if(r in fo)return r}}));function go(e,t){var n=t.data,r=e.data;if(!(i(n.staticStyle)&&i(n.style)&&i(r.staticStyle)&&i(r.style))){var o,s,c=t.elm,u=r.staticStyle,l=r.normalizedStyle||r.style||{},f=u||l,d=lo(t.data.style)||{};t.data.normalizedStyle=a(d.__ob__)?E({},d):d;var p=function(e,t){for(var n,r={},o=e;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(n=uo(o.data))&&E(r,n);(n=uo(e.data))&&E(r,n);for(var i=e;i=i.parent;)i.data&&(n=uo(i.data))&&E(r,n);return r}(t);for(s in f)i(p[s])&&ho(c,s,"");for(s in p)(o=p[s])!==f[s]&&ho(c,s,null==o?"":o)}}var bo={create:go,update:go},_o=/\s+/;function wo(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(_o).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function Ao(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(_o).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function Oo(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&E(t,$o(e.name||"v")),E(t,e),t}return"string"==typeof e?$o(e):void 0}}var $o=A((function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}})),ko=J&&!Q,xo="transition",So="animation",Co="transition",jo="transitionend",Eo="animation",Po="animationend";ko&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Co="WebkitTransition",jo="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Eo="WebkitAnimation",Po="webkitAnimationEnd"));var To=J?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function Io(e){To((function(){To(e)}))}function No(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),wo(e,t))}function Do(e,t){e._transitionClasses&&b(e._transitionClasses,t),Ao(e,t)}function Mo(e,t,n){var r=Lo(e,t),o=r.type,i=r.timeout,a=r.propCount;if(!o)return n();var s=o===xo?jo:Po,c=0,u=function(){e.removeEventListener(s,l),n()},l=function(t){t.target===e&&++c>=a&&u()};setTimeout((function(){c<a&&u()}),i+1),e.addEventListener(s,l)}var Ro=/\b(transform|all)(,|$)/;function Lo(e,t){var n,r=window.getComputedStyle(e),o=(r[Co+"Delay"]||"").split(", "),i=(r[Co+"Duration"]||"").split(", "),a=Fo(o,i),s=(r[Eo+"Delay"]||"").split(", "),c=(r[Eo+"Duration"]||"").split(", "),u=Fo(s,c),l=0,f=0;return t===xo?a>0&&(n=xo,l=a,f=i.length):t===So?u>0&&(n=So,l=u,f=c.length):f=(n=(l=Math.max(a,u))>0?a>u?xo:So:null)?n===xo?i.length:c.length:0,{type:n,timeout:l,propCount:f,hasTransform:n===xo&&Ro.test(r[Co+"Property"])}}function Fo(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,n){return Uo(t)+Uo(e[n])})))}function Uo(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Bo(e,t){var n=e.elm;a(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=Oo(e.data.transition);if(!i(r)&&!a(n._enterCb)&&1===n.nodeType){for(var o=r.css,s=r.type,c=r.enterClass,l=r.enterToClass,f=r.enterActiveClass,d=r.appearClass,p=r.appearToClass,v=r.appearActiveClass,m=r.beforeEnter,y=r.enter,g=r.afterEnter,b=r.enterCancelled,_=r.beforeAppear,w=r.appear,A=r.afterAppear,O=r.appearCancelled,$=r.duration,k=tn,x=tn.$vnode;x&&x.parent;)k=x.context,x=x.parent;var S=!k._isMounted||!e.isRootInsert;if(!S||w||""===w){var C=S&&d?d:c,j=S&&v?v:f,E=S&&p?p:l,P=S&&_||m,T=S&&"function"==typeof w?w:y,I=S&&A||g,N=S&&O||b,D=h(u($)?$.enter:$),M=!1!==o&&!Q,L=Vo(T),F=n._enterCb=R((function(){M&&(Do(n,E),Do(n,j)),F.cancelled?(M&&Do(n,C),N&&N(n)):I&&I(n),n._enterCb=null}));e.data.show||ft(e,"insert",(function(){var t=n.parentNode,r=t&&t._pending&&t._pending[e.key];r&&r.tag===e.tag&&r.elm._leaveCb&&r.elm._leaveCb(),T&&T(n,F)})),P&&P(n),M&&(No(n,C),No(n,j),Io((function(){Do(n,C),F.cancelled||(No(n,E),L||(zo(D)?setTimeout(F,D):Mo(n,s,F)))}))),e.data.show&&(t&&t(),T&&T(n,F)),M||L||F()}}}function Ho(e,t){var n=e.elm;a(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=Oo(e.data.transition);if(i(r)||1!==n.nodeType)return t();if(!a(n._leaveCb)){var o=r.css,s=r.type,c=r.leaveClass,l=r.leaveToClass,f=r.leaveActiveClass,d=r.beforeLeave,p=r.leave,v=r.afterLeave,m=r.leaveCancelled,y=r.delayLeave,g=r.duration,b=!1!==o&&!Q,_=Vo(p),w=h(u(g)?g.leave:g),A=n._leaveCb=R((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),b&&(Do(n,l),Do(n,f)),A.cancelled?(b&&Do(n,c),m&&m(n)):(t(),v&&v(n)),n._leaveCb=null}));y?y(O):O()}function O(){A.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),d&&d(n),b&&(No(n,c),No(n,f),Io((function(){Do(n,c),A.cancelled||(No(n,l),_||(zo(w)?setTimeout(A,w):Mo(n,s,A)))}))),p&&p(n,A),b||_||A())}}function zo(e){return"number"==typeof e&&!isNaN(e)}function Vo(e){if(i(e))return!1;var t=e.fns;return a(t)?Vo(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function Wo(e,t){!0!==t.data.show&&Bo(t)}var Ko=function(e){var t,n,r={},o=e.modules,u=e.nodeOps;for(t=0;t<sr.length;++t)for(r[sr[t]]=[],n=0;n<o.length;++n)a(o[n][sr[t]])&&r[sr[t]].push(o[n][sr[t]]);function l(e){var t=u.parentNode(e);a(t)&&u.removeChild(t,e)}function f(e,t,n,o,i,c,l){if(a(e.elm)&&a(c)&&(e=c[l]=we(e)),e.isRootInsert=!i,!function(e,t,n,o){var i=e.data;if(a(i)){var c=a(e.componentInstance)&&i.keepAlive;if(a(i=i.hook)&&a(i=i.init)&&i(e,!1),a(e.componentInstance))return d(e,t),p(n,e.elm,o),s(c)&&function(e,t,n,o){for(var i,s=e;s.componentInstance;)if(a(i=(s=s.componentInstance._vnode).data)&&a(i=i.transition)){for(i=0;i<r.activate.length;++i)r.activate[i](ar,s);t.push(s);break}p(n,e.elm,o)}(e,t,n,o),!0}}(e,t,n,o)){var f=e.data,h=e.children,m=e.tag;a(m)?(e.elm=e.ns?u.createElementNS(e.ns,m):u.createElement(m,e),g(e),v(e,h,t),a(f)&&y(e,t),p(n,e.elm,o)):s(e.isComment)?(e.elm=u.createComment(e.text),p(n,e.elm,o)):(e.elm=u.createTextNode(e.text),p(n,e.elm,o))}}function d(e,t){a(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,h(e)?(y(e,t),g(e)):(ir(e),t.push(e))}function p(e,t,n){a(e)&&(a(n)?u.parentNode(n)===e&&u.insertBefore(e,t,n):u.appendChild(e,t))}function v(e,t,n){if(Array.isArray(t))for(var r=0;r<t.length;++r)f(t[r],n,e.elm,null,!0,t,r);else c(e.text)&&u.appendChild(e.elm,u.createTextNode(String(e.text)))}function h(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return a(e.tag)}function y(e,n){for(var o=0;o<r.create.length;++o)r.create[o](ar,e);a(t=e.data.hook)&&(a(t.create)&&t.create(ar,e),a(t.insert)&&n.push(e))}function g(e){var t;if(a(t=e.fnScopeId))u.setStyleScope(e.elm,t);else for(var n=e;n;)a(t=n.context)&&a(t=t.$options._scopeId)&&u.setStyleScope(e.elm,t),n=n.parent;a(t=tn)&&t!==e.context&&t!==e.fnContext&&a(t=t.$options._scopeId)&&u.setStyleScope(e.elm,t)}function b(e,t,n,r,o,i){for(;r<=o;++r)f(n[r],i,e,t,!1,n,r)}function _(e){var t,n,o=e.data;if(a(o))for(a(t=o.hook)&&a(t=t.destroy)&&t(e),t=0;t<r.destroy.length;++t)r.destroy[t](e);if(a(t=e.children))for(n=0;n<e.children.length;++n)_(e.children[n])}function w(e,t,n){for(;t<=n;++t){var r=e[t];a(r)&&(a(r.tag)?(A(r),_(r)):l(r.elm))}}function A(e,t){if(a(t)||a(e.data)){var n,o=r.remove.length+1;for(a(t)?t.listeners+=o:t=function(e,t){function n(){0==--n.listeners&&l(e)}return n.listeners=t,n}(e.elm,o),a(n=e.componentInstance)&&a(n=n._vnode)&&a(n.data)&&A(n,t),n=0;n<r.remove.length;++n)r.remove[n](e,t);a(n=e.data.hook)&&a(n=n.remove)?n(e,t):t()}else l(e.elm)}function O(e,t,n,r){for(var o=n;o<r;o++){var i=t[o];if(a(i)&&cr(e,i))return o}}function $(e,t,n,o,c,l){if(e!==t){a(t.elm)&&a(o)&&(t=o[c]=we(t));var d=t.elm=e.elm;if(s(e.isAsyncPlaceholder))a(t.asyncFactory.resolved)?S(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(s(t.isStatic)&&s(e.isStatic)&&t.key===e.key&&(s(t.isCloned)||s(t.isOnce)))t.componentInstance=e.componentInstance;else{var p,v=t.data;a(v)&&a(p=v.hook)&&a(p=p.prepatch)&&p(e,t);var m=e.children,y=t.children;if(a(v)&&h(t)){for(p=0;p<r.update.length;++p)r.update[p](e,t);a(p=v.hook)&&a(p=p.update)&&p(e,t)}i(t.text)?a(m)&&a(y)?m!==y&&function(e,t,n,r,o){for(var s,c,l,d=0,p=0,v=t.length-1,h=t[0],m=t[v],y=n.length-1,g=n[0],_=n[y],A=!o;d<=v&&p<=y;)i(h)?h=t[++d]:i(m)?m=t[--v]:cr(h,g)?($(h,g,r,n,p),h=t[++d],g=n[++p]):cr(m,_)?($(m,_,r,n,y),m=t[--v],_=n[--y]):cr(h,_)?($(h,_,r,n,y),A&&u.insertBefore(e,h.elm,u.nextSibling(m.elm)),h=t[++d],_=n[--y]):cr(m,g)?($(m,g,r,n,p),A&&u.insertBefore(e,m.elm,h.elm),m=t[--v],g=n[++p]):(i(s)&&(s=ur(t,d,v)),i(c=a(g.key)?s[g.key]:O(g,t,d,v))?f(g,r,e,h.elm,!1,n,p):cr(l=t[c],g)?($(l,g,r,n,p),t[c]=void 0,A&&u.insertBefore(e,l.elm,h.elm)):f(g,r,e,h.elm,!1,n,p),g=n[++p]);d>v?b(e,i(n[y+1])?null:n[y+1].elm,n,p,y,r):p>y&&w(t,d,v)}(d,m,y,n,l):a(y)?(a(e.text)&&u.setTextContent(d,""),b(d,null,y,0,y.length-1,n)):a(m)?w(m,0,m.length-1):a(e.text)&&u.setTextContent(d,""):e.text!==t.text&&u.setTextContent(d,t.text),a(v)&&a(p=v.hook)&&a(p=p.postpatch)&&p(e,t)}}}function k(e,t,n){if(s(n)&&a(e.parent))e.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}var x=m("attrs,class,staticClass,staticStyle,key");function S(e,t,n,r){var o,i=t.tag,c=t.data,u=t.children;if(r=r||c&&c.pre,t.elm=e,s(t.isComment)&&a(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(a(c)&&(a(o=c.hook)&&a(o=o.init)&&o(t,!0),a(o=t.componentInstance)))return d(t,n),!0;if(a(i)){if(a(u))if(e.hasChildNodes())if(a(o=c)&&a(o=o.domProps)&&a(o=o.innerHTML)){if(o!==e.innerHTML)return!1}else{for(var l=!0,f=e.firstChild,p=0;p<u.length;p++){if(!f||!S(f,u[p],n,r)){l=!1;break}f=f.nextSibling}if(!l||f)return!1}else v(t,u,n);if(a(c)){var h=!1;for(var m in c)if(!x(m)){h=!0,y(t,n);break}!h&&c.class&&at(c.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,o){if(!i(t)){var c,l=!1,d=[];if(i(e))l=!0,f(t,d);else{var p=a(e.nodeType);if(!p&&cr(e,t))$(e,t,d,null,null,o);else{if(p){if(1===e.nodeType&&e.hasAttribute(L)&&(e.removeAttribute(L),n=!0),s(n)&&S(e,t,d))return k(t,d,!0),e;c=e,e=new ye(u.tagName(c).toLowerCase(),{},[],void 0,c)}var v=e.elm,m=u.parentNode(v);if(f(t,d,v._leaveCb?null:m,u.nextSibling(v)),a(t.parent))for(var y=t.parent,g=h(t);y;){for(var b=0;b<r.destroy.length;++b)r.destroy[b](y);if(y.elm=t.elm,g){for(var A=0;A<r.create.length;++A)r.create[A](ar,y);var O=y.data.hook.insert;if(O.merged)for(var x=1;x<O.fns.length;x++)O.fns[x]()}else ir(y);y=y.parent}a(m)?w([e],0,0):a(e.tag)&&_(e)}}return k(t,d,l),t.elm}a(e)&&_(e)}}({nodeOps:rr,modules:[_r,Cr,oo,so,bo,J?{create:Wo,activate:Wo,remove:function(e,t){!0!==e.data.show?Ho(e,t):t()}}:{}].concat(mr)});Q&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&ei(e,"input")}));var qo={inserted:function(e,t,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?ft(n,"postpatch",(function(){qo.componentUpdated(e,t,n)})):Jo(e,t,n.context),e._vOptions=[].map.call(e.options,Go)):("textarea"===n.tag||tr(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",Yo),e.addEventListener("compositionend",Qo),e.addEventListener("change",Qo),Q&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){Jo(e,t,n.context);var r=e._vOptions,o=e._vOptions=[].map.call(e.options,Go);o.some((function(e,t){return!D(e,r[t])}))&&(e.multiple?t.value.some((function(e){return Xo(e,o)})):t.value!==t.oldValue&&Xo(t.value,o))&&ei(e,"change")}}};function Jo(e,t,n){Zo(e,t),(Y||ee)&&setTimeout((function(){Zo(e,t)}),0)}function Zo(e,t,n){var r=t.value,o=e.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,c=e.options.length;s<c;s++)if(a=e.options[s],o)i=M(r,Go(a))>-1,a.selected!==i&&(a.selected=i);else if(D(Go(a),r))return void(e.selectedIndex!==s&&(e.selectedIndex=s));o||(e.selectedIndex=-1)}}function Xo(e,t){return t.every((function(t){return!D(t,e)}))}function Go(e){return"_value"in e?e._value:e.value}function Yo(e){e.target.composing=!0}function Qo(e){e.target.composing&&(e.target.composing=!1,ei(e.target,"input"))}function ei(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function ti(e){return!e.componentInstance||e.data&&e.data.transition?e:ti(e.componentInstance._vnode)}var ni={model:qo,show:{bind:function(e,t,n){var r=t.value,o=(n=ti(n)).data&&n.data.transition,i=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&o?(n.data.show=!0,Bo(n,(function(){e.style.display=i}))):e.style.display=r?i:"none"},update:function(e,t,n){var r=t.value;!r!=!t.oldValue&&((n=ti(n)).data&&n.data.transition?(n.data.show=!0,r?Bo(n,(function(){e.style.display=e.__vOriginalDisplay})):Ho(n,(function(){e.style.display="none"}))):e.style.display=r?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,r,o){o||(e.style.display=e.__vOriginalDisplay)}}},ri={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function oi(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?oi(Xt(t.children)):e}function ii(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var o=n._parentListeners;for(var i in o)t[$(i)]=o[i];return t}function ai(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var si=function(e){return e.tag||Zt(e)},ci=function(e){return"show"===e.name},ui={name:"transition",props:ri,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(si)).length){var r=this.mode,o=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return o;var i=oi(o);if(!i)return o;if(this._leaving)return ai(e,o);var a="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?a+"comment":a+i.tag:c(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var s=(i.data||(i.data={})).transition=ii(this),u=this._vnode,l=oi(u);if(i.data.directives&&i.data.directives.some(ci)&&(i.data.show=!0),l&&l.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(i,l)&&!Zt(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var f=l.data.transition=E({},s);if("out-in"===r)return this._leaving=!0,ft(f,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),ai(e,o);if("in-out"===r){if(Zt(i))return u;var d,p=function(){d()};ft(s,"afterEnter",p),ft(s,"enterCancelled",p),ft(f,"delayLeave",(function(e){d=e}))}}return o}}},li=E({tag:String,moveClass:String},ri);function fi(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function di(e){e.data.newPos=e.elm.getBoundingClientRect()}function pi(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,o=t.top-n.top;if(r||o){e.data.moved=!0;var i=e.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}delete li.mode;var vi={Transition:ui,TransitionGroup:{props:li,beforeMount:function(){var e=this,t=this._update;this._update=function(n,r){var o=nn(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,o(),t.call(e,n,r)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=ii(this),s=0;s<o.length;s++){var c=o[s];c.tag&&null!=c.key&&0!==String(c.key).indexOf("__vlist")&&(i.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a)}if(r){for(var u=[],l=[],f=0;f<r.length;f++){var d=r[f];d.data.transition=a,d.data.pos=d.elm.getBoundingClientRect(),n[d.key]?u.push(d):l.push(d)}this.kept=e(t,null,u),this.removed=l}return e(t,null,i)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(fi),e.forEach(di),e.forEach(pi),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var n=e.elm,r=n.style;No(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(jo,n._moveCb=function e(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(jo,e),n._moveCb=null,Do(n,t))})}})))},methods:{hasMove:function(e,t){if(!ko)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){Ao(n,e)})),wo(n,t),n.style.display="none",this.$el.appendChild(n);var r=Lo(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};jn.config.mustUseProp=Ln,jn.config.isReservedTag=Yn,jn.config.isReservedAttr=Mn,jn.config.getTagNamespace=Qn,jn.config.isUnknownElement=function(e){if(!J)return!0;if(Yn(e))return!1;if(e=e.toLowerCase(),null!=er[e])return er[e];var t=document.createElement(e);return e.indexOf("-")>-1?er[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:er[e]=/HTMLUnknownElement/.test(t.toString())},E(jn.options.directives,ni),E(jn.options.components,vi),jn.prototype.__patch__=J?Ko:T,jn.prototype.$mount=function(e,t){return function(e,t,n){var r;return e.$el=t,e.$options.render||(e.$options.render=be),sn(e,"beforeMount"),r=function(){e._update(e._render(),n)},new bn(e,r,T,{before:function(){e._isMounted&&!e._isDestroyed&&sn(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,sn(e,"mounted")),e}(this,e=e&&J?nr(e):void 0,t)},J&&setTimeout((function(){B.devtools&&se&&se.emit("init",jn)}),0);var hi,mi=/\{\{((?:.|\r?\n)+?)\}\}/g,yi=/[-.*+?^${}()|[\]\/\\]/g,gi=A((function(e){var t=e[0].replace(yi,"\\$&"),n=e[1].replace(yi,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")})),bi={staticKeys:["staticClass"],transformNode:function(e,t){t.warn;var n=Br(e,"class");n&&(e.staticClass=JSON.stringify(n));var r=Ur(e,"class",!1);r&&(e.classBinding=r)},genData:function(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}},_i={staticKeys:["staticStyle"],transformNode:function(e,t){t.warn;var n=Br(e,"style");n&&(e.staticStyle=JSON.stringify(co(n)));var r=Ur(e,"style",!1);r&&(e.styleBinding=r)},genData:function(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}},wi=m("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),Ai=m("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),Oi=m("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),$i=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,ki=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,xi="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+H.source+"]*",Si="((?:"+xi+"\\:)?"+xi+")",Ci=new RegExp("^<"+Si),ji=/^\s*(\/?)>/,Ei=new RegExp("^<\\/"+Si+"[^>]*>"),Pi=/^<!DOCTYPE [^>]+>/i,Ti=/^<!\--/,Ii=/^<!\[/,Ni=m("script,style,textarea",!0),Di={},Mi={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},Ri=/&(?:lt|gt|quot|amp|#39);/g,Li=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,Fi=m("pre,textarea",!0),Ui=function(e,t){return e&&Fi(e)&&"\n"===t[0]};function Bi(e,t){var n=t?Li:Ri;return e.replace(n,(function(e){return Mi[e]}))}var Hi,zi,Vi,Wi,Ki,qi,Ji,Zi,Xi=/^@|^v-on:/,Gi=/^v-|^@|^:|^#/,Yi=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Qi=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,ea=/^\(|\)$/g,ta=/^\[.*\]$/,na=/:(.*)$/,ra=/^:|^\.|^v-bind:/,oa=/\.[^.\]]+(?=[^\]]*$)/g,ia=/^v-slot(:|$)|^#/,aa=/[\r\n]/,sa=/\s+/g,ca=A((function(e){return(hi=hi||document.createElement("div")).innerHTML=e,hi.textContent})),ua="_empty_";function la(e,t,n){return{type:1,tag:e,attrsList:t,attrsMap:ma(t),rawAttrsMap:{},parent:n,children:[]}}function fa(e,t){var n;!function(e){var t=Ur(e,"key");t&&(e.key=t)}(e),e.plain=!e.key&&!e.scopedSlots&&!e.attrsList.length,function(e){var t=Ur(e,"ref");t&&(e.ref=t,e.refInFor=function(e){for(var t=e;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}(e))}(e),function(e){var t;"template"===e.tag?(t=Br(e,"scope"),e.slotScope=t||Br(e,"slot-scope")):(t=Br(e,"slot-scope"))&&(e.slotScope=t);var n=Ur(e,"slot");if(n&&(e.slotTarget='""'===n?'"default"':n,e.slotTargetDynamic=!(!e.attrsMap[":slot"]&&!e.attrsMap["v-bind:slot"]),"template"===e.tag||e.slotScope||Dr(e,"slot",n,function(e,t){return e.rawAttrsMap[":slot"]||e.rawAttrsMap["v-bind:slot"]||e.rawAttrsMap.slot}(e))),"template"===e.tag){var r=Hr(e,ia);if(r){var o=va(r),i=o.name,a=o.dynamic;e.slotTarget=i,e.slotTargetDynamic=a,e.slotScope=r.value||ua}}else{var s=Hr(e,ia);if(s){var c=e.scopedSlots||(e.scopedSlots={}),u=va(s),l=u.name,f=u.dynamic,d=c[l]=la("template",[],e);d.slotTarget=l,d.slotTargetDynamic=f,d.children=e.children.filter((function(e){if(!e.slotScope)return e.parent=d,!0})),d.slotScope=s.value||ua,e.children=[],e.plain=!1}}}(e),"slot"===(n=e).tag&&(n.slotName=Ur(n,"name")),function(e){var t;(t=Ur(e,"is"))&&(e.component=t),null!=Br(e,"inline-template")&&(e.inlineTemplate=!0)}(e);for(var r=0;r<Vi.length;r++)e=Vi[r](e,t)||e;return function(e){var t,n,r,o,i,a,s,c,u=e.attrsList;for(t=0,n=u.length;t<n;t++)if(r=o=u[t].name,i=u[t].value,Gi.test(r))if(e.hasBindings=!0,(a=ha(r.replace(Gi,"")))&&(r=r.replace(oa,"")),ra.test(r))r=r.replace(ra,""),i=Er(i),(c=ta.test(r))&&(r=r.slice(1,-1)),a&&(a.prop&&!c&&"innerHtml"===(r=$(r))&&(r="innerHTML"),a.camel&&!c&&(r=$(r)),a.sync&&(s=Wr(i,"$event"),c?Fr(e,'"update:"+('+r+")",s,null,!1,0,u[t],!0):(Fr(e,"update:"+$(r),s,null,!1,0,u[t]),S(r)!==$(r)&&Fr(e,"update:"+S(r),s,null,!1,0,u[t])))),a&&a.prop||!e.component&&Ji(e.tag,e.attrsMap.type,r)?Nr(e,r,i,u[t],c):Dr(e,r,i,u[t],c);else if(Xi.test(r))r=r.replace(Xi,""),(c=ta.test(r))&&(r=r.slice(1,-1)),Fr(e,r,i,a,!1,0,u[t],c);else{var l=(r=r.replace(Gi,"")).match(na),f=l&&l[1];c=!1,f&&(r=r.slice(0,-(f.length+1)),ta.test(f)&&(f=f.slice(1,-1),c=!0)),Rr(e,r,o,i,f,c,a,u[t])}else Dr(e,r,JSON.stringify(i),u[t]),!e.component&&"muted"===r&&Ji(e.tag,e.attrsMap.type,r)&&Nr(e,r,"true",u[t])}(e),e}function da(e){var t;if(t=Br(e,"v-for")){var n=function(e){var t=e.match(Yi);if(t){var n={};n.for=t[2].trim();var r=t[1].trim().replace(ea,""),o=r.match(Qi);return o?(n.alias=r.replace(Qi,"").trim(),n.iterator1=o[1].trim(),o[2]&&(n.iterator2=o[2].trim())):n.alias=r,n}}(t);n&&E(e,n)}}function pa(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function va(e){var t=e.name.replace(ia,"");return t||"#"!==e.name[0]&&(t="default"),ta.test(t)?{name:t.slice(1,-1),dynamic:!0}:{name:'"'+t+'"',dynamic:!1}}function ha(e){var t=e.match(oa);if(t){var n={};return t.forEach((function(e){n[e.slice(1)]=!0})),n}}function ma(e){for(var t={},n=0,r=e.length;n<r;n++)t[e[n].name]=e[n].value;return t}var ya=/^xmlns:NS\d+/,ga=/^NS\d+:/;function ba(e){return la(e.tag,e.attrsList.slice(),e.parent)}var _a,wa,Aa,Oa=[bi,_i,{preTransformNode:function(e,t){if("input"===e.tag){var n,r=e.attrsMap;if(!r["v-model"])return;if((r[":type"]||r["v-bind:type"])&&(n=Ur(e,"type")),r.type||n||!r["v-bind"]||(n="("+r["v-bind"]+").type"),n){var o=Br(e,"v-if",!0),i=o?"&&("+o+")":"",a=null!=Br(e,"v-else",!0),s=Br(e,"v-else-if",!0),c=ba(e);da(c),Mr(c,"type","checkbox"),fa(c,t),c.processed=!0,c.if="("+n+")==='checkbox'"+i,pa(c,{exp:c.if,block:c});var u=ba(e);Br(u,"v-for",!0),Mr(u,"type","radio"),fa(u,t),pa(c,{exp:"("+n+")==='radio'"+i,block:u});var l=ba(e);return Br(l,"v-for",!0),Mr(l,":type",n),fa(l,t),pa(c,{exp:o,block:l}),a?c.else=!0:s&&(c.elseif=s),c}}}}],$a={expectHTML:!0,modules:Oa,directives:{model:function(e,t,n){var r=t.value,o=t.modifiers,i=e.tag,a=e.attrsMap.type;if(e.component)return Vr(e,r,o),!1;if("select"===i)!function(e,t,n){var r='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"});";Fr(e,"change",r=r+" "+Wr(t,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),null,!0)}(e,r,o);else if("input"===i&&"checkbox"===a)!function(e,t,n){var r=n&&n.number,o=Ur(e,"value")||"null",i=Ur(e,"true-value")||"true",a=Ur(e,"false-value")||"false";Nr(e,"checked","Array.isArray("+t+")?_i("+t+","+o+")>-1"+("true"===i?":("+t+")":":_q("+t+","+i+")")),Fr(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+i+"):("+a+");if(Array.isArray($$a)){var $$v="+(r?"_n("+o+")":o)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+Wr(t,"$$a.concat([$$v])")+")}else{$$i>-1&&("+Wr(t,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+Wr(t,"$$c")+"}",null,!0)}(e,r,o);else if("input"===i&&"radio"===a)!function(e,t,n){var r=n&&n.number,o=Ur(e,"value")||"null";Nr(e,"checked","_q("+t+","+(o=r?"_n("+o+")":o)+")"),Fr(e,"change",Wr(t,o),null,!0)}(e,r,o);else if("input"===i||"textarea"===i)!function(e,t,n){var r=e.attrsMap.type,o=n||{},i=o.lazy,a=o.number,s=o.trim,c=!i&&"range"!==r,u=i?"change":"range"===r?"__r":"input",l="$event.target.value";s&&(l="$event.target.value.trim()"),a&&(l="_n("+l+")");var f=Wr(t,l);c&&(f="if($event.target.composing)return;"+f),Nr(e,"value","("+t+")"),Fr(e,u,f,null,!0),(s||a)&&Fr(e,"blur","$forceUpdate()")}(e,r,o);else if(!B.isReservedTag(i))return Vr(e,r,o),!1;return!0},text:function(e,t){t.value&&Nr(e,"textContent","_s("+t.value+")",t)},html:function(e,t){t.value&&Nr(e,"innerHTML","_s("+t.value+")",t)}},isPreTag:function(e){return"pre"===e},isUnaryTag:wi,mustUseProp:Ln,canBeLeftOpenTag:Ai,isReservedTag:Yn,getTagNamespace:Qn,staticKeys:(Aa=Oa,Aa.reduce((function(e,t){return e.concat(t.staticKeys||[])}),[]).join(","))},ka=A((function(e){return m("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(e?","+e:""))}));function xa(e,t){e&&(_a=ka(t.staticKeys||""),wa=t.isReservedTag||I,Sa(e),Ca(e,!1))}function Sa(e){if(e.static=function(e){return 2!==e.type&&(3===e.type||!(!e.pre&&(e.hasBindings||e.if||e.for||y(e.tag)||!wa(e.tag)||function(e){for(;e.parent;){if("template"!==(e=e.parent).tag)return!1;if(e.for)return!0}return!1}(e)||!Object.keys(e).every(_a))))}(e),1===e.type){if(!wa(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var t=0,n=e.children.length;t<n;t++){var r=e.children[t];Sa(r),r.static||(e.static=!1)}if(e.ifConditions)for(var o=1,i=e.ifConditions.length;o<i;o++){var a=e.ifConditions[o].block;Sa(a),a.static||(e.static=!1)}}}function Ca(e,t){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=t),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var n=0,r=e.children.length;n<r;n++)Ca(e.children[n],t||!!e.for);if(e.ifConditions)for(var o=1,i=e.ifConditions.length;o<i;o++)Ca(e.ifConditions[o].block,t)}}var ja=/^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/,Ea=/\([^)]*?\);*$/,Pa=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,Ta={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},Ia={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},Na=function(e){return"if("+e+")return null;"},Da={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:Na("$event.target !== $event.currentTarget"),ctrl:Na("!$event.ctrlKey"),shift:Na("!$event.shiftKey"),alt:Na("!$event.altKey"),meta:Na("!$event.metaKey"),left:Na("'button' in $event && $event.button !== 0"),middle:Na("'button' in $event && $event.button !== 1"),right:Na("'button' in $event && $event.button !== 2")};function Ma(e,t){var n=t?"nativeOn:":"on:",r="",o="";for(var i in e){var a=Ra(e[i]);e[i]&&e[i].dynamic?o+=i+","+a+",":r+='"'+i+'":'+a+","}return r="{"+r.slice(0,-1)+"}",o?n+"_d("+r+",["+o.slice(0,-1)+"])":n+r}function Ra(e){if(!e)return"function(){}";if(Array.isArray(e))return"["+e.map((function(e){return Ra(e)})).join(",")+"]";var t=Pa.test(e.value),n=ja.test(e.value),r=Pa.test(e.value.replace(Ea,""));if(e.modifiers){var o="",i="",a=[];for(var s in e.modifiers)if(Da[s])i+=Da[s],Ta[s]&&a.push(s);else if("exact"===s){var c=e.modifiers;i+=Na(["ctrl","shift","alt","meta"].filter((function(e){return!c[e]})).map((function(e){return"$event."+e+"Key"})).join("||"))}else a.push(s);return a.length&&(o+=function(e){return"if(!$event.type.indexOf('key')&&"+e.map(La).join("&&")+")return null;"}(a)),i&&(o+=i),"function($event){"+o+(t?"return "+e.value+"($event)":n?"return ("+e.value+")($event)":r?"return "+e.value:e.value)+"}"}return t||n?e.value:"function($event){"+(r?"return "+e.value:e.value)+"}"}function La(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var n=Ta[e],r=Ia[e];return"_k($event.keyCode,"+JSON.stringify(e)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(r)+")"}var Fa={on:function(e,t){e.wrapListeners=function(e){return"_g("+e+","+t.value+")"}},bind:function(e,t){e.wrapData=function(n){return"_b("+n+",'"+e.tag+"',"+t.value+","+(t.modifiers&&t.modifiers.prop?"true":"false")+(t.modifiers&&t.modifiers.sync?",true":"")+")"}},cloak:T},Ua=function(e){this.options=e,this.warn=e.warn||Tr,this.transforms=Ir(e.modules,"transformCode"),this.dataGenFns=Ir(e.modules,"genData"),this.directives=E(E({},Fa),e.directives);var t=e.isReservedTag||I;this.maybeComponent=function(e){return!!e.component||!t(e.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function Ba(e,t){var n=new Ua(t);return{render:"with(this){return "+(e?Ha(e,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function Ha(e,t){if(e.parent&&(e.pre=e.pre||e.parent.pre),e.staticRoot&&!e.staticProcessed)return za(e,t);if(e.once&&!e.onceProcessed)return Va(e,t);if(e.for&&!e.forProcessed)return qa(e,t);if(e.if&&!e.ifProcessed)return Wa(e,t);if("template"!==e.tag||e.slotTarget||t.pre){if("slot"===e.tag)return function(e,t){var n=e.slotName||'"default"',r=Ga(e,t),o="_t("+n+(r?","+r:""),i=e.attrs||e.dynamicAttrs?es((e.attrs||[]).concat(e.dynamicAttrs||[]).map((function(e){return{name:$(e.name),value:e.value,dynamic:e.dynamic}}))):null,a=e.attrsMap["v-bind"];return!i&&!a||r||(o+=",null"),i&&(o+=","+i),a&&(o+=(i?"":",null")+","+a),o+")"}(e,t);var n;if(e.component)n=function(e,t,n){var r=t.inlineTemplate?null:Ga(t,n,!0);return"_c("+e+","+Ja(t,n)+(r?","+r:"")+")"}(e.component,e,t);else{var r;(!e.plain||e.pre&&t.maybeComponent(e))&&(r=Ja(e,t));var o=e.inlineTemplate?null:Ga(e,t,!0);n="_c('"+e.tag+"'"+(r?","+r:"")+(o?","+o:"")+")"}for(var i=0;i<t.transforms.length;i++)n=t.transforms[i](e,n);return n}return Ga(e,t)||"void 0"}function za(e,t){e.staticProcessed=!0;var n=t.pre;return e.pre&&(t.pre=e.pre),t.staticRenderFns.push("with(this){return "+Ha(e,t)+"}"),t.pre=n,"_m("+(t.staticRenderFns.length-1)+(e.staticInFor?",true":"")+")"}function Va(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return Wa(e,t);if(e.staticInFor){for(var n="",r=e.parent;r;){if(r.for){n=r.key;break}r=r.parent}return n?"_o("+Ha(e,t)+","+t.onceId+++","+n+")":Ha(e,t)}return za(e,t)}function Wa(e,t,n,r){return e.ifProcessed=!0,Ka(e.ifConditions.slice(),t,n,r)}function Ka(e,t,n,r){if(!e.length)return r||"_e()";var o=e.shift();return o.exp?"("+o.exp+")?"+i(o.block)+":"+Ka(e,t,n,r):""+i(o.block);function i(e){return n?n(e,t):e.once?Va(e,t):Ha(e,t)}}function qa(e,t,n,r){var o=e.for,i=e.alias,a=e.iterator1?","+e.iterator1:"",s=e.iterator2?","+e.iterator2:"";return e.forProcessed=!0,(r||"_l")+"(("+o+"),function("+i+a+s+"){return "+(n||Ha)(e,t)+"})"}function Ja(e,t){var n="{",r=function(e,t){var n=e.directives;if(n){var r,o,i,a,s="directives:[",c=!1;for(r=0,o=n.length;r<o;r++){i=n[r],a=!0;var u=t.directives[i.name];u&&(a=!!u(e,i,t.warn)),a&&(c=!0,s+='{name:"'+i.name+'",rawName:"'+i.rawName+'"'+(i.value?",value:("+i.value+"),expression:"+JSON.stringify(i.value):"")+(i.arg?",arg:"+(i.isDynamicArg?i.arg:'"'+i.arg+'"'):"")+(i.modifiers?",modifiers:"+JSON.stringify(i.modifiers):"")+"},")}return c?s.slice(0,-1)+"]":void 0}}(e,t);r&&(n+=r+","),e.key&&(n+="key:"+e.key+","),e.ref&&(n+="ref:"+e.ref+","),e.refInFor&&(n+="refInFor:true,"),e.pre&&(n+="pre:true,"),e.component&&(n+='tag:"'+e.tag+'",');for(var o=0;o<t.dataGenFns.length;o++)n+=t.dataGenFns[o](e);if(e.attrs&&(n+="attrs:"+es(e.attrs)+","),e.props&&(n+="domProps:"+es(e.props)+","),e.events&&(n+=Ma(e.events,!1)+","),e.nativeEvents&&(n+=Ma(e.nativeEvents,!0)+","),e.slotTarget&&!e.slotScope&&(n+="slot:"+e.slotTarget+","),e.scopedSlots&&(n+=function(e,t,n){var r=e.for||Object.keys(t).some((function(e){var n=t[e];return n.slotTargetDynamic||n.if||n.for||Za(n)})),o=!!e.if;if(!r)for(var i=e.parent;i;){if(i.slotScope&&i.slotScope!==ua||i.for){r=!0;break}i.if&&(o=!0),i=i.parent}var a=Object.keys(t).map((function(e){return Xa(t[e],n)})).join(",");return"scopedSlots:_u(["+a+"]"+(r?",null,true":"")+(!r&&o?",null,false,"+function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}(a):"")+")"}(e,e.scopedSlots,t)+","),e.model&&(n+="model:{value:"+e.model.value+",callback:"+e.model.callback+",expression:"+e.model.expression+"},"),e.inlineTemplate){var i=function(e,t){var n=e.children[0];if(n&&1===n.type){var r=Ba(n,t.options);return"inlineTemplate:{render:function(){"+r.render+"},staticRenderFns:["+r.staticRenderFns.map((function(e){return"function(){"+e+"}"})).join(",")+"]}"}}(e,t);i&&(n+=i+",")}return n=n.replace(/,$/,"")+"}",e.dynamicAttrs&&(n="_b("+n+',"'+e.tag+'",'+es(e.dynamicAttrs)+")"),e.wrapData&&(n=e.wrapData(n)),e.wrapListeners&&(n=e.wrapListeners(n)),n}function Za(e){return 1===e.type&&("slot"===e.tag||e.children.some(Za))}function Xa(e,t){var n=e.attrsMap["slot-scope"];if(e.if&&!e.ifProcessed&&!n)return Wa(e,t,Xa,"null");if(e.for&&!e.forProcessed)return qa(e,t,Xa);var r=e.slotScope===ua?"":String(e.slotScope),o="function("+r+"){return "+("template"===e.tag?e.if&&n?"("+e.if+")?"+(Ga(e,t)||"undefined")+":undefined":Ga(e,t)||"undefined":Ha(e,t))+"}",i=r?"":",proxy:true";return"{key:"+(e.slotTarget||'"default"')+",fn:"+o+i+"}"}function Ga(e,t,n,r,o){var i=e.children;if(i.length){var a=i[0];if(1===i.length&&a.for&&"template"!==a.tag&&"slot"!==a.tag){var s=n?t.maybeComponent(a)?",1":",0":"";return""+(r||Ha)(a,t)+s}var c=n?function(e,t){for(var n=0,r=0;r<e.length;r++){var o=e[r];if(1===o.type){if(Ya(o)||o.ifConditions&&o.ifConditions.some((function(e){return Ya(e.block)}))){n=2;break}(t(o)||o.ifConditions&&o.ifConditions.some((function(e){return t(e.block)})))&&(n=1)}}return n}(i,t.maybeComponent):0,u=o||Qa;return"["+i.map((function(e){return u(e,t)})).join(",")+"]"+(c?","+c:"")}}function Ya(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function Qa(e,t){return 1===e.type?Ha(e,t):3===e.type&&e.isComment?function(e){return"_e("+JSON.stringify(e.text)+")"}(e):"_v("+(2===(n=e).type?n.expression:ts(JSON.stringify(n.text)))+")";var n}function es(e){for(var t="",n="",r=0;r<e.length;r++){var o=e[r],i=ts(o.value);o.dynamic?n+=o.name+","+i+",":t+='"'+o.name+'":'+i+","}return t="{"+t.slice(0,-1)+"}",n?"_d("+t+",["+n.slice(0,-1)+"])":t}function ts(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}function ns(e,t){try{return new Function(e)}catch(n){return t.push({err:n,code:e}),T}}function rs(e){var t=Object.create(null);return function(n,r,o){(r=E({},r)).warn,delete r.warn;var i=r.delimiters?String(r.delimiters)+n:n;if(t[i])return t[i];var a=e(n,r),s={},c=[];return s.render=ns(a.render,c),s.staticRenderFns=a.staticRenderFns.map((function(e){return ns(e,c)})),t[i]=s}}new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)");var os,is,as=(os=function(e,t){var n=function(e,t){Hi=t.warn||Tr,qi=t.isPreTag||I,Ji=t.mustUseProp||I,Zi=t.getTagNamespace||I,t.isReservedTag,Vi=Ir(t.modules,"transformNode"),Wi=Ir(t.modules,"preTransformNode"),Ki=Ir(t.modules,"postTransformNode"),zi=t.delimiters;var n,r,o=[],i=!1!==t.preserveWhitespace,a=t.whitespace,s=!1,c=!1;function u(e){if(l(e),s||e.processed||(e=fa(e,t)),o.length||e===n||n.if&&(e.elseif||e.else)&&pa(n,{exp:e.elseif,block:e}),r&&!e.forbidden)if(e.elseif||e.else)a=e,(u=function(e){for(var t=e.length;t--;){if(1===e[t].type)return e[t];e.pop()}}(r.children))&&u.if&&pa(u,{exp:a.elseif,block:a});else{if(e.slotScope){var i=e.slotTarget||'"default"';(r.scopedSlots||(r.scopedSlots={}))[i]=e}r.children.push(e),e.parent=r}var a,u;e.children=e.children.filter((function(e){return!e.slotScope})),l(e),e.pre&&(s=!1),qi(e.tag)&&(c=!1);for(var f=0;f<Ki.length;f++)Ki[f](e,t)}function l(e){if(!c)for(var t;(t=e.children[e.children.length-1])&&3===t.type&&" "===t.text;)e.children.pop()}return function(e,t){for(var n,r,o=[],i=t.expectHTML,a=t.isUnaryTag||I,s=t.canBeLeftOpenTag||I,c=0;e;){if(n=e,r&&Ni(r)){var u=0,l=r.toLowerCase(),f=Di[l]||(Di[l]=new RegExp("([\\s\\S]*?)(</"+l+"[^>]*>)","i")),d=e.replace(f,(function(e,n,r){return u=r.length,Ni(l)||"noscript"===l||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),Ui(l,n)&&(n=n.slice(1)),t.chars&&t.chars(n),""}));c+=e.length-d.length,e=d,x(l,c-u,c)}else{var p=e.indexOf("<");if(0===p){if(Ti.test(e)){var v=e.indexOf("--\x3e");if(v>=0){t.shouldKeepComment&&t.comment(e.substring(4,v),c,c+v+3),O(v+3);continue}}if(Ii.test(e)){var h=e.indexOf("]>");if(h>=0){O(h+2);continue}}var m=e.match(Pi);if(m){O(m[0].length);continue}var y=e.match(Ei);if(y){var g=c;O(y[0].length),x(y[1],g,c);continue}var b=$();if(b){k(b),Ui(b.tagName,e)&&O(1);continue}}var _=void 0,w=void 0,A=void 0;if(p>=0){for(w=e.slice(p);!(Ei.test(w)||Ci.test(w)||Ti.test(w)||Ii.test(w)||(A=w.indexOf("<",1))<0);)p+=A,w=e.slice(p);_=e.substring(0,p)}p<0&&(_=e),_&&O(_.length),t.chars&&_&&t.chars(_,c-_.length,c)}if(e===n){t.chars&&t.chars(e);break}}function O(t){c+=t,e=e.substring(t)}function $(){var t=e.match(Ci);if(t){var n,r,o={tagName:t[1],attrs:[],start:c};for(O(t[0].length);!(n=e.match(ji))&&(r=e.match(ki)||e.match($i));)r.start=c,O(r[0].length),r.end=c,o.attrs.push(r);if(n)return o.unarySlash=n[1],O(n[0].length),o.end=c,o}}function k(e){var n=e.tagName,c=e.unarySlash;i&&("p"===r&&Oi(n)&&x(r),s(n)&&r===n&&x(n));for(var u=a(n)||!!c,l=e.attrs.length,f=new Array(l),d=0;d<l;d++){var p=e.attrs[d],v=p[3]||p[4]||p[5]||"",h="a"===n&&"href"===p[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;f[d]={name:p[1],value:Bi(v,h)}}u||(o.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:f,start:e.start,end:e.end}),r=n),t.start&&t.start(n,f,u,e.start,e.end)}function x(e,n,i){var a,s;if(null==n&&(n=c),null==i&&(i=c),e)for(s=e.toLowerCase(),a=o.length-1;a>=0&&o[a].lowerCasedTag!==s;a--);else a=0;if(a>=0){for(var u=o.length-1;u>=a;u--)t.end&&t.end(o[u].tag,n,i);o.length=a,r=a&&o[a-1].tag}else"br"===s?t.start&&t.start(e,[],!0,n,i):"p"===s&&(t.start&&t.start(e,[],!1,n,i),t.end&&t.end(e,n,i))}x()}(e,{warn:Hi,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,outputSourceRange:t.outputSourceRange,start:function(e,i,a,l,f){var d=r&&r.ns||Zi(e);Y&&"svg"===d&&(i=function(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];ya.test(r.name)||(r.name=r.name.replace(ga,""),t.push(r))}return t}(i));var p,v=la(e,i,r);d&&(v.ns=d),"style"!==(p=v).tag&&("script"!==p.tag||p.attrsMap.type&&"text/javascript"!==p.attrsMap.type)||ae()||(v.forbidden=!0);for(var h=0;h<Wi.length;h++)v=Wi[h](v,t)||v;s||(function(e){null!=Br(e,"v-pre")&&(e.pre=!0)}(v),v.pre&&(s=!0)),qi(v.tag)&&(c=!0),s?function(e){var t=e.attrsList,n=t.length;if(n)for(var r=e.attrs=new Array(n),o=0;o<n;o++)r[o]={name:t[o].name,value:JSON.stringify(t[o].value)},null!=t[o].start&&(r[o].start=t[o].start,r[o].end=t[o].end);else e.pre||(e.plain=!0)}(v):v.processed||(da(v),function(e){var t=Br(e,"v-if");if(t)e.if=t,pa(e,{exp:t,block:e});else{null!=Br(e,"v-else")&&(e.else=!0);var n=Br(e,"v-else-if");n&&(e.elseif=n)}}(v),function(e){null!=Br(e,"v-once")&&(e.once=!0)}(v)),n||(n=v),a?u(v):(r=v,o.push(v))},end:function(e,t,n){var i=o[o.length-1];o.length-=1,r=o[o.length-1],u(i)},chars:function(e,t,n){if(r&&(!Y||"textarea"!==r.tag||r.attrsMap.placeholder!==e)){var o,u,l,f=r.children;(e=c||e.trim()?"script"===(o=r).tag||"style"===o.tag?e:ca(e):f.length?a?"condense"===a&&aa.test(e)?"":" ":i?" ":"":"")&&(c||"condense"!==a||(e=e.replace(sa," ")),!s&&" "!==e&&(u=function(e,t){var n=t?gi(t):mi;if(n.test(e)){for(var r,o,i,a=[],s=[],c=n.lastIndex=0;r=n.exec(e);){(o=r.index)>c&&(s.push(i=e.slice(c,o)),a.push(JSON.stringify(i)));var u=Er(r[1].trim());a.push("_s("+u+")"),s.push({"@binding":u}),c=o+r[0].length}return c<e.length&&(s.push(i=e.slice(c)),a.push(JSON.stringify(i))),{expression:a.join("+"),tokens:s}}}(e,zi))?l={type:2,expression:u.expression,tokens:u.tokens,text:e}:" "===e&&f.length&&" "===f[f.length-1].text||(l={type:3,text:e}),l&&f.push(l))}},comment:function(e,t,n){if(r){var o={type:3,text:e,isComment:!0};r.children.push(o)}}}),n}(e.trim(),t);!1!==t.optimize&&xa(n,t);var r=Ba(n,t);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}},function(e){function t(t,n){var r=Object.create(e),o=[],i=[];if(n)for(var a in n.modules&&(r.modules=(e.modules||[]).concat(n.modules)),n.directives&&(r.directives=E(Object.create(e.directives||null),n.directives)),n)"modules"!==a&&"directives"!==a&&(r[a]=n[a]);r.warn=function(e,t,n){(n?i:o).push(e)};var s=os(t.trim(),r);return s.errors=o,s.tips=i,s}return{compile:t,compileToFunctions:rs(t)}})($a),ss=(as.compile,as.compileToFunctions);function cs(e){return(is=is||document.createElement("div")).innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',is.innerHTML.indexOf("&#10;")>0}var us=!!J&&cs(!1),ls=!!J&&cs(!0),fs=A((function(e){var t=nr(e);return t&&t.innerHTML})),ds=jn.prototype.$mount;jn.prototype.$mount=function(e,t){if((e=e&&nr(e))===document.body||e===document.documentElement)return this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&(r=fs(r));else{if(!r.nodeType)return this;r=r.innerHTML}else e&&(r=function(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}(e));if(r){var o=ss(r,{outputSourceRange:!1,shouldDecodeNewlines:us,shouldDecodeNewlinesForHref:ls,delimiters:n.delimiters,comments:n.comments},this),i=o.render,a=o.staticRenderFns;n.render=i,n.staticRenderFns=a}}return ds.call(this,e,t)},jn.compile=ss;const ps=jn;var vs=n(77),hs=n(845);const ms=ps.extend({props:["workers"],render(e){const t=this.$props.workers.map((t=>e("div",[e("li",[e("img",{attrs:{href:"${worker.photo}",alt:"",width:"30px",height:"30px"}}),e("span",t.name),e("button",{on:{click:()=>{this.removeWorker(t)}}},"hapus")])])));return e("ol",t)},methods:{removeWorker(e){hs.store$.dispatch((0,vs.Od)(e.id))}}}),ys=ps.extend({render(e){return e("div",[e("form",{on:{submit:this.addNewWorker}},[e("label",{domProps:{for:"name"}},"Nama:"),e("input",{domProps:{type:"text",name:"name",placeholder:"misal budiman"},on:{input:e=>{this.name=e.target.value}}}),e("br"),e("label",{domProps:{for:"age"}},"Umur:"),e("input",{domProps:{type:"number",name:"age",placeholder:"misal 23"},on:{input:e=>{this.age=e.target.value}}}),e("br"),e("label",{domProps:{for:"photo"}},"Foto:"),e("input",{domProps:{type:"file",name:"photo",id:"photo"},on:{change:e=>{this.photo=e.target.files[0]}}}),e("br"),e("label",{domProps:{for:"bio"}},"Biodata singkat:"),e("br"),e("textarea",{domProps:{name:"bio",id:"bio",cols:"30",rows:"3",placeholder:"biodata singkat pekerja"},on:{input:e=>{this.bio=e.target.value}}}),e("br"),e("label",{domProps:{for:"address"}},"Alamat:"),e("br"),e("textarea",{domProps:{name:"address",id:"address",cols:"30",rows:"3",placeholder:"alamat pekerja"},on:{input:e=>{this.address=e.target.value}}}),e("br"),e("br"),e("button",{domProps:{type:"submit"}},"kirim")])])},data:{loading:!1,error:null,name:"",age:"",photo:null,bio:"",address:"",workers:[]},methods:{addNewWorker(e){e.preventDefault(),hs.store$.dispatch((0,hs.clearErrorAction)()),this.name&&this.age&&this.photo&&this.bio&&this.address?(hs.store$.dispatch((0,vs.z2)({name:this.name,photo:this.photo,age:this.age,bio:this.bio,address:this.address})),this.name="",this.age="",this.photo=null,this.bio="",this.address="",e.target.reset()):hs.store$.dispatch((0,hs.errorAction)("form isian tidak lengkap!"))}},mounted(){const e=hs.store$.getState();this.loading=e.loading,this.error=e.error,this.workers=e.workers,hs.store$.subscribe((()=>{const e=hs.store$.getState();this.loading=e.loading,this.error=e.error,this.workers=e.workers})),hs.store$.dispatch(vs.gp)}});new ps({el:"#worker",components:{"worker-list":ms,"worker-add":ys},render(e){return e("div",[e("p",{class:{error:!0}},this.error),this.loading?e("p",{class:{primary:!0}},"memuat..."):null,e("h4","Daftarkan pekerja baru"),e("worker-add"),e("hr"),e("h4","Daftar Pekerja"),e("worker-list",{props:{workers:this.workers}})])},data:{loading:!1,error:null,workers:[]},mounted(){const e=hs.store$.getState();this.loading=e.loading,this.error=e.error,this.workers=e.workers,hs.store$.subscribe((()=>{const e=hs.store$.getState();this.loading=e.loading,this.error=e.error,this.workers=e.workers})),hs.store$.dispatch(vs.gp)}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvaW1tZXIvZGlzdC9pbW1lci5lc20uanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9yZXNlbGVjdC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHJlZHV4anMvdG9vbGtpdC9kaXN0L3JlZHV4LXRvb2xraXQuZXNtLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL3dlYmFwcC9zcmMvd29ya2VyL21haW4uY3NzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2VzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL3dlYmFwcC9zcmMvbGliL2h0dHAtY2xpZW50LmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL3dlYmFwcC9zcmMvd29ya2VyL2FzeW5jLWFjdGlvbi5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL3dvcmtlci9jb25maWcuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vd2ViYXBwL3NyYy93b3JrZXIvcmVkdWNlci5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL3dvcmtlci9zdG9yZS5qcyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL3dvcmtlci93b3JrZXIuY2xpZW50LmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvd2VicGFjay9ydW50aW1lL2hhcm1vbnkgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly90YXNrLW1hbmFnZXIvLi93ZWJhcHAvc3JjL3dvcmtlci9tYWluLmNzcz81N2E2Iiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL25vZGVfbW9kdWxlcy92dWUvZGlzdC92dWUuZXNtLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL3dlYmFwcC9zcmMvd29ya2VyL2NvbXBvbmVudHMvd29ya2VyLWxpc3QuanMiLCJ3ZWJwYWNrOi8vdGFzay1tYW5hZ2VyLy4vd2ViYXBwL3NyYy93b3JrZXIvY29tcG9uZW50cy93b3JrZXItYWRkLmpzIiwid2VicGFjazovL3Rhc2stbWFuYWdlci8uL3dlYmFwcC9zcmMvd29ya2VyL3Zkb20uanMiXSwibmFtZXMiOlsidCIsIm4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyIiwiQXJyYXkiLCJlIiwiRXJyb3IiLCJtYXAiLCJqb2luIiwiUSIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiaXNBcnJheSIsIkwiLCJjb25zdHJ1Y3RvciIsInMiLCJ2IiwiaSIsIm8iLCJrZXlzIiwiWiIsImZvckVhY2giLCJ1IiwiaGFzIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZiIsInNldCIsImRlbGV0ZSIsImFkZCIsImMiLCJYIiwiTWFwIiwicSIsIlNldCIsInAiLCJsIiwic2xpY2UiLCJ0dCIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZ2V0IiwiZW51bWVyYWJsZSIsInZhbHVlIiwiY3JlYXRlIiwiZCIsInkiLCJjbGVhciIsImgiLCJmcmVlemUiLCJpc0Zyb3plbiIsImIiLCJudCIsIl8iLCJVIiwiaiIsImciLCJ3IiwiUyIsIk8iLCJtIiwiUCIsIk0iLCJ4IiwiSCIsIkEiLCJJIiwiayIsIlIiLCJhIiwiRCIsImNvbmNhdCIsIk4iLCJ6IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiRSIsIlQiLCJGIiwiQyIsInJ0IiwiZXQiLCJQcm94eSIsInJldm9jYWJsZSIsInJldm9rZSIsInByb3h5IiwiSiIsInB1c2giLCJLIiwiZnJvbSIsIkciLCJXIiwiU3ltYm9sIiwiQiIsIlJlZmxlY3QiLCJmb3IiLCJpdGVyYXRvciIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlbGV0ZVByb3BlcnR5IiwiZGVmaW5lUHJvcGVydHkiLCJzZXRQcm90b3R5cGVPZiIsImFwcGx5IiwidGhpcyIsIm90IiwidXNlUHJveGllcyIsInNldFVzZVByb3hpZXMiLCJhdXRvRnJlZXplIiwic2V0QXV0b0ZyZWV6ZSIsInByb2R1Y2UiLCJiaW5kIiwicHJvZHVjZVdpdGhQYXRjaGVzIiwiUHJvbWlzZSIsInRoZW4iLCJjcmVhdGVEcmFmdCIsImZpbmlzaERyYWZ0IiwiYXBwbHlQYXRjaGVzIiwicGF0aCIsIm9wIiwiJCIsInV0IiwicmFuZG9tU3RyaW5nIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwic3BsaXQiLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJSRVBMQUNFIiwiUFJPQkVfVU5LTk9XTl9BQ1RJT04iLCJpc1BsYWluT2JqZWN0Iiwib2JqIiwicHJvdG8iLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiX3JlZjIiLCJ1bmRlZmluZWQiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJnZXRTdGF0ZSIsInN1YnNjcmliZSIsImxpc3RlbmVyIiwiaXNTdWJzY3JpYmVkIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJ0eXBlIiwibGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm9ic2VydmFibGUiLCJfcmVmIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIlR5cGVFcnJvciIsIm9ic2VydmVTdGF0ZSIsIm5leHQiLCJ1bnN1YnNjcmliZSIsImdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwia2V5IiwiYWN0aW9uVHlwZSIsIlN0cmluZyIsImNvbWJpbmVSZWR1Y2VycyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJzdGF0ZSIsImhhc0NoYW5nZWQiLCJuZXh0U3RhdGUiLCJfaSIsIl9rZXkiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiZXJyb3JNZXNzYWdlIiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiYmluZEFjdGlvbkNyZWF0b3JzIiwiYWN0aW9uQ3JlYXRvcnMiLCJib3VuZEFjdGlvbkNyZWF0b3JzIiwiX2RlZmluZVByb3BlcnR5Iiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJmaWx0ZXIiLCJzeW0iLCJfb2JqZWN0U3ByZWFkMiIsInRhcmdldCIsInNvdXJjZSIsImRlZmluZVByb3BlcnRpZXMiLCJjb21wb3NlIiwiX2xlbiIsImZ1bmNzIiwiYXJnIiwicmVkdWNlIiwiYXBwbHlNaWRkbGV3YXJlIiwibWlkZGxld2FyZXMiLCJzdG9yZSIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJjaGFpbiIsIm1pZGRsZXdhcmUiLCJkZWZhdWx0RXF1YWxpdHlDaGVjayIsImFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsIiwiZXF1YWxpdHlDaGVjayIsInByZXYiLCJnZXREZXBlbmRlbmNpZXMiLCJkZXBlbmRlbmNpZXMiLCJldmVyeSIsImRlcCIsImRlcGVuZGVuY3lUeXBlcyIsImNyZWF0ZVNlbGVjdG9yIiwibWVtb2l6ZSIsIm1lbW9pemVPcHRpb25zIiwiX2xlbjIiLCJfa2V5MiIsInJlY29tcHV0YXRpb25zIiwicmVzdWx0RnVuYyIsInBvcCIsIm1lbW9pemVkUmVzdWx0RnVuYyIsInNlbGVjdG9yIiwicGFyYW1zIiwicmVzZXRSZWNvbXB1dGF0aW9ucyIsImNyZWF0ZVNlbGVjdG9yQ3JlYXRvciIsImZ1bmMiLCJsYXN0QXJncyIsImxhc3RSZXN1bHQiLCJjcmVhdGVEcmFmdFNhZmVTZWxlY3RvciIsIndyYXBwZWRTZWxlY3RvciIsInJlc3QiLCJfZXh0ZW5kcyIsImFzc2lnbiIsIl9nZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9zZXRQcm90b3R5cGVPZiIsImlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsImNvbnN0cnVjdCIsInNoYW0iLCJEYXRlIiwiX2NvbnN0cnVjdCIsIlBhcmVudCIsImFyZ3MiLCJDbGFzcyIsImluc3RhbmNlIiwiRnVuY3Rpb24iLCJfd3JhcE5hdGl2ZVN1cGVyIiwiX2NhY2hlIiwiZm4iLCJXcmFwcGVyIiwiY29tcG9zZVdpdGhEZXZUb29scyIsIndpbmRvdyIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyIsIk1pZGRsZXdhcmVBcnJheSIsIl9BcnJheSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9wcm90byIsIl9BcnJheSRwcm90b3R5cGUkY29uYyIsImFyciIsInByZXBlbmQiLCJpc0ltbXV0YWJsZURlZmF1bHQiLCJjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUiLCJvcHRpb25zIiwiaXNQbGFpbiIsInZhbCIsImZpbmROb25TZXJpYWxpemFibGVWYWx1ZSIsImlzU2VyaWFsaXphYmxlIiwiZ2V0RW50cmllcyIsImlnbm9yZWRQYXRocyIsImZvdW5kTmVzdGVkU2VyaWFsaXphYmxlIiwia2V5UGF0aCIsImVudHJpZXMiLCJoYXNJZ25vcmVkUGF0aHMiLCJfaXRlcmF0b3IiLCJfaXNBcnJheSIsImRvbmUiLCJwcm9wZXJ0eSIsIm5lc3RlZFZhbHVlIiwibmVzdGVkUGF0aCIsImNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSIsImdldERlZmF1bHRNaWRkbGV3YXJlIiwiX29wdGlvbnMiLCJfb3B0aW9ucyR0aHVuayIsInRodW5rIiwibWlkZGxld2FyZUFycmF5IiwiaW1tdXRhYmxlQ2hlY2siLCJzZXJpYWxpemFibGVDaGVjayIsImlzQm9vbGVhbiIsImV4dHJhQXJndW1lbnQiLCJjb25maWd1cmVTdG9yZSIsInJvb3RSZWR1Y2VyIiwiY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlIiwiX3JlZiRyZWR1Y2VyIiwiX3JlZiRtaWRkbGV3YXJlIiwiX3JlZiRkZXZUb29scyIsImRldlRvb2xzIiwiX3JlZiRwcmVsb2FkZWRTdGF0ZSIsIl9yZWYkZW5oYW5jZXJzIiwiZW5oYW5jZXJzIiwibWlkZGxld2FyZUVuaGFuY2VyIiwiZmluYWxDb21wb3NlIiwidHJhY2UiLCJzdG9yZUVuaGFuY2VycyIsImNyZWF0ZUFjdGlvbiIsInByZXBhcmVBY3Rpb24iLCJwcmVwYXJlZCIsInBheWxvYWQiLCJtZXRhIiwiZXJyb3IiLCJtYXRjaCIsImlzVmFsaWRLZXkiLCJnZXRUeXBlIiwiZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2siLCJidWlsZGVyQ2FsbGJhY2siLCJkZWZhdWx0Q2FzZVJlZHVjZXIiLCJhY3Rpb25zTWFwIiwiYWN0aW9uTWF0Y2hlcnMiLCJidWlsZGVyIiwiYWRkQ2FzZSIsInR5cGVPckFjdGlvbkNyZWF0b3IiLCJhZGRNYXRjaGVyIiwibWF0Y2hlciIsImFkZERlZmF1bHRDYXNlIiwiY3JlYXRlUmVkdWNlciIsImluaXRpYWxTdGF0ZSIsIm1hcE9yQnVpbGRlckNhbGxiYWNrIiwiZmluYWxBY3Rpb25NYXRjaGVycyIsImZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyIiwiY2FzZVJlZHVjZXJzIiwiX3JlZjMiLCJjciIsInByZXZpb3VzU3RhdGUiLCJjYXNlUmVkdWNlciIsInJlc3VsdCIsImRyYWZ0IiwiX3Jlc3VsdCIsImNyZWF0ZVNsaWNlIiwibmFtZSIsImV4dHJhUmVkdWNlcnMiLCJfcmVmJCIsIl9yZWYkMiIsIl9yZWYkMyIsInJlZHVjZXJOYW1lcyIsInNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lIiwic2xpY2VDYXNlUmVkdWNlcnNCeVR5cGUiLCJyZWR1Y2VyTmFtZSIsInByZXBhcmVDYWxsYmFjayIsIm1heWJlUmVkdWNlcldpdGhQcmVwYXJlIiwicHJlcGFyZSIsImFjdGlvbnMiLCJjcmVhdGVTdGF0ZU9wZXJhdG9yIiwibXV0YXRvciIsInJ1bk11dGF0b3IiLCJpc1BheWxvYWRBY3Rpb25Bcmd1bWVudCIsInNlbGVjdElkVmFsdWUiLCJlbnRpdHkiLCJzZWxlY3RJZCIsImNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyIiwiYWRkT25lTXV0YWJseSIsImVudGl0aWVzIiwiaWRzIiwiYWRkTWFueU11dGFibHkiLCJ2YWx1ZXMiLCJyZW1vdmVNYW55TXV0YWJseSIsImRpZE11dGF0ZSIsImlkIiwidXBkYXRlTWFueU11dGFibHkiLCJ1cGRhdGVzIiwibmV3S2V5cyIsInVwZGF0ZXNQZXJFbnRpdHkiLCJ1cGRhdGUiLCJjaGFuZ2VzIiwib3JpZ2luYWwiLCJ1cGRhdGVkIiwibmV3S2V5IiwiaGFzTmV3S2V5IiwidGFrZU5ld0tleSIsInVwc2VydE1hbnlNdXRhYmx5IiwiYWRkZWQiLCJfaXRlcmF0b3IyIiwiX2lzQXJyYXkyIiwiX2kyIiwicmVtb3ZlQWxsIiwib3BlcmF0b3IiLCJhZGRPbmUiLCJhZGRNYW55Iiwic2V0QWxsIiwidXBkYXRlT25lIiwidXBkYXRlTWFueSIsInVwc2VydE9uZSIsInVwc2VydE1hbnkiLCJyZW1vdmVPbmUiLCJyZW1vdmVNYW55IiwiY3JlYXRlRW50aXR5QWRhcHRlciIsIl9zb3J0Q29tcGFyZXIkc2VsZWN0SSIsInNvcnRDb21wYXJlciIsImdldEluaXRpYWxTdGF0ZSIsImFkZGl0aW9uYWxTdGF0ZSIsImdldFNlbGVjdG9ycyIsInNlbGVjdFN0YXRlIiwic2VsZWN0SWRzIiwic2VsZWN0RW50aXRpZXMiLCJzZWxlY3RBbGwiLCJzZWxlY3RCeUlkIiwic2VsZWN0VG90YWwiLCJzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMiLCJzb3J0IiwiX2NyZWF0ZVVuc29ydGVkU3RhdGVBIiwibmV3TW9kZWxzIiwibW9kZWxzIiwibW9kZWwiLCJtZXJnZSIsInRha2VVcGRhdGVkTW9kZWwiLCJhbGxFbnRpdGllcyIsIm5ld1NvcnRlZElkcyIsImFyZUFycmF5c0VxdWFsIiwiY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyIiwiYXN5bmNJdGVyYXRvciIsIm5hbm9pZCIsInNpemUiLCJjb21tb25Qcm9wZXJ0aWVzIiwiUmVqZWN0V2l0aFZhbHVlIiwibWVzc2FnZSIsIm1pbmlTZXJpYWxpemVFcnJvciIsInNpbXBsZUVycm9yIiwiY3JlYXRlQXN5bmNUaHVuayIsInR5cGVQcmVmaXgiLCJwYXlsb2FkQ3JlYXRvciIsImZ1bGZpbGxlZCIsInJlcXVlc3RJZCIsInJlcXVlc3RTdGF0dXMiLCJwZW5kaW5nIiwicmVqZWN0ZWQiLCJyZWplY3RlZFdpdGhWYWx1ZSIsImFib3J0ZWQiLCJjb25kaXRpb24iLCJzZXJpYWxpemVFcnJvciIsIkFDIiwiQWJvcnRDb250cm9sbGVyIiwiX2NsYXNzIiwic2lnbmFsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJvbmFib3J0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFib3J0IiwiZXh0cmEiLCJhYm9ydFJlYXNvbiIsImFib3J0Q29udHJvbGxlciIsImFib3J0ZWRQcm9taXNlIiwicmVqZWN0Iiwic3RhcnRlZCIsInByb21pc2UiLCJmaW5hbEFjdGlvbiIsIl90ZW1wMyIsIl9leGl0MiIsImRpc3BhdGNoQ29uZGl0aW9uUmVqZWN0aW9uIiwiX3RlbXA0IiwiYm9keSIsInJlY292ZXIiLCJyZXNvbHZlIiwicmFjZSIsInJlamVjdFdpdGhWYWx1ZSIsIl9Qcm9taXNlJHJhY2UiLCJfY2F0Y2giLCJlcnIiLCJyZWFzb24iLCJ1bndyYXBSZXN1bHQiLCJtYXRjaGVzIiwiaGFzTWF0Y2hGdW5jdGlvbiIsImlzQW55T2YiLCJtYXRjaGVycyIsInNvbWUiLCJpc0FsbE9mIiwiaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEiLCJ2YWxpZFN0YXR1cyIsImhhc1ZhbGlkUmVxdWVzdElkIiwiaGFzVmFsaWRSZXF1ZXN0U3RhdHVzIiwiaXNBc3luY1RodW5rQXJyYXkiLCJpc1BlbmRpbmciLCJfbGVuMyIsImFzeW5jVGh1bmtzIiwiX2tleTMiLCJhc3luY1RodW5rIiwiY29tYmluZWRNYXRjaGVyIiwiaXNSZWplY3RlZCIsIl9sZW40IiwiX2tleTQiLCJpc1JlamVjdGVkV2l0aFZhbHVlIiwiX2xlbjUiLCJfa2V5NSIsImhhc0ZsYWciLCJpc0Z1bGZpbGxlZCIsIl9sZW42IiwiX2tleTYiLCJpc0FzeW5jVGh1bmtBY3Rpb24iLCJfbGVuNyIsIl9rZXk3IiwibWluIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJtb2R1bGUiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJpdGVtIiwiY29udGVudCIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIl9hcnJheUxpa2VUb0FycmF5IiwibGVuIiwiYXJyMiIsIl9pdGVtIiwiX2FycmF5V2l0aEhvbGVzIiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsIl9zIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibWluTGVuIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwid2l0aEV4dHJhQXJndW1lbnQiLCJtZW1vIiwiZ2V0VGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsIkJvb2xlYW4iLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImFsbCIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwicm9vdCIsInNlbGYiLCJhc3luYyIsImNsaWVudCIsImVuZHBvaW50IiwianNvbiIsIm1ldGhvZCIsImN1c3RvbUNvbmYiLCJoZWFkZXJzIiwiY29uZmlnIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsInJlc3BvbnNlIiwiZmV0Y2giLCJvayIsInN0YXR1c1RleHQiLCJwb3N0IiwicHV0IiwiZGVsIiwibG9hZGluZ0FjdGlvbiIsImVycm9yQWN0aW9uIiwicmVnaXN0ZXJlZEFjdGlvbiIsInJlbW92ZWRBY3Rpb24iLCJ3b3JrZXJzTG9hZGVkQWN0aW9uIiwid29ya2VyU3ZjIiwid29ya2VyIiwicmVnaXN0ZXIiLCJ3b3JrZXJzIiwiU0VSVklDRV9CQVNFVVJMIiwibG9hZGluZyIsInJlZ2lzdGVyZWQiLCJwaG90byIsImJpbyIsInJlbW92ZWQiLCJpZHgiLCJmaW5kSW5kZXgiLCJ3b3JrZXJzTG9hZGVkIiwiY2xlYXJFcnJvciIsInRodW5rTWlkZGxld2FyZSIsImNsZWFyRXJyb3JBY3Rpb24iLCJzdG9yZSQiLCJkZWZhdWx0IiwiaW5mbyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImxvYWRlZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsImdsb2JhbFRoaXMiLCJobWQiLCJjaGlsZHJlbiIsInByb3AiLCJ0b1N0cmluZ1RhZyIsImVtcHR5T2JqZWN0IiwiaXNVbmRlZiIsImlzRGVmIiwiaXNUcnVlIiwiaXNQcmltaXRpdmUiLCJpc09iamVjdCIsIl90b1N0cmluZyIsImlzVmFsaWRBcnJheUluZGV4IiwicGFyc2VGbG9hdCIsImZsb29yIiwiaXNGaW5pdGUiLCJpc1Byb21pc2UiLCJjYXRjaCIsInRvTnVtYmVyIiwiaXNOYU4iLCJtYWtlTWFwIiwic3RyIiwiZXhwZWN0c0xvd2VyQ2FzZSIsInRvTG93ZXJDYXNlIiwiaXNCdWlsdEluVGFnIiwiaXNSZXNlcnZlZEF0dHJpYnV0ZSIsImhhc093biIsImNhY2hlZCIsImNhY2hlIiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwicmVwbGFjZSIsInRvVXBwZXJDYXNlIiwiY2FwaXRhbGl6ZSIsImNoYXJBdCIsImh5cGhlbmF0ZVJFIiwiaHlwaGVuYXRlIiwiY3R4IiwiYm91bmRGbiIsIl9sZW5ndGgiLCJ0b0FycmF5Iiwic3RhcnQiLCJyZXQiLCJleHRlbmQiLCJ0byIsIl9mcm9tIiwidG9PYmplY3QiLCJyZXMiLCJub29wIiwibm8iLCJpZGVudGl0eSIsImxvb3NlRXF1YWwiLCJpc09iamVjdEEiLCJpc09iamVjdEIiLCJpc0FycmF5QSIsImlzQXJyYXlCIiwiZ2V0VGltZSIsImtleXNBIiwia2V5c0IiLCJsb29zZUluZGV4T2YiLCJvbmNlIiwiY2FsbGVkIiwiU1NSX0FUVFIiLCJBU1NFVF9UWVBFUyIsIkxJRkVDWUNMRV9IT09LUyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsInNpbGVudCIsInByb2R1Y3Rpb25UaXAiLCJkZXZ0b29scyIsInBlcmZvcm1hbmNlIiwiZXJyb3JIYW5kbGVyIiwid2FybkhhbmRsZXIiLCJpZ25vcmVkRWxlbWVudHMiLCJrZXlDb2RlcyIsImlzUmVzZXJ2ZWRUYWciLCJpc1Jlc2VydmVkQXR0ciIsImlzVW5rbm93bkVsZW1lbnQiLCJnZXRUYWdOYW1lc3BhY2UiLCJwYXJzZVBsYXRmb3JtVGFnTmFtZSIsIm11c3RVc2VQcm9wIiwiX2xpZmVjeWNsZUhvb2tzIiwidW5pY29kZVJlZ0V4cCIsImlzUmVzZXJ2ZWQiLCJjaGFyQ29kZUF0IiwiZGVmIiwiX2lzU2VydmVyIiwiYmFpbFJFIiwiUmVnRXhwIiwiaGFzUHJvdG8iLCJpbkJyb3dzZXIiLCJpbldlZXgiLCJXWEVudmlyb25tZW50IiwicGxhdGZvcm0iLCJ3ZWV4UGxhdGZvcm0iLCJVQSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImlzSUUiLCJpc0lFOSIsImlzRWRnZSIsImlzSU9TIiwiaXNGRiIsIm5hdGl2ZVdhdGNoIiwid2F0Y2giLCJzdXBwb3J0c1Bhc3NpdmUiLCJvcHRzIiwiaXNTZXJ2ZXJSZW5kZXJpbmciLCJlbnYiLCJWVUVfRU5WIiwiX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImlzTmF0aXZlIiwiQ3RvciIsIl9TZXQiLCJoYXNTeW1ib2wiLCJ3YXJuIiwidWlkIiwiRGVwIiwic3VicyIsImFkZFN1YiIsInN1YiIsInJlbW92ZVN1YiIsImRlcGVuZCIsImFkZERlcCIsIm5vdGlmeSIsInRhcmdldFN0YWNrIiwicHVzaFRhcmdldCIsInBvcFRhcmdldCIsIlZOb2RlIiwidGFnIiwidGV4dCIsImVsbSIsImNvbnRleHQiLCJjb21wb25lbnRPcHRpb25zIiwiYXN5bmNGYWN0b3J5IiwibnMiLCJmbkNvbnRleHQiLCJmbk9wdGlvbnMiLCJmblNjb3BlSWQiLCJjb21wb25lbnRJbnN0YW5jZSIsInBhcmVudCIsInJhdyIsImlzU3RhdGljIiwiaXNSb290SW5zZXJ0IiwiaXNDb21tZW50IiwiaXNDbG9uZWQiLCJpc09uY2UiLCJhc3luY01ldGEiLCJpc0FzeW5jUGxhY2Vob2xkZXIiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJjaGlsZCIsImNyZWF0ZUVtcHR5Vk5vZGUiLCJub2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsImluc2VydGVkIiwib2IiLCJfX29iX18iLCJvYnNlcnZlQXJyYXkiLCJhcnJheUtleXMiLCJzaG91bGRPYnNlcnZlIiwidG9nZ2xlT2JzZXJ2aW5nIiwiT2JzZXJ2ZXIiLCJ2bUNvdW50Iiwic3JjIiwicHJvdG9BdWdtZW50IiwiY29weUF1Z21lbnQiLCJ3YWxrIiwib2JzZXJ2ZSIsImFzUm9vdERhdGEiLCJpc0V4dGVuc2libGUiLCJfaXNWdWUiLCJkZWZpbmVSZWFjdGl2ZSQkMSIsImN1c3RvbVNldHRlciIsInNoYWxsb3ciLCJzZXR0ZXIiLCJjaGlsZE9iIiwiZGVwZW5kQXJyYXkiLCJuZXdWYWwiLCJtYXgiLCJpdGVtcyIsInN0cmF0cyIsIm1lcmdlRGF0YSIsInRvVmFsIiwiZnJvbVZhbCIsIm1lcmdlRGF0YU9yRm4iLCJwYXJlbnRWYWwiLCJjaGlsZFZhbCIsInZtIiwiaW5zdGFuY2VEYXRhIiwiZGVmYXVsdERhdGEiLCJtZXJnZUhvb2siLCJob29rcyIsImRlZHVwZUhvb2tzIiwibWVyZ2VBc3NldHMiLCJob29rIiwia2V5JDEiLCJwcm9wcyIsIm1ldGhvZHMiLCJpbmplY3QiLCJjb21wdXRlZCIsInByb3ZpZGUiLCJkZWZhdWx0U3RyYXQiLCJtZXJnZU9wdGlvbnMiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVJbmplY3QiLCJkaXJzIiwiZGlyZWN0aXZlcyIsImRlZiQkMSIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMiLCJfYmFzZSIsImV4dGVuZHMiLCJtaXhpbnMiLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJwcm9wc0RhdGEiLCJhYnNlbnQiLCJib29sZWFuSW5kZXgiLCJnZXRUeXBlSW5kZXgiLCJzdHJpbmdJbmRleCIsIiRvcHRpb25zIiwiX3Byb3BzIiwiZ2V0UHJvcERlZmF1bHRWYWx1ZSIsInByZXZTaG91bGRPYnNlcnZlIiwiaXNTYW1lVHlwZSIsImV4cGVjdGVkVHlwZXMiLCJoYW5kbGVFcnJvciIsImN1ciIsIiRwYXJlbnQiLCJlcnJvckNhcHR1cmVkIiwiZ2xvYmFsSGFuZGxlRXJyb3IiLCJpbnZva2VXaXRoRXJyb3JIYW5kbGluZyIsImhhbmRsZXIiLCJfaGFuZGxlZCIsImxvZ0Vycm9yIiwiY29uc29sZSIsInRpbWVyRnVuYyIsImlzVXNpbmdNaWNyb1Rhc2siLCJjYWxsYmFja3MiLCJmbHVzaENhbGxiYWNrcyIsImNvcGllcyIsInNldFRpbWVvdXQiLCJNdXRhdGlvbk9ic2VydmVyIiwic2V0SW1tZWRpYXRlIiwiY291bnRlciIsInRleHROb2RlIiwiY2hhcmFjdGVyRGF0YSIsIm5leHRUaWNrIiwiY2IiLCJfcmVzb2x2ZSIsInNlZW5PYmplY3RzIiwidHJhdmVyc2UiLCJfdHJhdmVyc2UiLCJzZWVuIiwiaXNBIiwiZGVwSWQiLCJub3JtYWxpemVFdmVudCIsInBhc3NpdmUiLCJvbmNlJCQxIiwiY2FwdHVyZSIsImNyZWF0ZUZuSW52b2tlciIsImZucyIsImludm9rZXIiLCJhcmd1bWVudHMkMSIsInVwZGF0ZUxpc3RlbmVycyIsIm9uIiwib2xkT24iLCJyZW1vdmUkJDEiLCJjcmVhdGVPbmNlSGFuZGxlciIsIm9sZCIsImV2ZW50IiwibWVyZ2VWTm9kZUhvb2siLCJob29rS2V5Iiwib2xkSG9vayIsIndyYXBwZWRIb29rIiwibWVyZ2VkIiwiY2hlY2tQcm9wIiwiaGFzaCIsImFsdEtleSIsInByZXNlcnZlIiwibm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVBcnJheUNoaWxkcmVuIiwiaXNUZXh0Tm9kZSIsIm5lc3RlZEluZGV4IiwibGFzdEluZGV4IiwibGFzdCIsInNoaWZ0IiwiX2lzVkxpc3QiLCJyZXNvbHZlSW5qZWN0IiwicHJvdmlkZUtleSIsIl9wcm92aWRlZCIsInByb3ZpZGVEZWZhdWx0IiwicmVzb2x2ZVNsb3RzIiwic2xvdHMiLCJhdHRycyIsInNsb3QiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJub3JtYWxpemVTY29wZWRTbG90cyIsIm5vcm1hbFNsb3RzIiwicHJldlNsb3RzIiwiaGFzTm9ybWFsU2xvdHMiLCJpc1N0YWJsZSIsIiRzdGFibGUiLCIka2V5IiwiX25vcm1hbGl6ZWQiLCIkaGFzTm9ybWFsIiwibm9ybWFsaXplU2NvcGVkU2xvdCIsImtleSQyIiwicHJveHlOb3JtYWxTbG90IiwicmVuZGVyTGlzdCIsInJlbmRlciIsInJlbmRlclNsb3QiLCJmYWxsYmFjayIsImJpbmRPYmplY3QiLCJub2RlcyIsInNjb3BlZFNsb3RGbiIsIiRzY29wZWRTbG90cyIsIiRzbG90cyIsIiRjcmVhdGVFbGVtZW50IiwicmVzb2x2ZUZpbHRlciIsImlzS2V5Tm90TWF0Y2giLCJleHBlY3QiLCJhY3R1YWwiLCJjaGVja0tleUNvZGVzIiwiZXZlbnRLZXlDb2RlIiwiYnVpbHRJbktleUNvZGUiLCJldmVudEtleU5hbWUiLCJidWlsdEluS2V5TmFtZSIsIm1hcHBlZEtleUNvZGUiLCJiaW5kT2JqZWN0UHJvcHMiLCJhc1Byb3AiLCJpc1N5bmMiLCJsb29wIiwiZG9tUHJvcHMiLCJjYW1lbGl6ZWRLZXkiLCJoeXBoZW5hdGVkS2V5IiwiJGV2ZW50IiwicmVuZGVyU3RhdGljIiwiaXNJbkZvciIsIl9zdGF0aWNUcmVlcyIsInRyZWUiLCJtYXJrU3RhdGljIiwic3RhdGljUmVuZGVyRm5zIiwiX3JlbmRlclByb3h5IiwibWFya09uY2UiLCJtYXJrU3RhdGljTm9kZSIsImJpbmRPYmplY3RMaXN0ZW5lcnMiLCJleGlzdGluZyIsIm91cnMiLCJyZXNvbHZlU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljS2V5cyIsImNvbnRlbnRIYXNoS2V5IiwiYmluZER5bmFtaWNLZXlzIiwiYmFzZU9iaiIsInByZXBlbmRNb2RpZmllciIsInN5bWJvbCIsImluc3RhbGxSZW5kZXJIZWxwZXJzIiwiX28iLCJfbCIsIl90IiwiX3EiLCJfbSIsIl9mIiwiX2siLCJfYiIsIl92IiwiX3UiLCJfZyIsIl9wIiwiRnVuY3Rpb25hbFJlbmRlckNvbnRleHQiLCJjb250ZXh0Vm0iLCJ0aGlzJDEiLCJfb3JpZ2luYWwiLCJpc0NvbXBpbGVkIiwiX2NvbXBpbGVkIiwibmVlZE5vcm1hbGl6YXRpb24iLCJpbmplY3Rpb25zIiwic2NvcGVkU2xvdHMiLCJfc2NvcGVJZCIsIl9jIiwiY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCIsInJlbmRlckNvbnRleHQiLCJjbG9uZSIsIm1lcmdlUHJvcHMiLCJjb21wb25lbnRWTm9kZUhvb2tzIiwiaW5pdCIsImh5ZHJhdGluZyIsIl9pc0Rlc3Ryb3llZCIsImtlZXBBbGl2ZSIsIm1vdW50ZWROb2RlIiwicHJlcGF0Y2giLCJfaXNDb21wb25lbnQiLCJfcGFyZW50Vm5vZGUiLCJpbmxpbmVUZW1wbGF0ZSIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUiLCJhY3RpdmVJbnN0YW5jZSIsIiRtb3VudCIsIm9sZFZub2RlIiwicGFyZW50Vm5vZGUiLCJyZW5kZXJDaGlsZHJlbiIsIm5ld1Njb3BlZFNsb3RzIiwib2xkU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljU2NvcGVkU2xvdCIsIm5lZWRzRm9yY2VVcGRhdGUiLCJfcmVuZGVyQ2hpbGRyZW4iLCIkdm5vZGUiLCJfdm5vZGUiLCIkYXR0cnMiLCIkbGlzdGVuZXJzIiwicHJvcEtleXMiLCJfcHJvcEtleXMiLCJvbGRMaXN0ZW5lcnMiLCJfcGFyZW50TGlzdGVuZXJzIiwidXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIiwiJGZvcmNlVXBkYXRlIiwidXBkYXRlQ2hpbGRDb21wb25lbnQiLCJfaXNNb3VudGVkIiwiY2FsbEhvb2siLCJfaW5hY3RpdmUiLCJhY3RpdmF0ZWRDaGlsZHJlbiIsImFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCJkZXN0cm95IiwiZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiJGRlc3Ryb3kiLCJob29rc1RvTWVyZ2UiLCJjcmVhdGVDb21wb25lbnQiLCJiYXNlQ3RvciIsImNpZCIsImZhY3RvcnkiLCJlcnJvckNvbXAiLCJyZXNvbHZlZCIsIm93bmVyIiwiY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwib3duZXJzIiwibG9hZGluZ0NvbXAiLCJzeW5jIiwidGltZXJMb2FkaW5nIiwidGltZXJUaW1lb3V0IiwiJG9uIiwiZm9yY2VSZW5kZXIiLCJyZW5kZXJDb21wbGV0ZWQiLCJjbGVhclRpbWVvdXQiLCJlbnN1cmVDdG9yIiwiY29tcG9uZW50IiwiZGVsYXkiLCJ0aW1lb3V0IiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50IiwiY3JlYXRlQXN5bmNQbGFjZWhvbGRlciIsInJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMiLCJjYWxsYmFjayIsInRyYW5zZm9ybU1vZGVsIiwiZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSIsImZ1bmN0aW9uYWwiLCJ2bm9kZXMiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwibmF0aXZlT24iLCJhYnN0cmFjdCIsInRvTWVyZ2UiLCJfbWVyZ2VkIiwibWVyZ2VIb29rJDEiLCJpbnN0YWxsQ29tcG9uZW50SG9va3MiLCJmMSIsImYyIiwibm9ybWFsaXphdGlvblR5cGUiLCJhbHdheXNOb3JtYWxpemUiLCJpcyIsInNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIiwicHJlIiwiYXBwbHlOUyIsImNsYXNzIiwicmVnaXN0ZXJEZWVwQmluZGluZ3MiLCJfY3JlYXRlRWxlbWVudCIsImZvcmNlIiwiY29tcCIsImdldEZpcnN0Q29tcG9uZW50Q2hpbGQiLCJyZW1vdmUkMSIsIiRvZmYiLCJfdGFyZ2V0Iiwib25jZUhhbmRsZXIiLCJzZXRBY3RpdmVJbnN0YW5jZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsImlzSW5JbmFjdGl2ZVRyZWUiLCJkaXJlY3QiLCJfZGlyZWN0SW5hY3RpdmUiLCIkY2hpbGRyZW4iLCJoYW5kbGVycyIsIl9oYXNIb29rRXZlbnQiLCIkZW1pdCIsInF1ZXVlIiwid2FpdGluZyIsImZsdXNoaW5nIiwiY3VycmVudEZsdXNoVGltZXN0YW1wIiwiZ2V0Tm93Iiwibm93IiwiY3JlYXRlRXZlbnQiLCJ0aW1lU3RhbXAiLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsImJlZm9yZSIsInJ1biIsImFjdGl2YXRlZFF1ZXVlIiwidXBkYXRlZFF1ZXVlIiwiY2FsbEFjdGl2YXRlZEhvb2tzIiwiX3dhdGNoZXIiLCJjYWxsVXBkYXRlZEhvb2tzIiwiZW1pdCIsInVpZCQyIiwiV2F0Y2hlciIsImV4cE9yRm4iLCJpc1JlbmRlcldhdGNoZXIiLCJfd2F0Y2hlcnMiLCJkZWVwIiwidXNlciIsImxhenkiLCJhY3RpdmUiLCJkaXJ0eSIsImRlcHMiLCJuZXdEZXBzIiwiZGVwSWRzIiwibmV3RGVwSWRzIiwiZXhwcmVzc2lvbiIsInNlZ21lbnRzIiwicGFyc2VQYXRoIiwiY2xlYW51cERlcHMiLCJ0bXAiLCJxdWV1ZVdhdGNoZXIiLCJvbGRWYWx1ZSIsImV2YWx1YXRlIiwidGVhcmRvd24iLCJfaXNCZWluZ0Rlc3Ryb3llZCIsInNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiIsInNvdXJjZUtleSIsImNvbXB1dGVkV2F0Y2hlck9wdGlvbnMiLCJkZWZpbmVDb21wdXRlZCIsInVzZXJEZWYiLCJzaG91bGRDYWNoZSIsImNyZWF0ZUNvbXB1dGVkR2V0dGVyIiwiY3JlYXRlR2V0dGVySW52b2tlciIsIl9jb21wdXRlZFdhdGNoZXJzIiwiY3JlYXRlV2F0Y2hlciIsIiR3YXRjaCIsInVpZCQzIiwic3VwZXIiLCJzdXBlck9wdGlvbnMiLCJtb2RpZmllZE9wdGlvbnMiLCJtb2RpZmllZCIsImxhdGVzdCIsInNlYWxlZCIsInNlYWxlZE9wdGlvbnMiLCJyZXNvbHZlTW9kaWZpZWRPcHRpb25zIiwiZXh0ZW5kT3B0aW9ucyIsImNvbXBvbmVudHMiLCJWdWUiLCJfaW5pdCIsImdldENvbXBvbmVudE5hbWUiLCJwYXR0ZXJuIiwicHJ1bmVDYWNoZSIsImtlZXBBbGl2ZUluc3RhbmNlIiwiY2FjaGVkTm9kZSIsInBydW5lQ2FjaGVFbnRyeSIsImN1cnJlbnQiLCJjYWNoZWQkJDEiLCJfdWlkIiwidm5vZGVDb21wb25lbnRPcHRpb25zIiwiX2NvbXBvbmVudFRhZyIsImluaXRJbnRlcm5hbENvbXBvbmVudCIsIl9zZWxmIiwiJHJvb3QiLCIkcmVmcyIsImluaXRMaWZlY3ljbGUiLCJfZXZlbnRzIiwiaW5pdEV2ZW50cyIsInBhcmVudERhdGEiLCJpbml0UmVuZGVyIiwiaW5pdEluamVjdGlvbnMiLCJwcm9wc09wdGlvbnMiLCJpbml0UHJvcHMiLCJpbml0TWV0aG9kcyIsIl9kYXRhIiwiZ2V0RGF0YSIsImluaXREYXRhIiwid2F0Y2hlcnMiLCJpc1NTUiIsImluaXRDb21wdXRlZCIsImluaXRXYXRjaCIsImluaXRTdGF0ZSIsImluaXRQcm92aWRlIiwiZWwiLCJpbml0TWl4aW4iLCIkc2V0IiwiJGRlbGV0ZSIsImltbWVkaWF0ZSIsInN0YXRlTWl4aW4iLCJob29rUkUiLCIkb25jZSIsImkkMSIsImNicyIsImV2ZW50c01peGluIiwiX3VwZGF0ZSIsInByZXZFbCIsIiRlbCIsInByZXZWbm9kZSIsInJlc3RvcmVBY3RpdmVJbnN0YW5jZSIsIl9fcGF0Y2hfXyIsIl9fdnVlX18iLCJsaWZlY3ljbGVNaXhpbiIsIiRuZXh0VGljayIsIl9yZW5kZXIiLCJyZWYiLCJyZW5kZXJNaXhpbiIsInBhdHRlcm5UeXBlcyIsImJ1aWx0SW5Db21wb25lbnRzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJOdW1iZXIiLCJjcmVhdGVkIiwiZGVzdHJveWVkIiwibW91bnRlZCIsInBhcnNlSW50IiwiY29uZmlnRGVmIiwidXRpbCIsImRlZmluZVJlYWN0aXZlIiwidXNlIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwidW5zaGlmdCIsImluc3RhbGwiLCJpbml0VXNlIiwibWl4aW4iLCJpbml0TWl4aW4kMSIsIlN1cGVyIiwiU3VwZXJJZCIsImNhY2hlZEN0b3JzIiwiX0N0b3IiLCJTdWIiLCJDb21wIiwiaW5pdFByb3BzJDEiLCJpbml0Q29tcHV0ZWQkMSIsImluaXRFeHRlbmQiLCJpbml0QXNzZXRSZWdpc3RlcnMiLCJpbml0R2xvYmFsQVBJIiwic3NyQ29udGV4dCIsInZlcnNpb24iLCJhY2NlcHRWYWx1ZSIsImF0dHIiLCJpc0VudW1lcmF0ZWRBdHRyIiwiaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlIiwiaXNCb29sZWFuQXR0ciIsInhsaW5rTlMiLCJpc1hsaW5rIiwiZ2V0WGxpbmtQcm9wIiwiaXNGYWxzeUF0dHJWYWx1ZSIsIm1lcmdlQ2xhc3NEYXRhIiwic3RhdGljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInN0cmluZ2lmaWVkIiwic3RyaW5naWZ5QXJyYXkiLCJzdHJpbmdpZnlPYmplY3QiLCJuYW1lc3BhY2VNYXAiLCJzdmciLCJtYXRoIiwiaXNIVE1MVGFnIiwiaXNTVkciLCJ1bmtub3duRWxlbWVudENhY2hlIiwiaXNUZXh0SW5wdXRUeXBlIiwicXVlcnkiLCJub2RlT3BzIiwidGFnTmFtZSIsIm11bHRpcGxlIiwiY3JlYXRlRWxlbWVudE5TIiwibmFtZXNwYWNlIiwiY3JlYXRlQ29tbWVudCIsIm5ld05vZGUiLCJyZWZlcmVuY2VOb2RlIiwibmV4dFNpYmxpbmciLCJzZXRUZXh0Q29udGVudCIsInRleHRDb250ZW50Iiwic2V0U3R5bGVTY29wZSIsInNjb3BlSWQiLCJyZWdpc3RlclJlZiIsImlzUmVtb3ZhbCIsInJlZnMiLCJyZWZJbkZvciIsImVtcHR5Tm9kZSIsInNhbWVWbm9kZSIsInR5cGVBIiwidHlwZUIiLCJzYW1lSW5wdXRUeXBlIiwiY3JlYXRlS2V5VG9PbGRJZHgiLCJiZWdpbklkeCIsImVuZElkeCIsInVwZGF0ZURpcmVjdGl2ZXMiLCJvbGREaXIiLCJkaXIiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZEFyZyIsImNhbGxIb29rJDEiLCJjb21wb25lbnRVcGRhdGVkIiwiY2FsbEluc2VydCIsImVtcHR5TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsInJhd05hbWUiLCJiYXNlTW9kdWxlcyIsInVwZGF0ZUF0dHJzIiwiaW5oZXJpdEF0dHJzIiwib2xkQXR0cnMiLCJzZXRBdHRyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJiYXNlU2V0QXR0ciIsImNvbnZlcnRFbnVtZXJhdGVkVmFsdWUiLCJzZXRBdHRyaWJ1dGVOUyIsIl9faWVwaCIsImJsb2NrZXIiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJ1cGRhdGVDbGFzcyIsIm9sZERhdGEiLCJjbHMiLCJjaGlsZE5vZGUiLCJkeW5hbWljQ2xhc3MiLCJnZW5DbGFzc0ZvclZub2RlIiwidHJhbnNpdGlvbkNsYXNzIiwiX3RyYW5zaXRpb25DbGFzc2VzIiwiX3ByZXZDbGFzcyIsImNociIsImluZGV4JDEiLCJleHByZXNzaW9uUG9zIiwiZXhwcmVzc2lvbkVuZFBvcyIsImtsYXNzIiwidmFsaWREaXZpc2lvbkNoYXJSRSIsInBhcnNlRmlsdGVycyIsImV4cCIsImZpbHRlcnMiLCJpblNpbmdsZSIsImluRG91YmxlIiwiaW5UZW1wbGF0ZVN0cmluZyIsImluUmVnZXgiLCJjdXJseSIsInNxdWFyZSIsInBhcmVuIiwibGFzdEZpbHRlckluZGV4IiwidHJpbSIsInB1c2hGaWx0ZXIiLCJ3cmFwRmlsdGVyIiwiYmFzZVdhcm4iLCJtc2ciLCJyYW5nZSIsInBsdWNrTW9kdWxlRnVuY3Rpb24iLCJhZGRQcm9wIiwiZHluYW1pYyIsInJhbmdlU2V0SXRlbSIsInBsYWluIiwiYWRkQXR0ciIsImR5bmFtaWNBdHRycyIsImFkZFJhd0F0dHIiLCJhdHRyc01hcCIsImF0dHJzTGlzdCIsImFkZERpcmVjdGl2ZSIsImlzRHluYW1pY0FyZyIsInByZXBlbmRNb2RpZmllck1hcmtlciIsImFkZEhhbmRsZXIiLCJpbXBvcnRhbnQiLCJldmVudHMiLCJyaWdodCIsIm1pZGRsZSIsIm5hdGl2ZSIsIm5hdGl2ZUV2ZW50cyIsIm5ld0hhbmRsZXIiLCJnZXRCaW5kaW5nQXR0ciIsImdldFN0YXRpYyIsImR5bmFtaWNWYWx1ZSIsImdldEFuZFJlbW92ZUF0dHIiLCJzdGF0aWNWYWx1ZSIsInJlbW92ZUZyb21NYXAiLCJnZXRBbmRSZW1vdmVBdHRyQnlSZWdleCIsImVuZCIsImdlbkNvbXBvbmVudE1vZGVsIiwibnVtYmVyIiwidmFsdWVFeHByZXNzaW9uIiwiYXNzaWdubWVudCIsImdlbkFzc2lnbm1lbnRDb2RlIiwibGFzdEluZGV4T2YiLCJlb2YiLCJpc1N0cmluZ1N0YXJ0IiwicGFyc2VTdHJpbmciLCJwYXJzZUJyYWNrZXQiLCJwYXJzZU1vZGVsIiwiaW5CcmFja2V0Iiwic3RyaW5nUXVvdGUiLCJ0YXJnZXQkMSIsImNyZWF0ZU9uY2VIYW5kbGVyJDEiLCJyZW1vdmUkMiIsInVzZU1pY3JvdGFza0ZpeCIsImFkZCQxIiwiYXR0YWNoZWRUaW1lc3RhbXAiLCJfd3JhcHBlciIsImN1cnJlbnRUYXJnZXQiLCJvd25lckRvY3VtZW50IiwidXBkYXRlRE9NTGlzdGVuZXJzIiwiY2hhbmdlIiwibm9ybWFsaXplRXZlbnRzIiwic3ZnQ29udGFpbmVyIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsIl92YWx1ZSIsInN0ckN1ciIsInNob3VsZFVwZGF0ZVZhbHVlIiwiaW5uZXJIVE1MIiwiY2hlY2tWYWwiLCJjb21wb3NpbmciLCJub3RJbkZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImlzTm90SW5Gb2N1c0FuZERpcnR5IiwiX3ZNb2RpZmllcnMiLCJpc0RpcnR5V2l0aE1vZGlmaWVycyIsInBhcnNlU3R5bGVUZXh0IiwicHJvcGVydHlEZWxpbWl0ZXIiLCJub3JtYWxpemVTdHlsZURhdGEiLCJub3JtYWxpemVTdHlsZUJpbmRpbmciLCJzdGF0aWNTdHlsZSIsImJpbmRpbmdTdHlsZSIsImVtcHR5U3R5bGUiLCJjc3NWYXJSRSIsImltcG9ydGFudFJFIiwic2V0UHJvcCIsInNldFByb3BlcnR5Iiwibm9ybWFsaXplZE5hbWUiLCJub3JtYWxpemUiLCJ2ZW5kb3JOYW1lcyIsImNhcE5hbWUiLCJ1cGRhdGVTdHlsZSIsIm9sZFN0YXRpY1N0eWxlIiwib2xkU3R5bGVCaW5kaW5nIiwibm9ybWFsaXplZFN0eWxlIiwib2xkU3R5bGUiLCJuZXdTdHlsZSIsImNoZWNrQ2hpbGQiLCJzdHlsZURhdGEiLCJnZXRTdHlsZSIsIndoaXRlc3BhY2VSRSIsImFkZENsYXNzIiwiY2xhc3NMaXN0IiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQ2xhc3MiLCJ0YXIiLCJyZXNvbHZlVHJhbnNpdGlvbiIsImF1dG9Dc3NUcmFuc2l0aW9uIiwiZW50ZXJDbGFzcyIsImVudGVyVG9DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJsZWF2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImhhc1RyYW5zaXRpb24iLCJUUkFOU0lUSU9OIiwiQU5JTUFUSU9OIiwidHJhbnNpdGlvblByb3AiLCJ0cmFuc2l0aW9uRW5kRXZlbnQiLCJhbmltYXRpb25Qcm9wIiwiYW5pbWF0aW9uRW5kRXZlbnQiLCJvbnRyYW5zaXRpb25lbmQiLCJvbndlYmtpdHRyYW5zaXRpb25lbmQiLCJvbmFuaW1hdGlvbmVuZCIsIm9ud2Via2l0YW5pbWF0aW9uZW5kIiwicmFmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJ3aGVuVHJhbnNpdGlvbkVuZHMiLCJleHBlY3RlZFR5cGUiLCJnZXRUcmFuc2l0aW9uSW5mbyIsInByb3BDb3VudCIsImVuZGVkIiwib25FbmQiLCJ0cmFuc2Zvcm1SRSIsInN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJ0cmFuc2l0aW9uRGVsYXlzIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJoYXNUcmFuc2Zvcm0iLCJkZWxheXMiLCJkdXJhdGlvbnMiLCJ0b01zIiwiZW50ZXIiLCJ0b2dnbGVEaXNwbGF5IiwiX2xlYXZlQ2IiLCJjYW5jZWxsZWQiLCJ0cmFuc2l0aW9uIiwiX2VudGVyQ2IiLCJub2RlVHlwZSIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYmVmb3JlRW50ZXIiLCJhZnRlckVudGVyIiwiZW50ZXJDYW5jZWxsZWQiLCJiZWZvcmVBcHBlYXIiLCJhcHBlYXIiLCJhZnRlckFwcGVhciIsImFwcGVhckNhbmNlbGxlZCIsImR1cmF0aW9uIiwidHJhbnNpdGlvbk5vZGUiLCJpc0FwcGVhciIsInN0YXJ0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInRvQ2xhc3MiLCJiZWZvcmVFbnRlckhvb2siLCJlbnRlckhvb2siLCJhZnRlckVudGVySG9vayIsImVudGVyQ2FuY2VsbGVkSG9vayIsImV4cGxpY2l0RW50ZXJEdXJhdGlvbiIsImV4cGVjdHNDU1MiLCJ1c2VyV2FudHNDb250cm9sIiwiZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCIsInNob3ciLCJwZW5kaW5nTm9kZSIsIl9wZW5kaW5nIiwiaXNWYWxpZER1cmF0aW9uIiwibGVhdmUiLCJybSIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsImV4cGxpY2l0TGVhdmVEdXJhdGlvbiIsInBlcmZvcm1MZWF2ZSIsImludm9rZXJGbnMiLCJfZW50ZXIiLCJwYXRjaCIsImJhY2tlbmQiLCJyZW1vdmVOb2RlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwicGFyZW50RWxtIiwicmVmRWxtIiwibmVzdGVkIiwib3duZXJBcnJheSIsImlzUmVhY3RpdmF0ZWQiLCJpbml0Q29tcG9uZW50IiwiaW5uZXJOb2RlIiwiYWN0aXZhdGUiLCJyZWFjdGl2YXRlQ29tcG9uZW50Iiwic2V0U2NvcGUiLCJjcmVhdGVDaGlsZHJlbiIsImludm9rZUNyZWF0ZUhvb2tzIiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwicmVmJCQxIiwiYW5jZXN0b3IiLCJhZGRWbm9kZXMiLCJzdGFydElkeCIsImludm9rZURlc3Ryb3lIb29rIiwicmVtb3ZlVm5vZGVzIiwiY2giLCJyZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rIiwiY2hpbGRFbG0iLCJjcmVhdGVSbUNiIiwiZmluZElkeEluT2xkIiwib2xkQ2giLCJwYXRjaFZub2RlIiwicmVtb3ZlT25seSIsImh5ZHJhdGUiLCJuZXdDaCIsIm9sZEtleVRvSWR4IiwiaWR4SW5PbGQiLCJ2bm9kZVRvTW92ZSIsIm9sZFN0YXJ0SWR4IiwibmV3U3RhcnRJZHgiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJjYW5Nb3ZlIiwidXBkYXRlQ2hpbGRyZW4iLCJwb3N0cGF0Y2giLCJpbnZva2VJbnNlcnRIb29rIiwiaW5pdGlhbCIsImlzUmVuZGVyZWRNb2R1bGUiLCJpblZQcmUiLCJoYXNDaGlsZE5vZGVzIiwiY2hpbGRyZW5NYXRjaCIsImZ1bGxJbnZva2UiLCJpc0luaXRpYWxQYXRjaCIsImlzUmVhbEVsZW1lbnQiLCJoYXNBdHRyaWJ1dGUiLCJvbGRFbG0iLCJwYXRjaGFibGUiLCJpJDIiLCJjcmVhdGVQYXRjaEZ1bmN0aW9uIiwidm1vZGVsIiwidHJpZ2dlciIsImRpcmVjdGl2ZSIsImJpbmRpbmciLCJfdk9wdGlvbnMiLCJzZXRTZWxlY3RlZCIsImdldFZhbHVlIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsInByZXZPcHRpb25zIiwiY3VyT3B0aW9ucyIsImhhc05vTWF0Y2hpbmdPcHRpb24iLCJhY3R1YWxseVNldFNlbGVjdGVkIiwiaXNNdWx0aXBsZSIsInNlbGVjdGVkIiwib3B0aW9uIiwic2VsZWN0ZWRJbmRleCIsImluaXRFdmVudCIsImxvY2F0ZU5vZGUiLCJwbGF0Zm9ybURpcmVjdGl2ZXMiLCJ0cmFuc2l0aW9uJCQxIiwib3JpZ2luYWxEaXNwbGF5IiwiX192T3JpZ2luYWxEaXNwbGF5IiwiZGlzcGxheSIsInVuYmluZCIsInRyYW5zaXRpb25Qcm9wcyIsIm1vZGUiLCJnZXRSZWFsQ2hpbGQiLCJjb21wT3B0aW9ucyIsImV4dHJhY3RUcmFuc2l0aW9uRGF0YSIsInBsYWNlaG9sZGVyIiwicmF3Q2hpbGQiLCJpc05vdFRleHROb2RlIiwiaXNWU2hvd0RpcmVjdGl2ZSIsIlRyYW5zaXRpb24iLCJoYXNQYXJlbnRUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsIm9sZENoaWxkIiwiaXNTYW1lQ2hpbGQiLCJkZWxheWVkTGVhdmUiLCJtb3ZlQ2xhc3MiLCJjYWxsUGVuZGluZ0NicyIsIl9tb3ZlQ2IiLCJyZWNvcmRQb3NpdGlvbiIsIm5ld1BvcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImFwcGx5VHJhbnNsYXRpb24iLCJvbGRQb3MiLCJwb3MiLCJkeCIsImxlZnQiLCJkeSIsInRvcCIsIm1vdmVkIiwidHJhbnNmb3JtIiwiV2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwicGxhdGZvcm1Db21wb25lbnRzIiwiVHJhbnNpdGlvbkdyb3VwIiwiYmVmb3JlTW91bnQiLCJrZXB0IiwicHJldkNoaWxkcmVuIiwicmF3Q2hpbGRyZW4iLCJ0cmFuc2l0aW9uRGF0YSIsImMkMSIsImhhc01vdmUiLCJfcmVmbG93Iiwib2Zmc2V0SGVpZ2h0IiwicHJvcGVydHlOYW1lIiwiX2hhc01vdmUiLCJjbG9uZU5vZGUiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsInVwZGF0ZUNvbXBvbmVudCIsIm1vdW50Q29tcG9uZW50IiwiZGVjb2RlciIsImRlZmF1bHRUYWdSRSIsInJlZ2V4RXNjYXBlUkUiLCJidWlsZFJlZ2V4IiwiZGVsaW1pdGVycyIsIm9wZW4iLCJjbG9zZSIsImtsYXNzJDEiLCJzdGF0aWNLZXlzIiwidHJhbnNmb3JtTm9kZSIsImNsYXNzQmluZGluZyIsImdlbkRhdGEiLCJzdHlsZSQxIiwic3R5bGVCaW5kaW5nIiwiaXNVbmFyeVRhZyIsImNhbkJlTGVmdE9wZW5UYWciLCJpc05vblBocmFzaW5nVGFnIiwiYXR0cmlidXRlIiwiZHluYW1pY0FyZ0F0dHJpYnV0ZSIsIm5jbmFtZSIsInFuYW1lQ2FwdHVyZSIsInN0YXJ0VGFnT3BlbiIsInN0YXJ0VGFnQ2xvc2UiLCJlbmRUYWciLCJkb2N0eXBlIiwiY29tbWVudCIsImNvbmRpdGlvbmFsQ29tbWVudCIsImlzUGxhaW5UZXh0RWxlbWVudCIsInJlQ2FjaGUiLCJkZWNvZGluZ01hcCIsImVuY29kZWRBdHRyIiwiZW5jb2RlZEF0dHJXaXRoTmV3TGluZXMiLCJpc0lnbm9yZU5ld2xpbmVUYWciLCJzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUiLCJodG1sIiwiZGVjb2RlQXR0ciIsInNob3VsZERlY29kZU5ld2xpbmVzIiwicmUiLCJ3YXJuJDIiLCJ0cmFuc2Zvcm1zIiwicHJlVHJhbnNmb3JtcyIsInBvc3RUcmFuc2Zvcm1zIiwicGxhdGZvcm1Jc1ByZVRhZyIsInBsYXRmb3JtTXVzdFVzZVByb3AiLCJwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSIsIm9uUkUiLCJkaXJSRSIsImZvckFsaWFzUkUiLCJmb3JJdGVyYXRvclJFIiwic3RyaXBQYXJlbnNSRSIsImR5bmFtaWNBcmdSRSIsImFyZ1JFIiwiYmluZFJFIiwibW9kaWZpZXJSRSIsInNsb3RSRSIsImxpbmVCcmVha1JFIiwid2hpdGVzcGFjZVJFJDEiLCJkZWNvZGVIVE1MQ2FjaGVkIiwiZW1wdHlTbG90U2NvcGVUb2tlbiIsImNyZWF0ZUFTVEVsZW1lbnQiLCJtYWtlQXR0cnNNYXAiLCJyYXdBdHRyc01hcCIsInByb2Nlc3NFbGVtZW50IiwiZWxlbWVudCIsInByb2Nlc3NLZXkiLCJjaGVja0luRm9yIiwicHJvY2Vzc1JlZiIsInNsb3RTY29wZSIsInNsb3RUYXJnZXQiLCJzbG90VGFyZ2V0RHluYW1pYyIsImdldFJhd0JpbmRpbmdBdHRyIiwic2xvdEJpbmRpbmciLCJnZXRTbG90TmFtZSIsInNsb3RCaW5kaW5nJDEiLCJyZWYkMSIsImR5bmFtaWMkMSIsInNsb3RDb250YWluZXIiLCJwcm9jZXNzU2xvdENvbnRlbnQiLCJzbG90TmFtZSIsInByb2Nlc3NDb21wb25lbnQiLCJzeW5jR2VuIiwiaXNEeW5hbWljIiwiaGFzQmluZGluZ3MiLCJwYXJzZU1vZGlmaWVycyIsImNhbWVsIiwiYXJnTWF0Y2giLCJwcm9jZXNzQXR0cnMiLCJwcm9jZXNzRm9yIiwiaW5NYXRjaCIsImFsaWFzIiwiaXRlcmF0b3JNYXRjaCIsIml0ZXJhdG9yMSIsIml0ZXJhdG9yMiIsInBhcnNlRm9yIiwiYWRkSWZDb25kaXRpb24iLCJpZkNvbmRpdGlvbnMiLCJpZU5TQnVnIiwiaWVOU1ByZWZpeCIsImNsb25lQVNURWxlbWVudCIsImlzU3RhdGljS2V5IiwiaXNQbGF0Zm9ybVJlc2VydmVkVGFnIiwibW9kdWxlcyQxIiwicHJlVHJhbnNmb3JtTm9kZSIsInR5cGVCaW5kaW5nIiwiaWZDb25kaXRpb24iLCJpZkNvbmRpdGlvbkV4dHJhIiwiaGFzRWxzZSIsImVsc2VJZkNvbmRpdGlvbiIsImJyYW5jaDAiLCJwcm9jZXNzZWQiLCJpZiIsImJsb2NrIiwiYnJhbmNoMSIsImJyYW5jaDIiLCJlbHNlIiwiZWxzZWlmIiwiYmFzZU9wdGlvbnMiLCJleHBlY3RIVE1MIiwiX3dhcm4iLCJjb2RlIiwiZ2VuU2VsZWN0IiwidmFsdWVCaW5kaW5nIiwidHJ1ZVZhbHVlQmluZGluZyIsImZhbHNlVmFsdWVCaW5kaW5nIiwiZ2VuQ2hlY2tib3hNb2RlbCIsImdlblJhZGlvTW9kZWwiLCJuZWVkQ29tcG9zaXRpb25HdWFyZCIsImdlbkRlZmF1bHRNb2RlbCIsImlzUHJlVGFnIiwiZ2VuU3RhdGljS2V5c0NhY2hlZCIsIm9wdGltaXplIiwibWFya1N0YXRpYyQxIiwibWFya1N0YXRpY1Jvb3RzIiwic3RhdGljIiwiaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3IiLCJsJDEiLCJzdGF0aWNJbkZvciIsInN0YXRpY1Jvb3QiLCJmbkV4cFJFIiwiZm5JbnZva2VSRSIsInNpbXBsZVBhdGhSRSIsImVzYyIsInRhYiIsInNwYWNlIiwidXAiLCJkb3duIiwia2V5TmFtZXMiLCJnZW5HdWFyZCIsIm1vZGlmaWVyQ29kZSIsInN0b3AiLCJwcmV2ZW50IiwiY3RybCIsImFsdCIsImdlbkhhbmRsZXJzIiwicHJlZml4Iiwic3RhdGljSGFuZGxlcnMiLCJkeW5hbWljSGFuZGxlcnMiLCJoYW5kbGVyQ29kZSIsImdlbkhhbmRsZXIiLCJpc01ldGhvZFBhdGgiLCJpc0Z1bmN0aW9uRXhwcmVzc2lvbiIsImlzRnVuY3Rpb25JbnZvY2F0aW9uIiwiZ2VuTW9kaWZpZXJDb2RlIiwia2V5TW9kaWZpZXIiLCJnZW5GaWx0ZXJDb2RlIiwiZ2VuS2V5RmlsdGVyIiwia2V5VmFsIiwia2V5Q29kZSIsImtleU5hbWUiLCJiYXNlRGlyZWN0aXZlcyIsIndyYXBMaXN0ZW5lcnMiLCJ3cmFwRGF0YSIsImNsb2FrIiwiQ29kZWdlblN0YXRlIiwiZGF0YUdlbkZucyIsIm1heWJlQ29tcG9uZW50Iiwib25jZUlkIiwiZ2VuZXJhdGUiLCJhc3QiLCJnZW5FbGVtZW50Iiwic3RhdGljUHJvY2Vzc2VkIiwiZ2VuU3RhdGljIiwib25jZVByb2Nlc3NlZCIsImdlbk9uY2UiLCJmb3JQcm9jZXNzZWQiLCJnZW5Gb3IiLCJpZlByb2Nlc3NlZCIsImdlbklmIiwiZ2VuQ2hpbGRyZW4iLCJnZW5Qcm9wcyIsImJpbmQkJDEiLCJnZW5TbG90IiwiY29tcG9uZW50TmFtZSIsImdlbkRhdGEkMiIsImdlbkNvbXBvbmVudCIsIm9yaWdpbmFsUHJlU3RhdGUiLCJhbHRHZW4iLCJhbHRFbXB0eSIsImdlbklmQ29uZGl0aW9ucyIsImNvbmRpdGlvbnMiLCJnZW5UZXJuYXJ5RXhwIiwiYWx0SGVscGVyIiwibmVlZFJ1bnRpbWUiLCJoYXNSdW50aW1lIiwiZ2VuIiwiZ2VuRGlyZWN0aXZlcyIsImNvbnRhaW5zU2xvdENoaWxkIiwibmVlZHNLZXkiLCJnZW5lcmF0ZWRTbG90cyIsImdlblNjb3BlZFNsb3QiLCJpbmxpbmVSZW5kZXJGbnMiLCJnZW5JbmxpbmVUZW1wbGF0ZSIsImlzTGVnYWN5U3ludGF4IiwicmV2ZXJzZVByb3h5IiwiY2hlY2tTa2lwIiwiYWx0R2VuRWxlbWVudCIsImFsdEdlbk5vZGUiLCJlbCQxIiwibm9ybWFsaXphdGlvblR5cGUkMSIsIm5lZWRzTm9ybWFsaXphdGlvbiIsImdldE5vcm1hbGl6YXRpb25UeXBlIiwiZ2VuTm9kZSIsImdlbkNvbW1lbnQiLCJ0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMiLCJzdGF0aWNQcm9wcyIsImR5bmFtaWNQcm9wcyIsImNyZWF0ZUZ1bmN0aW9uIiwiZXJyb3JzIiwiY3JlYXRlQ29tcGlsZVRvRnVuY3Rpb25GbiIsImNvbXBpbGUiLCJ0ZW1wbGF0ZSIsImNvbXBpbGVkIiwiZm5HZW5FcnJvcnMiLCJiYXNlQ29tcGlsZSIsImRpdiIsImN1cnJlbnRQYXJlbnQiLCJzdGFjayIsInByZXNlcnZlV2hpdGVzcGFjZSIsIndoaXRlc3BhY2VPcHRpb24iLCJ3aGl0ZXNwYWNlIiwiaW5QcmUiLCJjbG9zZUVsZW1lbnQiLCJ0cmltRW5kaW5nV2hpdGVzcGFjZSIsImZvcmJpZGRlbiIsImZpbmRQcmV2RWxlbWVudCIsImxhc3ROb2RlIiwibGFzdFRhZyIsImlzVW5hcnlUYWckJDEiLCJjYW5CZUxlZnRPcGVuVGFnJCQxIiwiZW5kVGFnTGVuZ3RoIiwic3RhY2tlZFRhZyIsInJlU3RhY2tlZFRhZyIsInJlc3QkMSIsImNoYXJzIiwicGFyc2VFbmRUYWciLCJ0ZXh0RW5kIiwiY29tbWVudEVuZCIsInNob3VsZEtlZXBDb21tZW50IiwiYWR2YW5jZSIsImNvbmRpdGlvbmFsRW5kIiwiZG9jdHlwZU1hdGNoIiwiZW5kVGFnTWF0Y2giLCJjdXJJbmRleCIsInN0YXJ0VGFnTWF0Y2giLCJwYXJzZVN0YXJ0VGFnIiwiaGFuZGxlU3RhcnRUYWciLCJ1bmFyeVNsYXNoIiwidW5hcnkiLCJzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWYiLCJsb3dlckNhc2VkVGFnIiwibG93ZXJDYXNlZFRhZ05hbWUiLCJwYXJzZUhUTUwiLCJjb21tZW50cyIsIm91dHB1dFNvdXJjZVJhbmdlIiwic3RhcnQkMSIsImd1YXJkSUVTVkdCdWciLCJwcm9jZXNzUHJlIiwicHJvY2Vzc1Jhd0F0dHJzIiwicHJvY2Vzc0lmIiwicHJvY2Vzc09uY2UiLCJlbmQkMSIsInRhZ1JFIiwidG9rZW5WYWx1ZSIsInRva2VucyIsInJhd1Rva2VucyIsImV4ZWMiLCJwYXJzZVRleHQiLCJwYXJzZSIsImZpbmFsT3B0aW9ucyIsInRpcHMiLCJ0aXAiLCJjb21waWxlVG9GdW5jdGlvbnMiLCJnZXRTaG91bGREZWNvZGUiLCJocmVmIiwiaWRUb1RlbXBsYXRlIiwibW91bnQiLCJkb2N1bWVudEVsZW1lbnQiLCJvdXRlckhUTUwiLCJjb250YWluZXIiLCJnZXRPdXRlckhUTUwiLCJMaXN0V29ya2VyIiwid29ya2VyTGlzdCIsIiRwcm9wcyIsIndpZHRoIiwiaGVpZ2h0IiwiY2xpY2siLCJyZW1vdmVXb3JrZXIiLCJBZGRXb3JrZXIiLCJzdWJtaXQiLCJhZGROZXdXb3JrZXIiLCJpbnB1dCIsImFnZSIsImZpbGVzIiwiY29scyIsInJvd3MiLCJhZGRyZXNzIiwicHJldmVudERlZmF1bHQiLCJyZXNldCIsInByaW1hcnkiXSwibWFwcGluZ3MiOiI7d0NBQUEsU0FBU0EsRUFB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ckJ0aEIsS0FBS3VOLE1BQVE1SSxFQUFNNEksTUFDbkJ2TixLQUFLb2hCLFFBQVV6YyxFQUFNeWMsV0FFdkI1YSxHQUFBeWIsT0FBQSxTQUFnQixXIiwiZmlsZSI6Indvcmtlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHQodCl7Zm9yKHZhciBuPWFyZ3VtZW50cy5sZW5ndGgscj1BcnJheShuPjE/bi0xOjApLGU9MTtlPG47ZSsrKXJbZS0xXT1hcmd1bWVudHNbZV07aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIGk9WVt0XSxvPWk/XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KG51bGwscik6aTpcInVua25vd24gZXJyb3IgbnI6IFwiK3Q7dGhyb3cgRXJyb3IoXCJbSW1tZXJdIFwiK28pfXRocm93IEVycm9yKFwiW0ltbWVyXSBtaW5pZmllZCBlcnJvciBucjogXCIrdCsoci5sZW5ndGg/XCIgXCIrci5tYXAoKGZ1bmN0aW9uKHQpe3JldHVyblwiJ1wiK3QrXCInXCJ9KSkuam9pbihcIixcIik6XCJcIikrXCIuIEZpbmQgdGhlIGZ1bGwgZXJyb3IgYXQ6IGh0dHBzOi8vYml0Lmx5LzNjWEVLV2ZcIil9ZnVuY3Rpb24gbih0KXtyZXR1cm4hIXQmJiEhdFtRXX1mdW5jdGlvbiByKHQpe3JldHVybiEhdCYmKGZ1bmN0aW9uKHQpe2lmKCF0fHxcIm9iamVjdFwiIT10eXBlb2YgdClyZXR1cm4hMTt2YXIgbj1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7cmV0dXJuIW58fG49PT1PYmplY3QucHJvdG90eXBlfSh0KXx8QXJyYXkuaXNBcnJheSh0KXx8ISF0W0xdfHwhIXQuY29uc3RydWN0b3JbTF18fHModCl8fHYodCkpfWZ1bmN0aW9uIGUocil7cmV0dXJuIG4ocil8fHQoMjMscikscltRXS50fWZ1bmN0aW9uIGkodCxuLHIpe3ZvaWQgMD09PXImJihyPSExKSwwPT09byh0KT8ocj9PYmplY3Qua2V5czpaKSh0KS5mb3JFYWNoKChmdW5jdGlvbihlKXtyJiZcInN5bWJvbFwiPT10eXBlb2YgZXx8bihlLHRbZV0sdCl9KSk6dC5mb3JFYWNoKChmdW5jdGlvbihyLGUpe3JldHVybiBuKGUscix0KX0pKX1mdW5jdGlvbiBvKHQpe3ZhciBuPXRbUV07cmV0dXJuIG4/bi5pPjM/bi5pLTQ6bi5pOkFycmF5LmlzQXJyYXkodCk/MTpzKHQpPzI6dih0KT8zOjB9ZnVuY3Rpb24gdSh0LG4pe3JldHVybiAyPT09byh0KT90LmhhcyhuKTpPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxuKX1mdW5jdGlvbiBhKHQsbil7cmV0dXJuIDI9PT1vKHQpP3QuZ2V0KG4pOnRbbl19ZnVuY3Rpb24gZih0LG4scil7dmFyIGU9byh0KTsyPT09ZT90LnNldChuLHIpOjM9PT1lPyh0LmRlbGV0ZShuKSx0LmFkZChyKSk6dFtuXT1yfWZ1bmN0aW9uIGModCxuKXtyZXR1cm4gdD09PW4/MCE9PXR8fDEvdD09MS9uOnQhPXQmJm4hPW59ZnVuY3Rpb24gcyh0KXtyZXR1cm4gWCYmdCBpbnN0YW5jZW9mIE1hcH1mdW5jdGlvbiB2KHQpe3JldHVybiBxJiZ0IGluc3RhbmNlb2YgU2V0fWZ1bmN0aW9uIHAodCl7cmV0dXJuIHQub3x8dC50fWZ1bmN0aW9uIGwodCl7aWYoQXJyYXkuaXNBcnJheSh0KSlyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodCk7dmFyIG49dHQodCk7ZGVsZXRlIG5bUV07Zm9yKHZhciByPVoobiksZT0wO2U8ci5sZW5ndGg7ZSsrKXt2YXIgaT1yW2VdLG89bltpXTshMT09PW8ud3JpdGFibGUmJihvLndyaXRhYmxlPSEwLG8uY29uZmlndXJhYmxlPSEwKSwoby5nZXR8fG8uc2V0KSYmKG5baV09e2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCxlbnVtZXJhYmxlOm8uZW51bWVyYWJsZSx2YWx1ZTp0W2ldfSl9cmV0dXJuIE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpLG4pfWZ1bmN0aW9uIGQodCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITEpLHkodCl8fG4odCl8fCFyKHQpP3Q6KG8odCk+MSYmKHQuc2V0PXQuYWRkPXQuY2xlYXI9dC5kZWxldGU9aCksT2JqZWN0LmZyZWV6ZSh0KSxlJiZpKHQsKGZ1bmN0aW9uKHQsbil7cmV0dXJuIGQobiwhMCl9KSwhMCksdCl9ZnVuY3Rpb24gaCgpe3QoMil9ZnVuY3Rpb24geSh0KXtyZXR1cm4gbnVsbD09dHx8XCJvYmplY3RcIiE9dHlwZW9mIHR8fE9iamVjdC5pc0Zyb3plbih0KX1mdW5jdGlvbiBiKG4pe3ZhciByPW50W25dO3JldHVybiByfHx0KDE4LG4pLHJ9ZnVuY3Rpb24gbSh0LG4pe250W3RdfHwobnRbdF09bil9ZnVuY3Rpb24gXygpe3JldHVyblwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fFV8fHQoMCksVX1mdW5jdGlvbiBqKHQsbil7biYmKGIoXCJQYXRjaGVzXCIpLHQudT1bXSx0LnM9W10sdC52PW4pfWZ1bmN0aW9uIGcodCl7dyh0KSx0LnAuZm9yRWFjaChTKSx0LnA9bnVsbH1mdW5jdGlvbiB3KHQpe3Q9PT1VJiYoVT10LmwpfWZ1bmN0aW9uIE8odCl7cmV0dXJuIFU9e3A6W10sbDpVLGg6dCxtOiEwLF86MH19ZnVuY3Rpb24gUyh0KXt2YXIgbj10W1FdOzA9PT1uLml8fDE9PT1uLmk/bi5qKCk6bi5nPSEwfWZ1bmN0aW9uIFAobixlKXtlLl89ZS5wLmxlbmd0aDt2YXIgaT1lLnBbMF0sbz12b2lkIDAhPT1uJiZuIT09aTtyZXR1cm4gZS5oLk98fGIoXCJFUzVcIikuUyhlLG4sbyksbz8oaVtRXS5QJiYoZyhlKSx0KDQpKSxyKG4pJiYobj1NKGUsbiksZS5sfHx4KGUsbikpLGUudSYmYihcIlBhdGNoZXNcIikuTShpW1FdLG4sZS51LGUucykpOm49TShlLGksW10pLGcoZSksZS51JiZlLnYoZS51LGUucyksbiE9PUg/bjp2b2lkIDB9ZnVuY3Rpb24gTSh0LG4scil7aWYoeShuKSlyZXR1cm4gbjt2YXIgZT1uW1FdO2lmKCFlKXJldHVybiBpKG4sKGZ1bmN0aW9uKGksbyl7cmV0dXJuIEEodCxlLG4saSxvLHIpfSksITApLG47aWYoZS5BIT09dClyZXR1cm4gbjtpZighZS5QKXJldHVybiB4KHQsZS50LCEwKSxlLnQ7aWYoIWUuSSl7ZS5JPSEwLGUuQS5fLS07dmFyIG89ND09PWUuaXx8NT09PWUuaT9lLm89bChlLmspOmUubztpKDM9PT1lLmk/bmV3IFNldChvKTpvLChmdW5jdGlvbihuLGkpe3JldHVybiBBKHQsZSxvLG4saSxyKX0pKSx4KHQsbywhMSksciYmdC51JiZiKFwiUGF0Y2hlc1wiKS5SKGUscix0LnUsdC5zKX1yZXR1cm4gZS5vfWZ1bmN0aW9uIEEoZSxpLG8sYSxjLHMpe2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmM9PT1vJiZ0KDUpLG4oYykpe3ZhciB2PU0oZSxjLHMmJmkmJjMhPT1pLmkmJiF1KGkuRCxhKT9zLmNvbmNhdChhKTp2b2lkIDApO2lmKGYobyxhLHYpLCFuKHYpKXJldHVybjtlLm09ITF9aWYocihjKSYmIXkoYykpe2lmKCFlLmguTiYmZS5fPDEpcmV0dXJuO00oZSxjKSxpJiZpLkEubHx8eChlLGMpfX1mdW5jdGlvbiB4KHQsbixyKXt2b2lkIDA9PT1yJiYocj0hMSksdC5oLk4mJnQubSYmZChuLHIpfWZ1bmN0aW9uIHoodCxuKXt2YXIgcj10W1FdO3JldHVybihyP3Aocik6dClbbl19ZnVuY3Rpb24gSSh0LG4pe2lmKG4gaW4gdClmb3IodmFyIHI9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO3I7KXt2YXIgZT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsbik7aWYoZSlyZXR1cm4gZTtyPU9iamVjdC5nZXRQcm90b3R5cGVPZihyKX19ZnVuY3Rpb24gayh0KXt0LlB8fCh0LlA9ITAsdC5sJiZrKHQubCkpfWZ1bmN0aW9uIEUodCl7dC5vfHwodC5vPWwodC50KSl9ZnVuY3Rpb24gUih0LG4scil7dmFyIGU9cyhuKT9iKFwiTWFwU2V0XCIpLlQobixyKTp2KG4pP2IoXCJNYXBTZXRcIikuRihuLHIpOnQuTz9mdW5jdGlvbih0LG4pe3ZhciByPUFycmF5LmlzQXJyYXkodCksZT17aTpyPzE6MCxBOm4/bi5BOl8oKSxQOiExLEk6ITEsRDp7fSxsOm4sdDp0LGs6bnVsbCxvOm51bGwsajpudWxsLEM6ITF9LGk9ZSxvPXJ0O3ImJihpPVtlXSxvPWV0KTt2YXIgdT1Qcm94eS5yZXZvY2FibGUoaSxvKSxhPXUucmV2b2tlLGY9dS5wcm94eTtyZXR1cm4gZS5rPWYsZS5qPWEsZn0obixyKTpiKFwiRVM1XCIpLkoobixyKTtyZXR1cm4ocj9yLkE6XygpKS5wLnB1c2goZSksZX1mdW5jdGlvbiBEKGUpe3JldHVybiBuKGUpfHx0KDIyLGUpLGZ1bmN0aW9uIHQobil7aWYoIXIobikpcmV0dXJuIG47dmFyIGUsdT1uW1FdLGM9byhuKTtpZih1KXtpZighdS5QJiYodS5pPDR8fCFiKFwiRVM1XCIpLksodSkpKXJldHVybiB1LnQ7dS5JPSEwLGU9TihuLGMpLHUuST0hMX1lbHNlIGU9TihuLGMpO3JldHVybiBpKGUsKGZ1bmN0aW9uKG4scil7dSYmYSh1LnQsbik9PT1yfHxmKGUsbix0KHIpKX0pKSwzPT09Yz9uZXcgU2V0KGUpOmV9KGUpfWZ1bmN0aW9uIE4odCxuKXtzd2l0Y2gobil7Y2FzZSAyOnJldHVybiBuZXcgTWFwKHQpO2Nhc2UgMzpyZXR1cm4gQXJyYXkuZnJvbSh0KX1yZXR1cm4gbCh0KX1mdW5jdGlvbiBUKCl7ZnVuY3Rpb24gcih0LG4pe3ZhciByPXNbdF07cmV0dXJuIHI/ci5lbnVtZXJhYmxlPW46c1t0XT1yPXtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTpuLGdldDpmdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmZihuKSxydC5nZXQobix0KX0sc2V0OmZ1bmN0aW9uKG4pe3ZhciByPXRoaXNbUV07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmZihyKSxydC5zZXQocix0LG4pfX0scn1mdW5jdGlvbiBlKHQpe2Zvcih2YXIgbj10Lmxlbmd0aC0xO24+PTA7bi0tKXt2YXIgcj10W25dW1FdO2lmKCFyLlApc3dpdGNoKHIuaSl7Y2FzZSA1OmEocikmJmsocik7YnJlYWs7Y2FzZSA0Om8ocikmJmsocil9fX1mdW5jdGlvbiBvKHQpe2Zvcih2YXIgbj10LnQscj10LmssZT1aKHIpLGk9ZS5sZW5ndGgtMTtpPj0wO2ktLSl7dmFyIG89ZVtpXTtpZihvIT09USl7dmFyIGE9bltvXTtpZih2b2lkIDA9PT1hJiYhdShuLG8pKXJldHVybiEwO3ZhciBmPXJbb10scz1mJiZmW1FdO2lmKHM/cy50IT09YTohYyhmLGEpKXJldHVybiEwfX12YXIgdj0hIW5bUV07cmV0dXJuIGUubGVuZ3RoIT09WihuKS5sZW5ndGgrKHY/MDoxKX1mdW5jdGlvbiBhKHQpe3ZhciBuPXQuaztpZihuLmxlbmd0aCE9PXQudC5sZW5ndGgpcmV0dXJuITA7dmFyIHI9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuLG4ubGVuZ3RoLTEpO3JldHVybiEoIXJ8fHIuZ2V0KX1mdW5jdGlvbiBmKG4pe24uZyYmdCgzLEpTT04uc3RyaW5naWZ5KHAobikpKX12YXIgcz17fTttKFwiRVM1XCIse0o6ZnVuY3Rpb24odCxuKXt2YXIgZT1BcnJheS5pc0FycmF5KHQpLGk9ZnVuY3Rpb24odCxuKXtpZih0KXtmb3IodmFyIGU9QXJyYXkobi5sZW5ndGgpLGk9MDtpPG4ubGVuZ3RoO2krKylPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlwiK2kscihpLCEwKSk7cmV0dXJuIGV9dmFyIG89dHQobik7ZGVsZXRlIG9bUV07Zm9yKHZhciB1PVoobyksYT0wO2E8dS5sZW5ndGg7YSsrKXt2YXIgZj11W2FdO29bZl09cihmLHR8fCEhb1tmXS5lbnVtZXJhYmxlKX1yZXR1cm4gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yobiksbyl9KGUsdCksbz17aTplPzU6NCxBOm4/bi5BOl8oKSxQOiExLEk6ITEsRDp7fSxsOm4sdDp0LGs6aSxvOm51bGwsZzohMSxDOiExfTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGksUSx7dmFsdWU6byx3cml0YWJsZTohMH0pLGl9LFM6ZnVuY3Rpb24odCxyLG8pe28/bihyKSYmcltRXS5BPT09dCYmZSh0LnApOih0LnUmJmZ1bmN0aW9uIHQobil7aWYobiYmXCJvYmplY3RcIj09dHlwZW9mIG4pe3ZhciByPW5bUV07aWYocil7dmFyIGU9ci50LG89ci5rLGY9ci5ELGM9ci5pO2lmKDQ9PT1jKWkobywoZnVuY3Rpb24obil7biE9PVEmJih2b2lkIDAhPT1lW25dfHx1KGUsbik/ZltuXXx8dChvW25dKTooZltuXT0hMCxrKHIpKSl9KSksaShlLChmdW5jdGlvbih0KXt2b2lkIDAhPT1vW3RdfHx1KG8sdCl8fChmW3RdPSExLGsocikpfSkpO2Vsc2UgaWYoNT09PWMpe2lmKGEocikmJihrKHIpLGYubGVuZ3RoPSEwKSxvLmxlbmd0aDxlLmxlbmd0aClmb3IodmFyIHM9by5sZW5ndGg7czxlLmxlbmd0aDtzKyspZltzXT0hMTtlbHNlIGZvcih2YXIgdj1lLmxlbmd0aDt2PG8ubGVuZ3RoO3YrKylmW3ZdPSEwO2Zvcih2YXIgcD1NYXRoLm1pbihvLmxlbmd0aCxlLmxlbmd0aCksbD0wO2w8cDtsKyspdm9pZCAwPT09ZltsXSYmdChvW2xdKX19fX0odC5wWzBdKSxlKHQucCkpfSxLOmZ1bmN0aW9uKHQpe3JldHVybiA0PT09dC5pP28odCk6YSh0KX19KX1mdW5jdGlvbiBGKCl7ZnVuY3Rpb24gZSh0KXtpZighcih0KSlyZXR1cm4gdDtpZihBcnJheS5pc0FycmF5KHQpKXJldHVybiB0Lm1hcChlKTtpZihzKHQpKXJldHVybiBuZXcgTWFwKEFycmF5LmZyb20odC5lbnRyaWVzKCkpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuW3RbMF0sZSh0WzFdKV19KSkpO2lmKHYodCkpcmV0dXJuIG5ldyBTZXQoQXJyYXkuZnJvbSh0KS5tYXAoZSkpO3ZhciBuPU9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpKTtmb3IodmFyIGkgaW4gdCluW2ldPWUodFtpXSk7cmV0dXJuIG59ZnVuY3Rpb24gZih0KXtyZXR1cm4gbih0KT9lKHQpOnR9dmFyIGM9XCJhZGRcIjttKFwiUGF0Y2hlc1wiLHskOmZ1bmN0aW9uKG4scil7cmV0dXJuIHIuZm9yRWFjaCgoZnVuY3Rpb24ocil7Zm9yKHZhciBpPXIucGF0aCx1PXIub3AsZj1uLHM9MDtzPGkubGVuZ3RoLTE7cysrKXt2YXIgdj1vKGYpLHA9aVtzXTswIT09diYmMSE9PXZ8fFwiX19wcm90b19fXCIhPT1wJiZcImNvbnN0cnVjdG9yXCIhPT1wfHx0KDI0KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBmJiZcInByb3RvdHlwZVwiPT09cCYmdCgyNCksXCJvYmplY3RcIiE9dHlwZW9mKGY9YShmLHApKSYmdCgxNSxpLmpvaW4oXCIvXCIpKX12YXIgbD1vKGYpLGQ9ZShyLnZhbHVlKSxoPWlbaS5sZW5ndGgtMV07c3dpdGNoKHUpe2Nhc2VcInJlcGxhY2VcIjpzd2l0Y2gobCl7Y2FzZSAyOnJldHVybiBmLnNldChoLGQpO2Nhc2UgMzp0KDE2KTtkZWZhdWx0OnJldHVybiBmW2hdPWR9Y2FzZSBjOnN3aXRjaChsKXtjYXNlIDE6cmV0dXJuIGYuc3BsaWNlKGgsMCxkKTtjYXNlIDI6cmV0dXJuIGYuc2V0KGgsZCk7Y2FzZSAzOnJldHVybiBmLmFkZChkKTtkZWZhdWx0OnJldHVybiBmW2hdPWR9Y2FzZVwicmVtb3ZlXCI6c3dpdGNoKGwpe2Nhc2UgMTpyZXR1cm4gZi5zcGxpY2UoaCwxKTtjYXNlIDI6cmV0dXJuIGYuZGVsZXRlKGgpO2Nhc2UgMzpyZXR1cm4gZi5kZWxldGUoci52YWx1ZSk7ZGVmYXVsdDpyZXR1cm4gZGVsZXRlIGZbaF19ZGVmYXVsdDp0KDE3LHUpfX0pKSxufSxSOmZ1bmN0aW9uKHQsbixyLGUpe3N3aXRjaCh0Lmkpe2Nhc2UgMDpjYXNlIDQ6Y2FzZSAyOnJldHVybiBmdW5jdGlvbih0LG4scixlKXt2YXIgbz10LnQscz10Lm87aSh0LkQsKGZ1bmN0aW9uKHQsaSl7dmFyIHY9YShvLHQpLHA9YShzLHQpLGw9aT91KG8sdCk/XCJyZXBsYWNlXCI6YzpcInJlbW92ZVwiO2lmKHYhPT1wfHxcInJlcGxhY2VcIiE9PWwpe3ZhciBkPW4uY29uY2F0KHQpO3IucHVzaChcInJlbW92ZVwiPT09bD97b3A6bCxwYXRoOmR9OntvcDpsLHBhdGg6ZCx2YWx1ZTpwfSksZS5wdXNoKGw9PT1jP3tvcDpcInJlbW92ZVwiLHBhdGg6ZH06XCJyZW1vdmVcIj09PWw/e29wOmMscGF0aDpkLHZhbHVlOmYodil9OntvcDpcInJlcGxhY2VcIixwYXRoOmQsdmFsdWU6Zih2KX0pfX0pKX0odCxuLHIsZSk7Y2FzZSA1OmNhc2UgMTpyZXR1cm4gZnVuY3Rpb24odCxuLHIsZSl7dmFyIGk9dC50LG89dC5ELHU9dC5vO2lmKHUubGVuZ3RoPGkubGVuZ3RoKXt2YXIgYT1bdSxpXTtpPWFbMF0sdT1hWzFdO3ZhciBzPVtlLHJdO3I9c1swXSxlPXNbMV19Zm9yKHZhciB2PTA7djxpLmxlbmd0aDt2KyspaWYob1t2XSYmdVt2XSE9PWlbdl0pe3ZhciBwPW4uY29uY2F0KFt2XSk7ci5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOnAsdmFsdWU6Zih1W3ZdKX0pLGUucHVzaCh7b3A6XCJyZXBsYWNlXCIscGF0aDpwLHZhbHVlOmYoaVt2XSl9KX1mb3IodmFyIGw9aS5sZW5ndGg7bDx1Lmxlbmd0aDtsKyspe3ZhciBkPW4uY29uY2F0KFtsXSk7ci5wdXNoKHtvcDpjLHBhdGg6ZCx2YWx1ZTpmKHVbbF0pfSl9aS5sZW5ndGg8dS5sZW5ndGgmJmUucHVzaCh7b3A6XCJyZXBsYWNlXCIscGF0aDpuLmNvbmNhdChbXCJsZW5ndGhcIl0pLHZhbHVlOmkubGVuZ3RofSl9KHQsbixyLGUpO2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24odCxuLHIsZSl7dmFyIGk9dC50LG89dC5vLHU9MDtpLmZvckVhY2goKGZ1bmN0aW9uKHQpe2lmKCFvLmhhcyh0KSl7dmFyIGk9bi5jb25jYXQoW3VdKTtyLnB1c2goe29wOlwicmVtb3ZlXCIscGF0aDppLHZhbHVlOnR9KSxlLnVuc2hpZnQoe29wOmMscGF0aDppLHZhbHVlOnR9KX11Kyt9KSksdT0wLG8uZm9yRWFjaCgoZnVuY3Rpb24odCl7aWYoIWkuaGFzKHQpKXt2YXIgbz1uLmNvbmNhdChbdV0pO3IucHVzaCh7b3A6YyxwYXRoOm8sdmFsdWU6dH0pLGUudW5zaGlmdCh7b3A6XCJyZW1vdmVcIixwYXRoOm8sdmFsdWU6dH0pfXUrK30pKX0odCxuLHIsZSl9fSxNOmZ1bmN0aW9uKHQsbixyLGUpe3IucHVzaCh7b3A6XCJyZXBsYWNlXCIscGF0aDpbXSx2YWx1ZTpufSksZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOltdLHZhbHVlOnQudH0pfX0pfWZ1bmN0aW9uIEMoKXtmdW5jdGlvbiBuKHQsbil7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9dH1hKHQsbiksdC5wcm90b3R5cGU9KHIucHJvdG90eXBlPW4ucHJvdG90eXBlLG5ldyByKX1mdW5jdGlvbiBlKHQpe3Qub3x8KHQuRD1uZXcgTWFwLHQubz1uZXcgTWFwKHQudCkpfWZ1bmN0aW9uIG8odCl7dC5vfHwodC5vPW5ldyBTZXQsdC50LmZvckVhY2goKGZ1bmN0aW9uKG4pe2lmKHIobikpe3ZhciBlPVIodC5BLmgsbix0KTt0LnAuc2V0KG4sZSksdC5vLmFkZChlKX1lbHNlIHQuby5hZGQobil9KSkpfWZ1bmN0aW9uIHUobil7bi5nJiZ0KDMsSlNPTi5zdHJpbmdpZnkocChuKSkpfXZhciBhPWZ1bmN0aW9uKHQsbil7cmV0dXJuKGE9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsbil7dC5fX3Byb3RvX189bn18fGZ1bmN0aW9uKHQsbil7Zm9yKHZhciByIGluIG4pbi5oYXNPd25Qcm9wZXJ0eShyKSYmKHRbcl09bltyXSl9KSh0LG4pfSxmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LG4pe3JldHVybiB0aGlzW1FdPXtpOjIsbDpuLEE6bj9uLkE6XygpLFA6ITEsSTohMSxvOnZvaWQgMCxEOnZvaWQgMCx0OnQsazp0aGlzLEM6ITEsZzohMX0sdGhpc31uKHQsTWFwKTt2YXIgbz10LnByb3RvdHlwZTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJzaXplXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLnNpemV9fSksby5oYXM9ZnVuY3Rpb24odCl7cmV0dXJuIHAodGhpc1tRXSkuaGFzKHQpfSxvLnNldD1mdW5jdGlvbih0LG4pe3ZhciByPXRoaXNbUV07cmV0dXJuIHUocikscChyKS5oYXModCkmJnAocikuZ2V0KHQpPT09bnx8KGUociksayhyKSxyLkQuc2V0KHQsITApLHIuby5zZXQodCxuKSxyLkQuc2V0KHQsITApKSx0aGlzfSxvLmRlbGV0ZT1mdW5jdGlvbih0KXtpZighdGhpcy5oYXModCkpcmV0dXJuITE7dmFyIG49dGhpc1tRXTtyZXR1cm4gdShuKSxlKG4pLGsobiksbi5ELnNldCh0LCExKSxuLm8uZGVsZXRlKHQpLCEwfSxvLmNsZWFyPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpc1tRXTt1KHQpLHAodCkuc2l6ZSYmKGUodCksayh0KSx0LkQ9bmV3IE1hcCxpKHQudCwoZnVuY3Rpb24obil7dC5ELnNldChuLCExKX0pKSx0Lm8uY2xlYXIoKSl9LG8uZm9yRWFjaD1mdW5jdGlvbih0LG4pe3ZhciByPXRoaXM7cCh0aGlzW1FdKS5mb3JFYWNoKChmdW5jdGlvbihlLGkpe3QuY2FsbChuLHIuZ2V0KGkpLGkscil9KSl9LG8uZ2V0PWZ1bmN0aW9uKHQpe3ZhciBuPXRoaXNbUV07dShuKTt2YXIgaT1wKG4pLmdldCh0KTtpZihuLkl8fCFyKGkpKXJldHVybiBpO2lmKGkhPT1uLnQuZ2V0KHQpKXJldHVybiBpO3ZhciBvPVIobi5BLmgsaSxuKTtyZXR1cm4gZShuKSxuLm8uc2V0KHQsbyksb30sby5rZXlzPWZ1bmN0aW9uKCl7cmV0dXJuIHAodGhpc1tRXSkua2V5cygpfSxvLnZhbHVlcz1mdW5jdGlvbigpe3ZhciB0LG49dGhpcyxyPXRoaXMua2V5cygpO3JldHVybih0PXt9KVtWXT1mdW5jdGlvbigpe3JldHVybiBuLnZhbHVlcygpfSx0Lm5leHQ9ZnVuY3Rpb24oKXt2YXIgdD1yLm5leHQoKTtyZXR1cm4gdC5kb25lP3Q6e2RvbmU6ITEsdmFsdWU6bi5nZXQodC52YWx1ZSl9fSx0fSxvLmVudHJpZXM9ZnVuY3Rpb24oKXt2YXIgdCxuPXRoaXMscj10aGlzLmtleXMoKTtyZXR1cm4odD17fSlbVl09ZnVuY3Rpb24oKXtyZXR1cm4gbi5lbnRyaWVzKCl9LHQubmV4dD1mdW5jdGlvbigpe3ZhciB0PXIubmV4dCgpO2lmKHQuZG9uZSlyZXR1cm4gdDt2YXIgZT1uLmdldCh0LnZhbHVlKTtyZXR1cm57ZG9uZTohMSx2YWx1ZTpbdC52YWx1ZSxlXX19LHR9LG9bVl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbnRyaWVzKCl9LHR9KCksYz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxuKXtyZXR1cm4gdGhpc1tRXT17aTozLGw6bixBOm4/bi5BOl8oKSxQOiExLEk6ITEsbzp2b2lkIDAsdDp0LGs6dGhpcyxwOm5ldyBNYXAsZzohMSxDOiExfSx0aGlzfW4odCxTZXQpO3ZhciByPXQucHJvdG90eXBlO3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocixcInNpemVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHAodGhpc1tRXSkuc2l6ZX19KSxyLmhhcz1mdW5jdGlvbih0KXt2YXIgbj10aGlzW1FdO3JldHVybiB1KG4pLG4ubz8hIW4uby5oYXModCl8fCEoIW4ucC5oYXModCl8fCFuLm8uaGFzKG4ucC5nZXQodCkpKTpuLnQuaGFzKHQpfSxyLmFkZD1mdW5jdGlvbih0KXt2YXIgbj10aGlzW1FdO3JldHVybiB1KG4pLHRoaXMuaGFzKHQpfHwobyhuKSxrKG4pLG4uby5hZGQodCkpLHRoaXN9LHIuZGVsZXRlPWZ1bmN0aW9uKHQpe2lmKCF0aGlzLmhhcyh0KSlyZXR1cm4hMTt2YXIgbj10aGlzW1FdO3JldHVybiB1KG4pLG8obiksayhuKSxuLm8uZGVsZXRlKHQpfHwhIW4ucC5oYXModCkmJm4uby5kZWxldGUobi5wLmdldCh0KSl9LHIuY2xlYXI9ZnVuY3Rpb24oKXt2YXIgdD10aGlzW1FdO3UodCkscCh0KS5zaXplJiYobyh0KSxrKHQpLHQuby5jbGVhcigpKX0sci52YWx1ZXM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzW1FdO3JldHVybiB1KHQpLG8odCksdC5vLnZhbHVlcygpfSxyLmVudHJpZXM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzW1FdO3JldHVybiB1KHQpLG8odCksdC5vLmVudHJpZXMoKX0sci5rZXlzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWVzKCl9LHJbVl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZXMoKX0sci5mb3JFYWNoPWZ1bmN0aW9uKHQsbil7Zm9yKHZhciByPXRoaXMudmFsdWVzKCksZT1yLm5leHQoKTshZS5kb25lOyl0LmNhbGwobixlLnZhbHVlLGUudmFsdWUsdGhpcyksZT1yLm5leHQoKX0sdH0oKTttKFwiTWFwU2V0XCIse1Q6ZnVuY3Rpb24odCxuKXtyZXR1cm4gbmV3IGYodCxuKX0sRjpmdW5jdGlvbih0LG4pe3JldHVybiBuZXcgYyh0LG4pfX0pfWZ1bmN0aW9uIEooKXtUKCksQygpLEYoKX1mdW5jdGlvbiBLKHQpe3JldHVybiB0fWZ1bmN0aW9uICQodCl7cmV0dXJuIHR9dmFyIEcsVSxXPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2woXCJ4XCIpLFg9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIE1hcCxxPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTZXQsQj1cInVuZGVmaW5lZFwiIT10eXBlb2YgUHJveHkmJnZvaWQgMCE9PVByb3h5LnJldm9jYWJsZSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFJlZmxlY3QsSD1XP1N5bWJvbC5mb3IoXCJpbW1lci1ub3RoaW5nXCIpOigoRz17fSlbXCJpbW1lci1ub3RoaW5nXCJdPSEwLEcpLEw9Vz9TeW1ib2wuZm9yKFwiaW1tZXItZHJhZnRhYmxlXCIpOlwiX18kaW1tZXJfZHJhZnRhYmxlXCIsUT1XP1N5bWJvbC5mb3IoXCJpbW1lci1zdGF0ZVwiKTpcIl9fJGltbWVyX3N0YXRlXCIsVj1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3J8fFwiQEBpdGVyYXRvclwiLFk9ezA6XCJJbGxlZ2FsIHN0YXRlXCIsMTpcIkltbWVyIGRyYWZ0cyBjYW5ub3QgaGF2ZSBjb21wdXRlZCBwcm9wZXJ0aWVzXCIsMjpcIlRoaXMgb2JqZWN0IGhhcyBiZWVuIGZyb3plbiBhbmQgc2hvdWxkIG5vdCBiZSBtdXRhdGVkXCIsMzpmdW5jdGlvbih0KXtyZXR1cm5cIkNhbm5vdCB1c2UgYSBwcm94eSB0aGF0IGhhcyBiZWVuIHJldm9rZWQuIERpZCB5b3UgcGFzcyBhbiBvYmplY3QgZnJvbSBpbnNpZGUgYW4gaW1tZXIgZnVuY3Rpb24gdG8gYW4gYXN5bmMgcHJvY2Vzcz8gXCIrdH0sNDpcIkFuIGltbWVyIHByb2R1Y2VyIHJldHVybmVkIGEgbmV3IHZhbHVlICphbmQqIG1vZGlmaWVkIGl0cyBkcmFmdC4gRWl0aGVyIHJldHVybiBhIG5ldyB2YWx1ZSAqb3IqIG1vZGlmeSB0aGUgZHJhZnQuXCIsNTpcIkltbWVyIGZvcmJpZHMgY2lyY3VsYXIgcmVmZXJlbmNlc1wiLDY6XCJUaGUgZmlyc3Qgb3Igc2Vjb25kIGFyZ3VtZW50IHRvIGBwcm9kdWNlYCBtdXN0IGJlIGEgZnVuY3Rpb25cIiw3OlwiVGhlIHRoaXJkIGFyZ3VtZW50IHRvIGBwcm9kdWNlYCBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgdW5kZWZpbmVkXCIsODpcIkZpcnN0IGFyZ3VtZW50IHRvIGBjcmVhdGVEcmFmdGAgbXVzdCBiZSBhIHBsYWluIG9iamVjdCwgYW4gYXJyYXksIG9yIGFuIGltbWVyYWJsZSBvYmplY3RcIiw5OlwiRmlyc3QgYXJndW1lbnQgdG8gYGZpbmlzaERyYWZ0YCBtdXN0IGJlIGEgZHJhZnQgcmV0dXJuZWQgYnkgYGNyZWF0ZURyYWZ0YFwiLDEwOlwiVGhlIGdpdmVuIGRyYWZ0IGlzIGFscmVhZHkgZmluYWxpemVkXCIsMTE6XCJPYmplY3QuZGVmaW5lUHJvcGVydHkoKSBjYW5ub3QgYmUgdXNlZCBvbiBhbiBJbW1lciBkcmFmdFwiLDEyOlwiT2JqZWN0LnNldFByb3RvdHlwZU9mKCkgY2Fubm90IGJlIHVzZWQgb24gYW4gSW1tZXIgZHJhZnRcIiwxMzpcIkltbWVyIG9ubHkgc3VwcG9ydHMgZGVsZXRpbmcgYXJyYXkgaW5kaWNlc1wiLDE0OlwiSW1tZXIgb25seSBzdXBwb3J0cyBzZXR0aW5nIGFycmF5IGluZGljZXMgYW5kIHRoZSAnbGVuZ3RoJyBwcm9wZXJ0eVwiLDE1OmZ1bmN0aW9uKHQpe3JldHVyblwiQ2Fubm90IGFwcGx5IHBhdGNoLCBwYXRoIGRvZXNuJ3QgcmVzb2x2ZTogXCIrdH0sMTY6J1NldHMgY2Fubm90IGhhdmUgXCJyZXBsYWNlXCIgcGF0Y2hlcy4nLDE3OmZ1bmN0aW9uKHQpe3JldHVyblwiVW5zdXBwb3J0ZWQgcGF0Y2ggb3BlcmF0aW9uOiBcIit0fSwxODpmdW5jdGlvbih0KXtyZXR1cm5cIlRoZSBwbHVnaW4gZm9yICdcIit0K1wiJyBoYXMgbm90IGJlZW4gbG9hZGVkIGludG8gSW1tZXIuIFRvIGVuYWJsZSB0aGUgcGx1Z2luLCBpbXBvcnQgYW5kIGNhbGwgYGVuYWJsZVwiK3QrXCIoKWAgd2hlbiBpbml0aWFsaXppbmcgeW91ciBhcHBsaWNhdGlvbi5cIn0sMjA6XCJDYW5ub3QgdXNlIHByb3hpZXMgaWYgUHJveHksIFByb3h5LnJldm9jYWJsZSBvciBSZWZsZWN0IGFyZSBub3QgYXZhaWxhYmxlXCIsMjE6ZnVuY3Rpb24odCl7cmV0dXJuXCJwcm9kdWNlIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiB0aGluZ3MgdGhhdCBhcmUgZHJhZnRhYmxlOiBwbGFpbiBvYmplY3RzLCBhcnJheXMsIE1hcCwgU2V0IG9yIGNsYXNzZXMgdGhhdCBhcmUgbWFya2VkIHdpdGggJ1tpbW1lcmFibGVdOiB0cnVlJy4gR290ICdcIit0K1wiJ1wifSwyMjpmdW5jdGlvbih0KXtyZXR1cm5cIidjdXJyZW50JyBleHBlY3RzIGEgZHJhZnQsIGdvdDogXCIrdH0sMjM6ZnVuY3Rpb24odCl7cmV0dXJuXCInb3JpZ2luYWwnIGV4cGVjdHMgYSBkcmFmdCwgZ290OiBcIit0fSwyNDpcIlBhdGNoaW5nIHJlc2VydmVkIGF0dHJpYnV0ZXMgbGlrZSBfX3Byb3RvX18sIHByb3RvdHlwZSBhbmQgY29uc3RydWN0b3IgaXMgbm90IGFsbG93ZWRcIn0sWj1cInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5vd25LZXlzP1JlZmxlY3Qub3duS2V5czp2b2lkIDAhPT1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP2Z1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0KSl9Ok9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLHR0PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzfHxmdW5jdGlvbih0KXt2YXIgbj17fTtyZXR1cm4gWih0KS5mb3JFYWNoKChmdW5jdGlvbihyKXtuW3JdPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKX0pKSxufSxudD17fSxydD17Z2V0OmZ1bmN0aW9uKHQsbil7aWYobj09PVEpcmV0dXJuIHQ7dmFyIGU9cCh0KTtpZighdShlLG4pKXJldHVybiBmdW5jdGlvbih0LG4scil7dmFyIGUsaT1JKG4scik7cmV0dXJuIGk/XCJ2YWx1ZVwiaW4gaT9pLnZhbHVlOm51bGw9PT0oZT1pLmdldCl8fHZvaWQgMD09PWU/dm9pZCAwOmUuY2FsbCh0LmspOnZvaWQgMH0odCxlLG4pO3ZhciBpPWVbbl07cmV0dXJuIHQuSXx8IXIoaSk/aTppPT09eih0LnQsbik/KEUodCksdC5vW25dPVIodC5BLmgsaSx0KSk6aX0saGFzOmZ1bmN0aW9uKHQsbil7cmV0dXJuIG4gaW4gcCh0KX0sb3duS2V5czpmdW5jdGlvbih0KXtyZXR1cm4gUmVmbGVjdC5vd25LZXlzKHAodCkpfSxzZXQ6ZnVuY3Rpb24odCxuLHIpe3ZhciBlPUkocCh0KSxuKTtpZihudWxsPT1lP3ZvaWQgMDplLnNldClyZXR1cm4gZS5zZXQuY2FsbCh0LmssciksITA7aWYoIXQuUCl7dmFyIGk9eihwKHQpLG4pLG89bnVsbD09aT92b2lkIDA6aVtRXTtpZihvJiZvLnQ9PT1yKXJldHVybiB0Lm9bbl09cix0LkRbbl09ITEsITA7aWYoYyhyLGkpJiYodm9pZCAwIT09cnx8dSh0LnQsbikpKXJldHVybiEwO0UodCksayh0KX1yZXR1cm4gdC5vW25dPXIsdC5EW25dPSEwLCEwfSxkZWxldGVQcm9wZXJ0eTpmdW5jdGlvbih0LG4pe3JldHVybiB2b2lkIDAhPT16KHQudCxuKXx8biBpbiB0LnQ/KHQuRFtuXT0hMSxFKHQpLGsodCkpOmRlbGV0ZSB0LkRbbl0sdC5vJiZkZWxldGUgdC5vW25dLCEwfSxnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ZnVuY3Rpb24odCxuKXt2YXIgcj1wKHQpLGU9UmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocixuKTtyZXR1cm4gZT97d3JpdGFibGU6ITAsY29uZmlndXJhYmxlOjEhPT10Lml8fFwibGVuZ3RoXCIhPT1uLGVudW1lcmFibGU6ZS5lbnVtZXJhYmxlLHZhbHVlOnJbbl19OmV9LGRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKCl7dCgxMSl9LGdldFByb3RvdHlwZU9mOmZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodC50KX0sc2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24oKXt0KDEyKX19LGV0PXt9O2kocnQsKGZ1bmN0aW9uKHQsbil7ZXRbdF09ZnVuY3Rpb24oKXtyZXR1cm4gYXJndW1lbnRzWzBdPWFyZ3VtZW50c1swXVswXSxuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KSksZXQuZGVsZXRlUHJvcGVydHk9ZnVuY3Rpb24obixyKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZpc05hTihwYXJzZUludChyKSkmJnQoMTMpLHJ0LmRlbGV0ZVByb3BlcnR5LmNhbGwodGhpcyxuWzBdLHIpfSxldC5zZXQ9ZnVuY3Rpb24obixyLGUpe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwibGVuZ3RoXCIhPT1yJiZpc05hTihwYXJzZUludChyKSkmJnQoMTQpLHJ0LnNldC5jYWxsKHRoaXMsblswXSxyLGUsblswXSl9O3ZhciBpdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7dGhpcy5PPUIsdGhpcy5OPSEwLFwiYm9vbGVhblwiPT10eXBlb2YobnVsbD09dD92b2lkIDA6dC51c2VQcm94aWVzKSYmdGhpcy5zZXRVc2VQcm94aWVzKHQudXNlUHJveGllcyksXCJib29sZWFuXCI9PXR5cGVvZihudWxsPT10P3ZvaWQgMDp0LmF1dG9GcmVlemUpJiZ0aGlzLnNldEF1dG9GcmVlemUodC5hdXRvRnJlZXplKSx0aGlzLnByb2R1Y2U9dGhpcy5wcm9kdWNlLmJpbmQodGhpcyksdGhpcy5wcm9kdWNlV2l0aFBhdGNoZXM9dGhpcy5wcm9kdWNlV2l0aFBhdGNoZXMuYmluZCh0aGlzKX12YXIgaT1lLnByb3RvdHlwZTtyZXR1cm4gaS5wcm9kdWNlPWZ1bmN0aW9uKG4sZSxpKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXt2YXIgbz1lO2U9bjt2YXIgdT10aGlzO3JldHVybiBmdW5jdGlvbih0KXt2YXIgbj10aGlzO3ZvaWQgMD09PXQmJih0PW8pO2Zvcih2YXIgcj1hcmd1bWVudHMubGVuZ3RoLGk9QXJyYXkocj4xP3ItMTowKSxhPTE7YTxyO2ErKylpW2EtMV09YXJndW1lbnRzW2FdO3JldHVybiB1LnByb2R1Y2UodCwoZnVuY3Rpb24odCl7dmFyIHI7cmV0dXJuKHI9ZSkuY2FsbC5hcHBseShyLFtuLHRdLmNvbmNhdChpKSl9KSl9fXZhciBhO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJnQoNiksdm9pZCAwIT09aSYmXCJmdW5jdGlvblwiIT10eXBlb2YgaSYmdCg3KSxyKG4pKXt2YXIgZj1PKHRoaXMpLGM9Uih0aGlzLG4sdm9pZCAwKSxzPSEwO3RyeXthPWUoYykscz0hMX1maW5hbGx5e3M/ZyhmKTp3KGYpfXJldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm9taXNlJiZhIGluc3RhbmNlb2YgUHJvbWlzZT9hLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBqKGYsaSksUCh0LGYpfSksKGZ1bmN0aW9uKHQpe3Rocm93IGcoZiksdH0pKTooaihmLGkpLFAoYSxmKSl9aWYoIW58fFwib2JqZWN0XCIhPXR5cGVvZiBuKXtpZigoYT1lKG4pKT09PUgpcmV0dXJuO3JldHVybiB2b2lkIDA9PT1hJiYoYT1uKSx0aGlzLk4mJmQoYSwhMCksYX10KDIxLG4pfSxpLnByb2R1Y2VXaXRoUGF0Y2hlcz1mdW5jdGlvbih0LG4pe3ZhciByLGUsaT10aGlzO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/ZnVuY3Rpb24obil7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsZT1BcnJheShyPjE/ci0xOjApLG89MTtvPHI7bysrKWVbby0xXT1hcmd1bWVudHNbb107cmV0dXJuIGkucHJvZHVjZVdpdGhQYXRjaGVzKG4sKGZ1bmN0aW9uKG4pe3JldHVybiB0LmFwcGx5KHZvaWQgMCxbbl0uY29uY2F0KGUpKX0pKX06W3RoaXMucHJvZHVjZSh0LG4sKGZ1bmN0aW9uKHQsbil7cj10LGU9bn0pKSxyLGVdfSxpLmNyZWF0ZURyYWZ0PWZ1bmN0aW9uKGUpe3IoZSl8fHQoOCksbihlKSYmKGU9RChlKSk7dmFyIGk9Tyh0aGlzKSxvPVIodGhpcyxlLHZvaWQgMCk7cmV0dXJuIG9bUV0uQz0hMCx3KGkpLG99LGkuZmluaXNoRHJhZnQ9ZnVuY3Rpb24obixyKXt2YXIgZT1uJiZuW1FdO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihlJiZlLkN8fHQoOSksZS5JJiZ0KDEwKSk7dmFyIGk9ZS5BO3JldHVybiBqKGksciksUCh2b2lkIDAsaSl9LGkuc2V0QXV0b0ZyZWV6ZT1mdW5jdGlvbih0KXt0aGlzLk49dH0saS5zZXRVc2VQcm94aWVzPWZ1bmN0aW9uKG4pe24mJiFCJiZ0KDIwKSx0aGlzLk89bn0saS5hcHBseVBhdGNoZXM9ZnVuY3Rpb24odCxyKXt2YXIgZTtmb3IoZT1yLmxlbmd0aC0xO2U+PTA7ZS0tKXt2YXIgaT1yW2VdO2lmKDA9PT1pLnBhdGgubGVuZ3RoJiZcInJlcGxhY2VcIj09PWkub3Ape3Q9aS52YWx1ZTticmVha319dmFyIG89YihcIlBhdGNoZXNcIikuJDtyZXR1cm4gbih0KT9vKHQscik6dGhpcy5wcm9kdWNlKHQsKGZ1bmN0aW9uKHQpe3JldHVybiBvKHQsci5zbGljZShlKzEpKX0pKX0sZX0oKSxvdD1uZXcgaXQsdXQ9b3QucHJvZHVjZSxhdD1vdC5wcm9kdWNlV2l0aFBhdGNoZXMuYmluZChvdCksZnQ9b3Quc2V0QXV0b0ZyZWV6ZS5iaW5kKG90KSxjdD1vdC5zZXRVc2VQcm94aWVzLmJpbmQob3QpLHN0PW90LmFwcGx5UGF0Y2hlcy5iaW5kKG90KSx2dD1vdC5jcmVhdGVEcmFmdC5iaW5kKG90KSxwdD1vdC5maW5pc2hEcmFmdC5iaW5kKG90KTtleHBvcnQgZGVmYXVsdCB1dDtleHBvcnR7aXQgYXMgSW1tZXIsc3QgYXMgYXBwbHlQYXRjaGVzLEsgYXMgY2FzdERyYWZ0LCQgYXMgY2FzdEltbXV0YWJsZSx2dCBhcyBjcmVhdGVEcmFmdCxEIGFzIGN1cnJlbnQsSiBhcyBlbmFibGVBbGxQbHVnaW5zLFQgYXMgZW5hYmxlRVM1LEMgYXMgZW5hYmxlTWFwU2V0LEYgYXMgZW5hYmxlUGF0Y2hlcyxwdCBhcyBmaW5pc2hEcmFmdCxkIGFzIGZyZWV6ZSxMIGFzIGltbWVyYWJsZSxuIGFzIGlzRHJhZnQsciBhcyBpc0RyYWZ0YWJsZSxIIGFzIG5vdGhpbmcsZSBhcyBvcmlnaW5hbCx1dCBhcyBwcm9kdWNlLGF0IGFzIHByb2R1Y2VXaXRoUGF0Y2hlcyxmdCBhcyBzZXRBdXRvRnJlZXplLGN0IGFzIHNldFVzZVByb3hpZXN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1tZXIuZXNtLmpzLm1hcFxuIiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBjdXJyZW50TGlzdGVuZXJzID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gJyArICdIYXZlIHlvdSBtaXNzcGVsbGVkIGEgY29uc3RhbnQ/Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjsgLy8gVGhpcyBhY3Rpb24gaGFzIGEgc2ltaWxpYXIgZWZmZWN0IHRvIEFjdGlvblR5cGVzLklOSVQuXG4gICAgLy8gQW55IHJlZHVjZXJzIHRoYXQgZXhpc3RlZCBpbiBib3RoIHRoZSBuZXcgYW5kIG9sZCByb290UmVkdWNlclxuICAgIC8vIHdpbGwgcmVjZWl2ZSB0aGUgcHJldmlvdXMgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gICAgLy8gdGhlIG5ldyBzdGF0ZSB0cmVlIHdpdGggYW55IHJlbGV2YW50IGRhdGEgZnJvbSB0aGUgb2xkIG9uZS5cblxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgXCJhY3Rpb24gXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgfHwgJ2FuIGFjdGlvbic7XG4gIHJldHVybiBcIkdpdmVuIFwiICsgYWN0aW9uRGVzY3JpcHRpb24gKyBcIiwgcmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCI7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlIFwiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7IC8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgd2FybiBhYm91dCB0aGUgc2FtZVxuICAvLyBrZXlzIG11bHRpcGxlIHRpbWVzLlxuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGg7XG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYW4gYWN0aW9uIGNyZWF0b3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGRpc3BhdGNoIHdyYXBwZWQgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkIFwiICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArIFwiLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSk7XG4gIH1cblxuICBpZiAoZW51bWVyYWJsZU9ubHkpIGtleXMgPSBrZXlzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gIH0pO1xuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcywgYXBwbHlNaWRkbGV3YXJlLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGNvbWJpbmVSZWR1Y2VycywgY29tcG9zZSwgY3JlYXRlU3RvcmUgfTtcbiIsImZ1bmN0aW9uIGRlZmF1bHRFcXVhbGl0eUNoZWNrKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5cbmZ1bmN0aW9uIGFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsKGVxdWFsaXR5Q2hlY2ssIHByZXYsIG5leHQpIHtcbiAgaWYgKHByZXYgPT09IG51bGwgfHwgbmV4dCA9PT0gbnVsbCB8fCBwcmV2Lmxlbmd0aCAhPT0gbmV4dC5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBEbyB0aGlzIGluIGEgZm9yIGxvb3AgKGFuZCBub3QgYSBgZm9yRWFjaGAgb3IgYW4gYGV2ZXJ5YCkgc28gd2UgY2FuIGRldGVybWluZSBlcXVhbGl0eSBhcyBmYXN0IGFzIHBvc3NpYmxlLlxuICB2YXIgbGVuZ3RoID0gcHJldi5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWVxdWFsaXR5Q2hlY2socHJldltpXSwgbmV4dFtpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZW1vaXplKGZ1bmMpIHtcbiAgdmFyIGVxdWFsaXR5Q2hlY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGRlZmF1bHRFcXVhbGl0eUNoZWNrO1xuXG4gIHZhciBsYXN0QXJncyA9IG51bGw7XG4gIHZhciBsYXN0UmVzdWx0ID0gbnVsbDtcbiAgLy8gd2UgcmVmZXJlbmNlIGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyB0aGVtIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFhcmVBcmd1bWVudHNTaGFsbG93bHlFcXVhbChlcXVhbGl0eUNoZWNrLCBsYXN0QXJncywgYXJndW1lbnRzKSkge1xuICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgIGxhc3RSZXN1bHQgPSBmdW5jLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERlcGVuZGVuY2llcyhmdW5jcykge1xuICB2YXIgZGVwZW5kZW5jaWVzID0gQXJyYXkuaXNBcnJheShmdW5jc1swXSkgPyBmdW5jc1swXSA6IGZ1bmNzO1xuXG4gIGlmICghZGVwZW5kZW5jaWVzLmV2ZXJ5KGZ1bmN0aW9uIChkZXApIHtcbiAgICByZXR1cm4gdHlwZW9mIGRlcCA9PT0gJ2Z1bmN0aW9uJztcbiAgfSkpIHtcbiAgICB2YXIgZGVwZW5kZW5jeVR5cGVzID0gZGVwZW5kZW5jaWVzLm1hcChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGRlcDtcbiAgICB9KS5qb2luKCcsICcpO1xuICAgIHRocm93IG5ldyBFcnJvcignU2VsZWN0b3IgY3JlYXRvcnMgZXhwZWN0IGFsbCBpbnB1dC1zZWxlY3RvcnMgdG8gYmUgZnVuY3Rpb25zLCAnICsgKCdpbnN0ZWFkIHJlY2VpdmVkIHRoZSBmb2xsb3dpbmcgdHlwZXM6IFsnICsgZGVwZW5kZW5jeVR5cGVzICsgJ10nKSk7XG4gIH1cblxuICByZXR1cm4gZGVwZW5kZW5jaWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JDcmVhdG9yKG1lbW9pemUpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1lbW9pemVPcHRpb25zID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1lbW9pemVPcHRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBmdW5jc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHZhciByZWNvbXB1dGF0aW9ucyA9IDA7XG4gICAgdmFyIHJlc3VsdEZ1bmMgPSBmdW5jcy5wb3AoKTtcbiAgICB2YXIgZGVwZW5kZW5jaWVzID0gZ2V0RGVwZW5kZW5jaWVzKGZ1bmNzKTtcblxuICAgIHZhciBtZW1vaXplZFJlc3VsdEZ1bmMgPSBtZW1vaXplLmFwcGx5KHVuZGVmaW5lZCwgW2Z1bmN0aW9uICgpIHtcbiAgICAgIHJlY29tcHV0YXRpb25zKys7XG4gICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgcmV0dXJuIHJlc3VsdEZ1bmMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XS5jb25jYXQobWVtb2l6ZU9wdGlvbnMpKTtcblxuICAgIC8vIElmIGEgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIGV4YWN0IHNhbWUgYXJndW1lbnRzIHdlIGRvbid0IG5lZWQgdG8gdHJhdmVyc2Ugb3VyIGRlcGVuZGVuY2llcyBhZ2Fpbi5cbiAgICB2YXIgc2VsZWN0b3IgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJhbXMgPSBbXTtcbiAgICAgIHZhciBsZW5ndGggPSBkZXBlbmRlbmNpZXMubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBhbmQgbXV0YXRlIGEgbG9jYWwgbGlzdCBvZiBwYXJhbXMgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgICBwYXJhbXMucHVzaChkZXBlbmRlbmNpZXNbaV0uYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICByZXR1cm4gbWVtb2l6ZWRSZXN1bHRGdW5jLmFwcGx5KG51bGwsIHBhcmFtcyk7XG4gICAgfSk7XG5cbiAgICBzZWxlY3Rvci5yZXN1bHRGdW5jID0gcmVzdWx0RnVuYztcbiAgICBzZWxlY3Rvci5kZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXM7XG4gICAgc2VsZWN0b3IucmVjb21wdXRhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVjb21wdXRhdGlvbnM7XG4gICAgfTtcbiAgICBzZWxlY3Rvci5yZXNldFJlY29tcHV0YXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlY29tcHV0YXRpb25zID0gMDtcbiAgICB9O1xuICAgIHJldHVybiBzZWxlY3RvcjtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBjcmVhdGVTZWxlY3RvciA9IGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcihkZWZhdWx0TWVtb2l6ZSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3Ioc2VsZWN0b3JzKSB7XG4gIHZhciBzZWxlY3RvckNyZWF0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGNyZWF0ZVNlbGVjdG9yO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0b3JzICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBFcnJvcignY3JlYXRlU3RydWN0dXJlZFNlbGVjdG9yIGV4cGVjdHMgZmlyc3QgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0ICcgKyAoJ3doZXJlIGVhY2ggcHJvcGVydHkgaXMgYSBzZWxlY3RvciwgaW5zdGVhZCByZWNlaXZlZCBhICcgKyB0eXBlb2Ygc2VsZWN0b3JzKSk7XG4gIH1cbiAgdmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyhzZWxlY3RvcnMpO1xuICByZXR1cm4gc2VsZWN0b3JDcmVhdG9yKG9iamVjdEtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gc2VsZWN0b3JzW2tleV07XG4gIH0pLCBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCB2YWx1ZXMgPSBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgdmFsdWVzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlcy5yZWR1Y2UoZnVuY3Rpb24gKGNvbXBvc2l0aW9uLCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIGNvbXBvc2l0aW9uW29iamVjdEtleXNbaW5kZXhdXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIGNvbXBvc2l0aW9uO1xuICAgIH0sIHt9KTtcbiAgfSk7XG59IiwiaW1wb3J0IGNyZWF0ZU5leHRTdGF0ZSwgeyBpc0RyYWZ0LCBjdXJyZW50LCBpc0RyYWZ0YWJsZSwgZW5hYmxlRVM1IH0gZnJvbSAnaW1tZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjcmVhdGVOZXh0U3RhdGUsIGN1cnJlbnQsIGZyZWV6ZSB9IGZyb20gJ2ltbWVyJztcbmltcG9ydCB7IGNvbXBvc2UsIGNvbWJpbmVSZWR1Y2VycywgYXBwbHlNaWRkbGV3YXJlLCBjcmVhdGVTdG9yZSB9IGZyb20gJ3JlZHV4JztcbmV4cG9ydCAqIGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSAncmVzZWxlY3QnO1xuZXhwb3J0IHsgY3JlYXRlU2VsZWN0b3IgfSBmcm9tICdyZXNlbGVjdCc7XG5pbXBvcnQgdGh1bmtNaWRkbGV3YXJlIGZyb20gJ3JlZHV4LXRodW5rJztcblxuLyoqXHJcbiAqIFwiRHJhZnQtU2FmZVwiIHZlcnNpb24gb2YgYHJlc2VsZWN0YCdzIGBjcmVhdGVTZWxlY3RvcmA6XHJcbiAqIElmIGFuIGBpbW1lcmAtZHJhZnRlZCBvYmplY3QgaXMgcGFzc2VkIGludG8gdGhlIHJlc3VsdGluZyBzZWxlY3RvcidzIGZpcnN0IGFyZ3VtZW50LFxyXG4gKiB0aGUgc2VsZWN0b3Igd2lsbCBhY3Qgb24gdGhlIGN1cnJlbnQgZHJhZnQgdmFsdWUsIGluc3RlYWQgb2YgcmV0dXJuaW5nIGEgY2FjaGVkIHZhbHVlXHJcbiAqIHRoYXQgbWlnaHQgYmUgcG9zc2libHkgb3V0ZGF0ZWQgaWYgdGhlIGRyYWZ0IGhhcyBiZWVuIG1vZGlmaWVkIHNpbmNlLlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG52YXIgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IgPSBmdW5jdGlvbiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcigpIHtcbiAgdmFyIHNlbGVjdG9yID0gY3JlYXRlU2VsZWN0b3IuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gIHZhciB3cmFwcGVkU2VsZWN0b3IgPSBmdW5jdGlvbiB3cmFwcGVkU2VsZWN0b3IodmFsdWUpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICByZXN0W19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZWN0b3IuYXBwbHkodm9pZCAwLCBbaXNEcmFmdCh2YWx1ZSkgPyBjdXJyZW50KHZhbHVlKSA6IHZhbHVlXS5jb25jYXQocmVzdCkpO1xuICB9O1xuXG4gIHJldHVybiB3cmFwcGVkU2VsZWN0b3I7XG59O1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbmZ1bmN0aW9uIGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlO1xuXG4gIHRyeSB7XG4gICAgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgaWYgKGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7XG4gICAgX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0O1xuICB9IGVsc2Uge1xuICAgIF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgICAgIHZhciBhID0gW251bGxdO1xuICAgICAgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpO1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpO1xuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICBpZiAoQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkO1xuXG4gIF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gICAgaWYgKENsYXNzID09PSBudWxsIHx8ICFfaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzcztcblxuICAgIGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTtcblxuICAgICAgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gV3JhcHBlcigpIHtcbiAgICAgIHJldHVybiBfY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG4gICAgV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IFdyYXBwZXIsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7XG4gIH07XG5cbiAgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xufVxuXG4vKipcclxuICogQHB1YmxpY1xyXG4gKi9cblxudmFyIGNvbXBvc2VXaXRoRGV2VG9vbHMgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fID8gd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyA6IGZ1bmN0aW9uICgpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1bmRlZmluZWQ7XG4gIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnb2JqZWN0JykgcmV0dXJuIGNvbXBvc2U7XG4gIHJldHVybiBjb21wb3NlLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwYXNzZWQgdmFsdWUgaXMgXCJwbGFpblwiIG9iamVjdCwgaS5lLiBhbiBvYmplY3Qgd2hvc2VcclxuICogcHJvdG95cGUgaXMgdGhlIHJvb3QgYE9iamVjdC5wcm90b3R5cGVgLiBUaGlzIGluY2x1ZGVzIG9iamVjdHMgY3JlYXRlZFxyXG4gKiB1c2luZyBvYmplY3QgbGl0ZXJhbHMsIGJ1dCBub3QgZm9yIGluc3RhbmNlIGZvciBjbGFzcyBpbnN0YW5jZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cclxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IHZhbHVlO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSkgPT09IHByb3RvO1xufVxuXG5mdW5jdGlvbiBnZXRUaW1lTWVhc3VyZVV0aWxzKG1heERlbGF5LCBmbk5hbWUpIHtcbiAgdmFyIGVsYXBzZWQgPSAwO1xuICByZXR1cm4ge1xuICAgIG1lYXN1cmVUaW1lOiBmdW5jdGlvbiBtZWFzdXJlVGltZShmbikge1xuICAgICAgdmFyIHN0YXJ0ZWQgPSBEYXRlLm5vdygpO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHZhciBmaW5pc2hlZCA9IERhdGUubm93KCk7XG4gICAgICAgIGVsYXBzZWQgKz0gZmluaXNoZWQgLSBzdGFydGVkO1xuICAgICAgfVxuICAgIH0sXG4gICAgd2FybklmRXhjZWVkZWQ6IGZ1bmN0aW9uIHdhcm5JZkV4Y2VlZGVkKCkge1xuICAgICAgaWYgKGVsYXBzZWQgPiBtYXhEZWxheSkge1xuICAgICAgICBjb25zb2xlLndhcm4oZm5OYW1lICsgXCIgdG9vayBcIiArIGVsYXBzZWQgKyBcIm1zLCB3aGljaCBpcyBtb3JlIHRoYW4gdGhlIHdhcm5pbmcgdGhyZXNob2xkIG9mIFwiICsgbWF4RGVsYXkgKyBcIm1zLiBcXG5JZiB5b3VyIHN0YXRlIG9yIGFjdGlvbnMgYXJlIHZlcnkgbGFyZ2UsIHlvdSBtYXkgd2FudCB0byBkaXNhYmxlIHRoZSBtaWRkbGV3YXJlIGFzIGl0IG1pZ2h0IGNhdXNlIHRvbyBtdWNoIG9mIGEgc2xvd2Rvd24gaW4gZGV2ZWxvcG1lbnQgbW9kZS4gU2VlIGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvYXBpL2dldERlZmF1bHRNaWRkbGV3YXJlIGZvciBpbnN0cnVjdGlvbnMuXFxuSXQgaXMgZGlzYWJsZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMsIHNvIHlvdSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoYXQuXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbi8qKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG52YXIgTWlkZGxld2FyZUFycmF5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQXJyYXkpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWlkZGxld2FyZUFycmF5LCBfQXJyYXkpO1xuXG4gIGZ1bmN0aW9uIE1pZGRsZXdhcmVBcnJheSgpIHtcbiAgICByZXR1cm4gX0FycmF5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNaWRkbGV3YXJlQXJyYXkucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgdmFyIF9BcnJheSRwcm90b3R5cGUkY29uYztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcnIgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcnJbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9jb25zdHJ1Y3QoTWlkZGxld2FyZUFycmF5LCAoX0FycmF5JHByb3RvdHlwZSRjb25jID0gX0FycmF5LnByb3RvdHlwZS5jb25jYXQpLmNhbGwuYXBwbHkoX0FycmF5JHByb3RvdHlwZSRjb25jLCBbdGhpc10uY29uY2F0KGFycikpKTtcbiAgfTtcblxuICBfcHJvdG8ucHJlcGVuZCA9IGZ1bmN0aW9uIHByZXBlbmQoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcnIgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFycltfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIGlmIChhcnIubGVuZ3RoID09PSAxICYmIEFycmF5LmlzQXJyYXkoYXJyWzBdKSkge1xuICAgICAgcmV0dXJuIF9jb25zdHJ1Y3QoTWlkZGxld2FyZUFycmF5LCBhcnJbMF0uY29uY2F0KHRoaXMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2NvbnN0cnVjdChNaWRkbGV3YXJlQXJyYXksIGFyci5jb25jYXQodGhpcykpO1xuICB9O1xuXG4gIHJldHVybiBNaWRkbGV3YXJlQXJyYXk7XG59KFxuLyojX19QVVJFX18qL1xuX3dyYXBOYXRpdmVTdXBlcihBcnJheSkpO1xuXG52YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7IC8vIFRocm93IGFuIGVycm9yIGlmIHRoZSBjb25kaXRpb24gZmFpbHNcbi8vIFN0cmlwIG91dCBlcnJvciBtZXNzYWdlcyBmb3IgcHJvZHVjdGlvblxuLy8gPiBOb3QgcHJvdmlkaW5nIGFuIGlubGluZSBkZWZhdWx0IGFyZ3VtZW50IGZvciBtZXNzYWdlIGFzIHRoZSByZXN1bHQgaXMgc21hbGxlclxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmIChjb25kaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH0gLy8gQ29uZGl0aW9uIG5vdCBwYXNzZWRcbiAgLy8gSW4gcHJvZHVjdGlvbiB3ZSBzdHJpcCB0aGUgbWVzc2FnZSBidXQgc3RpbGwgdGhyb3dcblxuXG4gIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgfSAvLyBXaGVuIG5vdCBpbiBwcm9kdWN0aW9uIHdlIGFsbG93IHRoZSBtZXNzYWdlIHRvIHBhc3MgdGhyb3VnaFxuICAvLyAqVGhpcyBibG9jayB3aWxsIGJlIHJlbW92ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMqXG5cblxuICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KG9iaiwgc2VyaWFsaXplciwgaW5kZW50LCBkZWN5Y2xlcikge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCBnZXRTZXJpYWxpemUoc2VyaWFsaXplciwgZGVjeWNsZXIpLCBpbmRlbnQpO1xufVxuXG5mdW5jdGlvbiBnZXRTZXJpYWxpemUoc2VyaWFsaXplciwgZGVjeWNsZXIpIHtcbiAgdmFyIHN0YWNrID0gW10sXG4gICAgICBrZXlzID0gW107XG4gIGlmICghZGVjeWNsZXIpIGRlY3ljbGVyID0gZnVuY3Rpb24gZGVjeWNsZXIoXywgdmFsdWUpIHtcbiAgICBpZiAoc3RhY2tbMF0gPT09IHZhbHVlKSByZXR1cm4gJ1tDaXJjdWxhciB+XSc7XG4gICAgcmV0dXJuICdbQ2lyY3VsYXIgfi4nICsga2V5cy5zbGljZSgwLCBzdGFjay5pbmRleE9mKHZhbHVlKSkuam9pbignLicpICsgJ10nO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgdmFyIHRoaXNQb3MgPSBzdGFjay5pbmRleE9mKHRoaXMpO1xuICAgICAgfnRoaXNQb3MgPyBzdGFjay5zcGxpY2UodGhpc1BvcyArIDEpIDogc3RhY2sucHVzaCh0aGlzKTtcbiAgICAgIH50aGlzUG9zID8ga2V5cy5zcGxpY2UodGhpc1BvcywgSW5maW5pdHksIGtleSkgOiBrZXlzLnB1c2goa2V5KTtcbiAgICAgIGlmICh+c3RhY2suaW5kZXhPZih2YWx1ZSkpIHZhbHVlID0gZGVjeWNsZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICB9IGVsc2Ugc3RhY2sucHVzaCh2YWx1ZSk7XG5cbiAgICByZXR1cm4gc2VyaWFsaXplciA9PSBudWxsID8gdmFsdWUgOiBzZXJpYWxpemVyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gIH07XG59XG4vKipcclxuICogVGhlIGRlZmF1bHQgYGlzSW1tdXRhYmxlYCBmdW5jdGlvbi5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuXG5mdW5jdGlvbiBpc0ltbXV0YWJsZURlZmF1bHQodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcbn1cbmZ1bmN0aW9uIHRyYWNrRm9yTXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqKSB7XG4gIHZhciB0cmFja2VkUHJvcGVydGllcyA9IHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaik7XG4gIHJldHVybiB7XG4gICAgZGV0ZWN0TXV0YXRpb25zOiBmdW5jdGlvbiBkZXRlY3RNdXRhdGlvbnMoKSB7XG4gICAgICByZXR1cm4gX2RldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIHRyYWNrZWRQcm9wZXJ0aWVzLCBvYmopO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqLCBwYXRoKSB7XG4gIGlmIChpZ25vcmVQYXRocyA9PT0gdm9pZCAwKSB7XG4gICAgaWdub3JlUGF0aHMgPSBbXTtcbiAgfVxuXG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gW107XG4gIH1cblxuICB2YXIgdHJhY2tlZCA9IHtcbiAgICB2YWx1ZTogb2JqXG4gIH07XG5cbiAgaWYgKCFpc0ltbXV0YWJsZShvYmopKSB7XG4gICAgdHJhY2tlZC5jaGlsZHJlbiA9IHt9O1xuXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgdmFyIGNoaWxkUGF0aCA9IHBhdGguY29uY2F0KGtleSk7XG5cbiAgICAgIGlmIChpZ25vcmVQYXRocy5sZW5ndGggJiYgaWdub3JlUGF0aHMuaW5kZXhPZihjaGlsZFBhdGguam9pbignLicpKSAhPT0gLTEpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHRyYWNrZWQuY2hpbGRyZW5ba2V5XSA9IHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9ialtrZXldLCBjaGlsZFBhdGgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cmFja2VkO1xufVxuXG5mdW5jdGlvbiBfZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgdHJhY2tlZFByb3BlcnR5LCBvYmosIHNhbWVQYXJlbnRSZWYsIHBhdGgpIHtcbiAgaWYgKGlnbm9yZVBhdGhzID09PSB2b2lkIDApIHtcbiAgICBpZ25vcmVQYXRocyA9IFtdO1xuICB9XG5cbiAgaWYgKHNhbWVQYXJlbnRSZWYgPT09IHZvaWQgMCkge1xuICAgIHNhbWVQYXJlbnRSZWYgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gW107XG4gIH1cblxuICB2YXIgcHJldk9iaiA9IHRyYWNrZWRQcm9wZXJ0eSA/IHRyYWNrZWRQcm9wZXJ0eS52YWx1ZSA6IHVuZGVmaW5lZDtcbiAgdmFyIHNhbWVSZWYgPSBwcmV2T2JqID09PSBvYmo7XG5cbiAgaWYgKHNhbWVQYXJlbnRSZWYgJiYgIXNhbWVSZWYgJiYgIU51bWJlci5pc05hTihvYmopKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdhc011dGF0ZWQ6IHRydWUsXG4gICAgICBwYXRoOiBwYXRoXG4gICAgfTtcbiAgfVxuXG4gIGlmIChpc0ltbXV0YWJsZShwcmV2T2JqKSB8fCBpc0ltbXV0YWJsZShvYmopKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdhc011dGF0ZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSAvLyBHYXRoZXIgYWxsIGtleXMgZnJvbSBwcmV2ICh0cmFja2VkKSBhbmQgYWZ0ZXIgb2Jqc1xuXG5cbiAgdmFyIGtleXNUb0RldGVjdCA9IHt9O1xuICBPYmplY3Qua2V5cyh0cmFja2VkUHJvcGVydHkuY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGtleXNUb0RldGVjdFtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5c1RvRGV0ZWN0W2tleV0gPSB0cnVlO1xuICB9KTtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhrZXlzVG9EZXRlY3QpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIHZhciBjaGlsZFBhdGggPSBwYXRoLmNvbmNhdChrZXkpO1xuXG4gICAgaWYgKGlnbm9yZVBhdGhzLmxlbmd0aCAmJiBpZ25vcmVQYXRocy5pbmRleE9mKGNoaWxkUGF0aC5qb2luKCcuJykpICE9PSAtMSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IF9kZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCB0cmFja2VkUHJvcGVydHkuY2hpbGRyZW5ba2V5XSwgb2JqW2tleV0sIHNhbWVSZWYsIGNoaWxkUGF0aCk7XG5cbiAgICBpZiAocmVzdWx0Lndhc011dGF0ZWQpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3YXNNdXRhdGVkOiBmYWxzZVxuICB9O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtaWRkbGV3YXJlIHRoYXQgY2hlY2tzIHdoZXRoZXIgYW55IHN0YXRlIHdhcyBtdXRhdGVkIGluIGJldHdlZW5cclxuICogZGlzcGF0Y2hlcyBvciBkdXJpbmcgYSBkaXNwYXRjaC4gSWYgYW55IG11dGF0aW9ucyBhcmUgZGV0ZWN0ZWQsIGFuIGVycm9yIGlzXHJcbiAqIHRocm93bi5cclxuICpcclxuICogQHBhcmFtIG9wdGlvbnMgTWlkZGxld2FyZSBvcHRpb25zLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJGlzSW1tdXRhYmxlID0gX29wdGlvbnMuaXNJbW11dGFibGUsXG4gICAgICBpc0ltbXV0YWJsZSA9IF9vcHRpb25zJGlzSW1tdXRhYmxlID09PSB2b2lkIDAgPyBpc0ltbXV0YWJsZURlZmF1bHQgOiBfb3B0aW9ucyRpc0ltbXV0YWJsZSxcbiAgICAgIGlnbm9yZWRQYXRocyA9IF9vcHRpb25zLmlnbm9yZWRQYXRocyxcbiAgICAgIF9vcHRpb25zJHdhcm5BZnRlciA9IF9vcHRpb25zLndhcm5BZnRlcixcbiAgICAgIHdhcm5BZnRlciA9IF9vcHRpb25zJHdhcm5BZnRlciA9PT0gdm9pZCAwID8gMzIgOiBfb3B0aW9ucyR3YXJuQWZ0ZXIsXG4gICAgICBpZ25vcmUgPSBfb3B0aW9ucy5pZ25vcmU7IC8vIEFsaWFzIGlnbm9yZS0+aWdub3JlZFBhdGhzLCBidXQgcHJlZmVyIGlnbm9yZWRQYXRocyBpZiBwcmVzZW50XG5cbiAgaWdub3JlZFBhdGhzID0gaWdub3JlZFBhdGhzIHx8IGlnbm9yZTtcbiAgdmFyIHRyYWNrID0gdHJhY2tGb3JNdXRhdGlvbnMuYmluZChudWxsLCBpc0ltbXV0YWJsZSwgaWdub3JlZFBhdGhzKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICB2YXIgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgIHZhciB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB2YXIgbWVhc3VyZVV0aWxzID0gZ2V0VGltZU1lYXN1cmVVdGlscyh3YXJuQWZ0ZXIsICdJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUnKTtcbiAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGF0ZSA9IGdldFN0YXRlKCk7XG4gICAgICAgICAgcmVzdWx0ID0gdHJhY2tlci5kZXRlY3RNdXRhdGlvbnMoKTsgLy8gVHJhY2sgYmVmb3JlIHBvdGVudGlhbGx5IG5vdCBtZWV0aW5nIHRoZSBpbnZhcmlhbnRcblxuICAgICAgICAgIHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XG4gICAgICAgICAgISFyZXN1bHQud2FzTXV0YXRlZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBIHN0YXRlIG11dGF0aW9uIHdhcyBkZXRlY3RlZCBiZXR3ZWVuIGRpc3BhdGNoZXMsIGluIHRoZSBwYXRoICdcIiArIChyZXN1bHQucGF0aCB8fCBbXSkuam9pbignLicpICsgXCInLiAgVGhpcyBtYXkgY2F1c2UgaW5jb3JyZWN0IGJlaGF2aW9yLiAoaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHJvdWJsZXNob290aW5nI25ldmVyLW11dGF0ZS1yZWR1Y2VyLWFyZ3VtZW50cylcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGRpc3BhdGNoZWRBY3Rpb24gPSBuZXh0KGFjdGlvbik7XG4gICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgICAgICAgIHJlc3VsdCA9IHRyYWNrZXIuZGV0ZWN0TXV0YXRpb25zKCk7IC8vIFRyYWNrIGJlZm9yZSBwb3RlbnRpYWxseSBub3QgbWVldGluZyB0aGUgaW52YXJpYW50XG5cbiAgICAgICAgICB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xuICAgICAgICAgIHJlc3VsdC53YXNNdXRhdGVkICYmICghIXJlc3VsdC53YXNNdXRhdGVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkEgc3RhdGUgbXV0YXRpb24gd2FzIGRldGVjdGVkIGluc2lkZSBhIGRpc3BhdGNoLCBpbiB0aGUgcGF0aDogXCIgKyAocmVzdWx0LnBhdGggfHwgW10pLmpvaW4oJy4nKSArIFwiLiBUYWtlIGEgbG9vayBhdCB0aGUgcmVkdWNlcihzKSBoYW5kbGluZyB0aGUgYWN0aW9uIFwiICsgc3RyaW5naWZ5KGFjdGlvbikgKyBcIi4gKGh0dHBzOi8vcmVkdXguanMub3JnL3Ryb3VibGVzaG9vdGluZyNuZXZlci1tdXRhdGUtcmVkdWNlci1hcmd1bWVudHMpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKTtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoZWRBY3Rpb247XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHBhc3NlZCB2YWx1ZSBpcyBcInBsYWluXCIsIGkuZS4gYSB2YWx1ZSB0aGF0IGlzIGVpdGhlclxyXG4gKiBkaXJlY3RseSBKU09OLXNlcmlhbGl6YWJsZSAoYm9vbGVhbiwgbnVtYmVyLCBzdHJpbmcsIGFycmF5LCBwbGFpbiBvYmplY3QpXHJcbiAqIG9yIGB1bmRlZmluZWRgLlxyXG4gKlxyXG4gKiBAcGFyYW0gdmFsIFRoZSB2YWx1ZSB0byBjaGVjay5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuZnVuY3Rpb24gaXNQbGFpbih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnIHx8IHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsID09PSAnYm9vbGVhbicgfHwgdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgfHwgQXJyYXkuaXNBcnJheSh2YWwpIHx8IGlzUGxhaW5PYmplY3QodmFsKTtcbn1cbi8qKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5mdW5jdGlvbiBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUodmFsdWUsIHBhdGgsIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkUGF0aHMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBbXTtcbiAgfVxuXG4gIGlmIChpc1NlcmlhbGl6YWJsZSA9PT0gdm9pZCAwKSB7XG4gICAgaXNTZXJpYWxpemFibGUgPSBpc1BsYWluO1xuICB9XG5cbiAgaWYgKGlnbm9yZWRQYXRocyA9PT0gdm9pZCAwKSB7XG4gICAgaWdub3JlZFBhdGhzID0gW107XG4gIH1cblxuICB2YXIgZm91bmROZXN0ZWRTZXJpYWxpemFibGU7XG5cbiAgaWYgKCFpc1NlcmlhbGl6YWJsZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAga2V5UGF0aDogcGF0aC5qb2luKCcuJykgfHwgJzxyb290PicsXG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZW50cmllcyA9IGdldEVudHJpZXMgIT0gbnVsbCA/IGdldEVudHJpZXModmFsdWUpIDogT2JqZWN0LmVudHJpZXModmFsdWUpO1xuICB2YXIgaGFzSWdub3JlZFBhdGhzID0gaWdub3JlZFBhdGhzLmxlbmd0aCA+IDA7XG5cbiAgZm9yICh2YXIgX2l0ZXJhdG9yID0gZW50cmllcywgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvciksIF9pID0gMCwgX2l0ZXJhdG9yID0gX2lzQXJyYXkgPyBfaXRlcmF0b3IgOiBfaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIGlmIChfaXNBcnJheSkge1xuICAgICAgaWYgKF9pID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgX3JlZiA9IF9pdGVyYXRvcltfaSsrXTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2kgPSBfaXRlcmF0b3IubmV4dCgpO1xuICAgICAgaWYgKF9pLmRvbmUpIGJyZWFrO1xuICAgICAgX3JlZiA9IF9pLnZhbHVlO1xuICAgIH1cblxuICAgIHZhciBfcmVmMiA9IF9yZWYsXG4gICAgICAgIHByb3BlcnR5ID0gX3JlZjJbMF0sXG4gICAgICAgIG5lc3RlZFZhbHVlID0gX3JlZjJbMV07XG4gICAgdmFyIG5lc3RlZFBhdGggPSBwYXRoLmNvbmNhdChwcm9wZXJ0eSk7XG5cbiAgICBpZiAoaGFzSWdub3JlZFBhdGhzICYmIGlnbm9yZWRQYXRocy5pbmRleE9mKG5lc3RlZFBhdGguam9pbignLicpKSA+PSAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoIWlzU2VyaWFsaXphYmxlKG5lc3RlZFZhbHVlKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2V5UGF0aDogbmVzdGVkUGF0aC5qb2luKCcuJyksXG4gICAgICAgIHZhbHVlOiBuZXN0ZWRWYWx1ZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5lc3RlZFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgZm91bmROZXN0ZWRTZXJpYWxpemFibGUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUobmVzdGVkVmFsdWUsIG5lc3RlZFBhdGgsIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkUGF0aHMpO1xuXG4gICAgICBpZiAoZm91bmROZXN0ZWRTZXJpYWxpemFibGUpIHtcbiAgICAgICAgcmV0dXJuIGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWlkZGxld2FyZSB0aGF0LCBhZnRlciBldmVyeSBzdGF0ZSBjaGFuZ2UsIGNoZWNrcyBpZiB0aGUgbmV3XHJcbiAqIHN0YXRlIGlzIHNlcmlhbGl6YWJsZS4gSWYgYSBub24tc2VyaWFsaXphYmxlIHZhbHVlIGlzIGZvdW5kIHdpdGhpbiB0aGVcclxuICogc3RhdGUsIGFuIGVycm9yIGlzIHByaW50ZWQgdG8gdGhlIGNvbnNvbGUuXHJcbiAqXHJcbiAqIEBwYXJhbSBvcHRpb25zIE1pZGRsZXdhcmUgb3B0aW9ucy5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkaXNTZXJpYWxpemFiID0gX29wdGlvbnMuaXNTZXJpYWxpemFibGUsXG4gICAgICBpc1NlcmlhbGl6YWJsZSA9IF9vcHRpb25zJGlzU2VyaWFsaXphYiA9PT0gdm9pZCAwID8gaXNQbGFpbiA6IF9vcHRpb25zJGlzU2VyaWFsaXphYixcbiAgICAgIGdldEVudHJpZXMgPSBfb3B0aW9ucy5nZXRFbnRyaWVzLFxuICAgICAgX29wdGlvbnMkaWdub3JlZEFjdGlvID0gX29wdGlvbnMuaWdub3JlZEFjdGlvbnMsXG4gICAgICBpZ25vcmVkQWN0aW9ucyA9IF9vcHRpb25zJGlnbm9yZWRBY3RpbyA9PT0gdm9pZCAwID8gW10gOiBfb3B0aW9ucyRpZ25vcmVkQWN0aW8sXG4gICAgICBfb3B0aW9ucyRpZ25vcmVkQWN0aW8yID0gX29wdGlvbnMuaWdub3JlZEFjdGlvblBhdGhzLFxuICAgICAgaWdub3JlZEFjdGlvblBhdGhzID0gX29wdGlvbnMkaWdub3JlZEFjdGlvMiA9PT0gdm9pZCAwID8gWydtZXRhLmFyZyddIDogX29wdGlvbnMkaWdub3JlZEFjdGlvMixcbiAgICAgIF9vcHRpb25zJGlnbm9yZWRQYXRocyA9IF9vcHRpb25zLmlnbm9yZWRQYXRocyxcbiAgICAgIGlnbm9yZWRQYXRocyA9IF9vcHRpb25zJGlnbm9yZWRQYXRocyA9PT0gdm9pZCAwID8gW10gOiBfb3B0aW9ucyRpZ25vcmVkUGF0aHMsXG4gICAgICBfb3B0aW9ucyR3YXJuQWZ0ZXIgPSBfb3B0aW9ucy53YXJuQWZ0ZXIsXG4gICAgICB3YXJuQWZ0ZXIgPSBfb3B0aW9ucyR3YXJuQWZ0ZXIgPT09IHZvaWQgMCA/IDMyIDogX29wdGlvbnMkd2FybkFmdGVyO1xuICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlQVBJKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAoaWdub3JlZEFjdGlvbnMubGVuZ3RoICYmIGlnbm9yZWRBY3Rpb25zLmluZGV4T2YoYWN0aW9uLnR5cGUpICE9PSAtMSkge1xuICAgICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWVhc3VyZVV0aWxzID0gZ2V0VGltZU1lYXN1cmVVdGlscyh3YXJuQWZ0ZXIsICdTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUnKTtcbiAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShhY3Rpb24sIFtdLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZEFjdGlvblBhdGhzKTtcblxuICAgICAgICAgIGlmIChmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlKSB7XG4gICAgICAgICAgICB2YXIga2V5UGF0aCA9IGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUua2V5UGF0aCxcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUudmFsdWU7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQSBub24tc2VyaWFsaXphYmxlIHZhbHVlIHdhcyBkZXRlY3RlZCBpbiBhbiBhY3Rpb24sIGluIHRoZSBwYXRoOiBgXCIgKyBrZXlQYXRoICsgXCJgLiBWYWx1ZTpcIiwgdmFsdWUsICdcXG5UYWtlIGEgbG9vayBhdCB0aGUgbG9naWMgdGhhdCBkaXNwYXRjaGVkIHRoaXMgYWN0aW9uOiAnLCBhY3Rpb24sICdcXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9hY3Rpb25zI3doeS1zaG91bGQtdHlwZS1iZS1hLXN0cmluZy1vci1hdC1sZWFzdC1zZXJpYWxpemFibGUtd2h5LXNob3VsZC1teS1hY3Rpb24tdHlwZXMtYmUtY29uc3RhbnRzKScsICdcXG4oVG8gYWxsb3cgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZXMgc2VlOiBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL3VzYWdlL3VzYWdlLWd1aWRlI3dvcmtpbmctd2l0aC1ub24tc2VyaWFsaXphYmxlLWRhdGEpJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5leHQoYWN0aW9uKTtcbiAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgc3RhdGUgPSBzdG9yZUFQSS5nZXRTdGF0ZSgpO1xuICAgICAgICAgIHZhciBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUoc3RhdGUsIFtdLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzKTtcblxuICAgICAgICAgIGlmIChmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBrZXlQYXRoID0gZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlLmtleVBhdGgsXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUudmFsdWU7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQSBub24tc2VyaWFsaXphYmxlIHZhbHVlIHdhcyBkZXRlY3RlZCBpbiB0aGUgc3RhdGUsIGluIHRoZSBwYXRoOiBgXCIgKyBrZXlQYXRoICsgXCJgLiBWYWx1ZTpcIiwgdmFsdWUsIFwiXFxuVGFrZSBhIGxvb2sgYXQgdGhlIHJlZHVjZXIocykgaGFuZGxpbmcgdGhpcyBhY3Rpb24gdHlwZTogXCIgKyBhY3Rpb24udHlwZSArIFwiLlxcbihTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvZmFxL29yZ2FuaXppbmctc3RhdGUjY2FuLWktcHV0LWZ1bmN0aW9ucy1wcm9taXNlcy1vci1vdGhlci1ub24tc2VyaWFsaXphYmxlLWl0ZW1zLWluLW15LXN0b3JlLXN0YXRlKVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnYm9vbGVhbic7XG59XG5cbmZ1bmN0aW9uIGN1cnJ5R2V0RGVmYXVsdE1pZGRsZXdhcmUoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucykge1xuICAgIHJldHVybiBnZXREZWZhdWx0TWlkZGxld2FyZShvcHRpb25zKTtcbiAgfTtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIGFueSBhcnJheSBjb250YWluaW5nIHRoZSBkZWZhdWx0IG1pZGRsZXdhcmUgaW5zdGFsbGVkIGJ5XHJcbiAqIGBjb25maWd1cmVTdG9yZSgpYC4gVXNlZnVsIGlmIHlvdSB3YW50IHRvIGNvbmZpZ3VyZSB5b3VyIHN0b3JlIHdpdGggYSBjdXN0b21cclxuICogYG1pZGRsZXdhcmVgIGFycmF5IGJ1dCBzdGlsbCBrZWVwIHRoZSBkZWZhdWx0IHNldC5cclxuICpcclxuICogQHJldHVybiBUaGUgZGVmYXVsdCBtaWRkbGV3YXJlIHVzZWQgYnkgYGNvbmZpZ3VyZVN0b3JlKClgLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0TWlkZGxld2FyZShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkdGh1bmsgPSBfb3B0aW9ucy50aHVuayxcbiAgICAgIHRodW5rID0gX29wdGlvbnMkdGh1bmsgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyR0aHVuayxcbiAgICAgIF9vcHRpb25zJGltbXV0YWJsZUNoZSA9IF9vcHRpb25zLmltbXV0YWJsZUNoZWNrLFxuICAgICAgaW1tdXRhYmxlQ2hlY2sgPSBfb3B0aW9ucyRpbW11dGFibGVDaGUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRpbW11dGFibGVDaGUsXG4gICAgICBfb3B0aW9ucyRzZXJpYWxpemFibGUgPSBfb3B0aW9ucy5zZXJpYWxpemFibGVDaGVjayxcbiAgICAgIHNlcmlhbGl6YWJsZUNoZWNrID0gX29wdGlvbnMkc2VyaWFsaXphYmxlID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkc2VyaWFsaXphYmxlO1xuICB2YXIgbWlkZGxld2FyZUFycmF5ID0gbmV3IE1pZGRsZXdhcmVBcnJheSgpO1xuXG4gIGlmICh0aHVuaykge1xuICAgIGlmIChpc0Jvb2xlYW4odGh1bmspKSB7XG4gICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaCh0aHVua01pZGRsZXdhcmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaCh0aHVua01pZGRsZXdhcmUud2l0aEV4dHJhQXJndW1lbnQodGh1bmsuZXh0cmFBcmd1bWVudCkpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGltbXV0YWJsZUNoZWNrKSB7XG4gICAgICAvKiBQUk9EX1NUQVJUX1JFTU9WRV9VTUQgKi9cbiAgICAgIHZhciBpbW11dGFibGVPcHRpb25zID0ge307XG5cbiAgICAgIGlmICghaXNCb29sZWFuKGltbXV0YWJsZUNoZWNrKSkge1xuICAgICAgICBpbW11dGFibGVPcHRpb25zID0gaW1tdXRhYmxlQ2hlY2s7XG4gICAgICB9XG5cbiAgICAgIG1pZGRsZXdhcmVBcnJheS51bnNoaWZ0KGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShpbW11dGFibGVPcHRpb25zKSk7XG4gICAgICAvKiBQUk9EX1NUT1BfUkVNT1ZFX1VNRCAqL1xuICAgIH1cblxuICAgIGlmIChzZXJpYWxpemFibGVDaGVjaykge1xuICAgICAgdmFyIHNlcmlhbGl6YWJsZU9wdGlvbnMgPSB7fTtcblxuICAgICAgaWYgKCFpc0Jvb2xlYW4oc2VyaWFsaXphYmxlQ2hlY2spKSB7XG4gICAgICAgIHNlcmlhbGl6YWJsZU9wdGlvbnMgPSBzZXJpYWxpemFibGVDaGVjaztcbiAgICAgIH1cblxuICAgICAgbWlkZGxld2FyZUFycmF5LnB1c2goY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKHNlcmlhbGl6YWJsZU9wdGlvbnMpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWlkZGxld2FyZUFycmF5O1xufVxuXG52YXIgSVNfUFJPRFVDVElPTiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG4vKipcclxuICogQSBmcmllbmRseSBhYnN0cmFjdGlvbiBvdmVyIHRoZSBzdGFuZGFyZCBSZWR1eCBgY3JlYXRlU3RvcmUoKWAgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSBjb25maWcgVGhlIHN0b3JlIGNvbmZpZ3VyYXRpb24uXHJcbiAqIEByZXR1cm5zIEEgY29uZmlndXJlZCBSZWR1eCBzdG9yZS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxuZnVuY3Rpb24gY29uZmlndXJlU3RvcmUob3B0aW9ucykge1xuICB2YXIgY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlID0gY3VycnlHZXREZWZhdWx0TWlkZGxld2FyZSgpO1xuXG4gIHZhciBfcmVmID0gb3B0aW9ucyB8fCB7fSxcbiAgICAgIF9yZWYkcmVkdWNlciA9IF9yZWYucmVkdWNlcixcbiAgICAgIHJlZHVjZXIgPSBfcmVmJHJlZHVjZXIgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYkcmVkdWNlcixcbiAgICAgIF9yZWYkbWlkZGxld2FyZSA9IF9yZWYubWlkZGxld2FyZSxcbiAgICAgIG1pZGRsZXdhcmUgPSBfcmVmJG1pZGRsZXdhcmUgPT09IHZvaWQgMCA/IGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSgpIDogX3JlZiRtaWRkbGV3YXJlLFxuICAgICAgX3JlZiRkZXZUb29scyA9IF9yZWYuZGV2VG9vbHMsXG4gICAgICBkZXZUb29scyA9IF9yZWYkZGV2VG9vbHMgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJGRldlRvb2xzLFxuICAgICAgX3JlZiRwcmVsb2FkZWRTdGF0ZSA9IF9yZWYucHJlbG9hZGVkU3RhdGUsXG4gICAgICBwcmVsb2FkZWRTdGF0ZSA9IF9yZWYkcHJlbG9hZGVkU3RhdGUgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYkcHJlbG9hZGVkU3RhdGUsXG4gICAgICBfcmVmJGVuaGFuY2VycyA9IF9yZWYuZW5oYW5jZXJzLFxuICAgICAgZW5oYW5jZXJzID0gX3JlZiRlbmhhbmNlcnMgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYkZW5oYW5jZXJzO1xuXG4gIHZhciByb290UmVkdWNlcjtcblxuICBpZiAodHlwZW9mIHJlZHVjZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICByb290UmVkdWNlciA9IHJlZHVjZXI7XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChyZWR1Y2VyKSkge1xuICAgIHJvb3RSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHJlZHVjZXIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignXCJyZWR1Y2VyXCIgaXMgYSByZXF1aXJlZCBhcmd1bWVudCwgYW5kIG11c3QgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3Qgb2YgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBjb21iaW5lUmVkdWNlcnMnKTtcbiAgfVxuXG4gIHZhciBtaWRkbGV3YXJlRW5oYW5jZXIgPSBhcHBseU1pZGRsZXdhcmUuYXBwbHkodm9pZCAwLCB0eXBlb2YgbWlkZGxld2FyZSA9PT0gJ2Z1bmN0aW9uJyA/IG1pZGRsZXdhcmUoY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKSA6IG1pZGRsZXdhcmUpO1xuICB2YXIgZmluYWxDb21wb3NlID0gY29tcG9zZTtcblxuICBpZiAoZGV2VG9vbHMpIHtcbiAgICBmaW5hbENvbXBvc2UgPSBjb21wb3NlV2l0aERldlRvb2xzKF9leHRlbmRzKHtcbiAgICAgIC8vIEVuYWJsZSBjYXB0dXJlIG9mIHN0YWNrIHRyYWNlcyBmb3IgZGlzcGF0Y2hlZCBSZWR1eCBhY3Rpb25zXG4gICAgICB0cmFjZTogIUlTX1BST0RVQ1RJT05cbiAgICB9LCB0eXBlb2YgZGV2VG9vbHMgPT09ICdvYmplY3QnICYmIGRldlRvb2xzKSk7XG4gIH1cblxuICB2YXIgc3RvcmVFbmhhbmNlcnMgPSBbbWlkZGxld2FyZUVuaGFuY2VyXTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShlbmhhbmNlcnMpKSB7XG4gICAgc3RvcmVFbmhhbmNlcnMgPSBbbWlkZGxld2FyZUVuaGFuY2VyXS5jb25jYXQoZW5oYW5jZXJzKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZW5oYW5jZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc3RvcmVFbmhhbmNlcnMgPSBlbmhhbmNlcnMoc3RvcmVFbmhhbmNlcnMpO1xuICB9XG5cbiAgdmFyIGNvbXBvc2VkRW5oYW5jZXIgPSBmaW5hbENvbXBvc2UuYXBwbHkodm9pZCAwLCBzdG9yZUVuaGFuY2Vycyk7XG4gIHJldHVybiBjcmVhdGVTdG9yZShyb290UmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGNvbXBvc2VkRW5oYW5jZXIpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBY3Rpb24odHlwZSwgcHJlcGFyZUFjdGlvbikge1xuICBmdW5jdGlvbiBhY3Rpb25DcmVhdG9yKCkge1xuICAgIGlmIChwcmVwYXJlQWN0aW9uKSB7XG4gICAgICB2YXIgcHJlcGFyZWQgPSBwcmVwYXJlQWN0aW9uLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgaWYgKCFwcmVwYXJlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ByZXBhcmVBY3Rpb24gZGlkIG5vdCByZXR1cm4gYW4gb2JqZWN0Jyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIHBheWxvYWQ6IHByZXBhcmVkLnBheWxvYWRcbiAgICAgIH0sICdtZXRhJyBpbiBwcmVwYXJlZCAmJiB7XG4gICAgICAgIG1ldGE6IHByZXBhcmVkLm1ldGFcbiAgICAgIH0sIHt9LCAnZXJyb3InIGluIHByZXBhcmVkICYmIHtcbiAgICAgICAgZXJyb3I6IHByZXBhcmVkLmVycm9yXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIHBheWxvYWQ6IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXVxuICAgIH07XG4gIH1cblxuICBhY3Rpb25DcmVhdG9yLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcIlwiICsgdHlwZTtcbiAgfTtcblxuICBhY3Rpb25DcmVhdG9yLnR5cGUgPSB0eXBlO1xuXG4gIGFjdGlvbkNyZWF0b3IubWF0Y2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgcmV0dXJuIGFjdGlvbi50eXBlID09PSB0eXBlO1xuICB9O1xuXG4gIHJldHVybiBhY3Rpb25DcmVhdG9yO1xufVxuZnVuY3Rpb24gaXNGU0EoYWN0aW9uKSB7XG4gIHJldHVybiBpc1BsYWluT2JqZWN0KGFjdGlvbikgJiYgdHlwZW9mIGFjdGlvbi50eXBlID09PSAnc3RyaW5nJyAmJiBPYmplY3Qua2V5cyhhY3Rpb24pLmV2ZXJ5KGlzVmFsaWRLZXkpO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleSkge1xuICByZXR1cm4gWyd0eXBlJywgJ3BheWxvYWQnLCAnZXJyb3InLCAnbWV0YSddLmluZGV4T2Yoa2V5KSA+IC0xO1xufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGFjdGlvbiB0eXBlIG9mIHRoZSBhY3Rpb25zIGNyZWF0ZWQgYnkgdGhlIHBhc3NlZFxyXG4gKiBgY3JlYXRlQWN0aW9uKClgLWdlbmVyYXRlZCBhY3Rpb24gY3JlYXRvciAoYXJiaXRyYXJ5IGFjdGlvbiBjcmVhdG9yc1xyXG4gKiBhcmUgbm90IHN1cHBvcnRlZCkuXHJcbiAqXHJcbiAqIEBwYXJhbSBhY3Rpb24gVGhlIGFjdGlvbiBjcmVhdG9yIHdob3NlIGFjdGlvbiB0eXBlIHRvIGdldC5cclxuICogQHJldHVybnMgVGhlIGFjdGlvbiB0eXBlIHVzZWQgYnkgdGhlIGFjdGlvbiBjcmVhdG9yLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFR5cGUoYWN0aW9uQ3JlYXRvcikge1xuICByZXR1cm4gXCJcIiArIGFjdGlvbkNyZWF0b3I7XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrKGJ1aWxkZXJDYWxsYmFjaykge1xuICB2YXIgYWN0aW9uc01hcCA9IHt9O1xuICB2YXIgYWN0aW9uTWF0Y2hlcnMgPSBbXTtcbiAgdmFyIGRlZmF1bHRDYXNlUmVkdWNlcjtcbiAgdmFyIGJ1aWxkZXIgPSB7XG4gICAgYWRkQ2FzZTogZnVuY3Rpb24gYWRkQ2FzZSh0eXBlT3JBY3Rpb25DcmVhdG9yLCByZWR1Y2VyKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAvKlxyXG4gICAgICAgICB0byBrZWVwIHRoZSBkZWZpbml0aW9uIGJ5IHRoZSB1c2VyIGluIGxpbmUgd2l0aCBhY3R1YWwgYmVoYXZpb3IsXHJcbiAgICAgICAgIHdlIGVuZm9yY2UgYGFkZENhc2VgIHRvIGFsd2F5cyBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGFkZE1hdGNoZXJgXHJcbiAgICAgICAgIGFzIG1hdGNoaW5nIGNhc2VzIHRha2UgcHJlY2VkZW5jZSBvdmVyIG1hdGNoZXJzXHJcbiAgICAgICAgICovXG4gICAgICAgIGlmIChhY3Rpb25NYXRjaGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgYnVpbGRlci5hZGRDYXNlYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkTWF0Y2hlcmAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BidWlsZGVyLmFkZENhc2VgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGREZWZhdWx0Q2FzZWAnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB0eXBlT3JBY3Rpb25DcmVhdG9yID09PSAnc3RyaW5nJyA/IHR5cGVPckFjdGlvbkNyZWF0b3IgOiB0eXBlT3JBY3Rpb25DcmVhdG9yLnR5cGU7XG5cbiAgICAgIGlmICh0eXBlIGluIGFjdGlvbnNNYXApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhZGRDYXNlIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCB0d28gcmVkdWNlcnMgZm9yIHRoZSBzYW1lIGFjdGlvbiB0eXBlJyk7XG4gICAgICB9XG5cbiAgICAgIGFjdGlvbnNNYXBbdHlwZV0gPSByZWR1Y2VyO1xuICAgICAgcmV0dXJuIGJ1aWxkZXI7XG4gICAgfSxcbiAgICBhZGRNYXRjaGVyOiBmdW5jdGlvbiBhZGRNYXRjaGVyKG1hdGNoZXIsIHJlZHVjZXIpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BidWlsZGVyLmFkZE1hdGNoZXJgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGREZWZhdWx0Q2FzZWAnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhY3Rpb25NYXRjaGVycy5wdXNoKHtcbiAgICAgICAgbWF0Y2hlcjogbWF0Y2hlcixcbiAgICAgICAgcmVkdWNlcjogcmVkdWNlclxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYnVpbGRlcjtcbiAgICB9LFxuICAgIGFkZERlZmF1bHRDYXNlOiBmdW5jdGlvbiBhZGREZWZhdWx0Q2FzZShyZWR1Y2VyKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgYnVpbGRlci5hZGREZWZhdWx0Q2FzZWAgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkZWZhdWx0Q2FzZVJlZHVjZXIgPSByZWR1Y2VyO1xuICAgICAgcmV0dXJuIGJ1aWxkZXI7XG4gICAgfVxuICB9O1xuICBidWlsZGVyQ2FsbGJhY2soYnVpbGRlcik7XG4gIHJldHVybiBbYWN0aW9uc01hcCwgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcl07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlZHVjZXIoaW5pdGlhbFN0YXRlLCBtYXBPckJ1aWxkZXJDYWxsYmFjaywgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcikge1xuICBpZiAoYWN0aW9uTWF0Y2hlcnMgPT09IHZvaWQgMCkge1xuICAgIGFjdGlvbk1hdGNoZXJzID0gW107XG4gIH1cblxuICB2YXIgX3JlZiA9IHR5cGVvZiBtYXBPckJ1aWxkZXJDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyA/IGV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrKG1hcE9yQnVpbGRlckNhbGxiYWNrKSA6IFttYXBPckJ1aWxkZXJDYWxsYmFjaywgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcl0sXG4gICAgICBhY3Rpb25zTWFwID0gX3JlZlswXSxcbiAgICAgIGZpbmFsQWN0aW9uTWF0Y2hlcnMgPSBfcmVmWzFdLFxuICAgICAgZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXIgPSBfcmVmWzJdO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgY2FzZVJlZHVjZXJzID0gW2FjdGlvbnNNYXBbYWN0aW9uLnR5cGVdXS5jb25jYXQoZmluYWxBY3Rpb25NYXRjaGVycy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICB2YXIgbWF0Y2hlciA9IF9yZWYyLm1hdGNoZXI7XG4gICAgICByZXR1cm4gbWF0Y2hlcihhY3Rpb24pO1xuICAgIH0pLm1hcChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgIHZhciByZWR1Y2VyID0gX3JlZjMucmVkdWNlcjtcbiAgICAgIHJldHVybiByZWR1Y2VyO1xuICAgIH0pKTtcblxuICAgIGlmIChjYXNlUmVkdWNlcnMuZmlsdGVyKGZ1bmN0aW9uIChjcikge1xuICAgICAgcmV0dXJuICEhY3I7XG4gICAgfSkubGVuZ3RoID09PSAwKSB7XG4gICAgICBjYXNlUmVkdWNlcnMgPSBbZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXJdO1xuICAgIH1cblxuICAgIHJldHVybiBjYXNlUmVkdWNlcnMucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91c1N0YXRlLCBjYXNlUmVkdWNlcikge1xuICAgICAgaWYgKGNhc2VSZWR1Y2VyKSB7XG4gICAgICAgIGlmIChpc0RyYWZ0KHByZXZpb3VzU3RhdGUpKSB7XG4gICAgICAgICAgLy8gSWYgaXQncyBhbHJlYWR5IGEgZHJhZnQsIHdlIG11c3QgYWxyZWFkeSBiZSBpbnNpZGUgYSBgY3JlYXRlTmV4dFN0YXRlYCBjYWxsLFxuICAgICAgICAgIC8vIGxpa2VseSBiZWNhdXNlIHRoaXMgaXMgYmVpbmcgd3JhcHBlZCBpbiBgY3JlYXRlUmVkdWNlcmAsIGBjcmVhdGVTbGljZWAsIG9yIG5lc3RlZFxuICAgICAgICAgIC8vIGluc2lkZSBhbiBleGlzdGluZyBkcmFmdC4gSXQncyBzYWZlIHRvIGp1c3QgcGFzcyB0aGUgZHJhZnQgdG8gdGhlIG11dGF0b3IuXG4gICAgICAgICAgdmFyIGRyYWZ0ID0gcHJldmlvdXNTdGF0ZTsgLy8gV2UgY2FuIGFzc3VtZSB0aGlzIGlzIGFscmVhZHkgYSBkcmFmdFxuXG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGNhc2VSZWR1Y2VyKGRyYWZ0LCBhY3Rpb24pO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKCFpc0RyYWZ0YWJsZShwcmV2aW91c1N0YXRlKSkge1xuICAgICAgICAgIC8vIElmIHN0YXRlIGlzIG5vdCBkcmFmdGFibGUgKGV4OiBhIHByaW1pdGl2ZSwgc3VjaCBhcyAwKSwgd2Ugd2FudCB0byBkaXJlY3RseVxuICAgICAgICAgIC8vIHJldHVybiB0aGUgY2FzZVJlZHVjZXIgZnVuYyBhbmQgbm90IHdyYXAgaXQgd2l0aCBwcm9kdWNlLlxuICAgICAgICAgIHZhciBfcmVzdWx0ID0gY2FzZVJlZHVjZXIocHJldmlvdXNTdGF0ZSwgYWN0aW9uKTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgX3Jlc3VsdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmIChwcmV2aW91c1N0YXRlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQSBjYXNlIHJlZHVjZXIgb24gYSBub24tZHJhZnRhYmxlIHZhbHVlIG11c3Qgbm90IHJldHVybiB1bmRlZmluZWQnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gX3Jlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlIGNyZWF0ZU5leHRTdGF0ZSgpIHByb2R1Y2VzIGFuIEltbXV0YWJsZTxEcmFmdDxTPj4gcmF0aGVyXG4gICAgICAgICAgLy8gdGhhbiBhbiBJbW11dGFibGU8Uz4sIGFuZCBUeXBlU2NyaXB0IGNhbm5vdCBmaW5kIG91dCBob3cgdG8gcmVjb25jaWxlXG4gICAgICAgICAgLy8gdGhlc2UgdHdvIHR5cGVzLlxuICAgICAgICAgIHJldHVybiBjcmVhdGVOZXh0U3RhdGUocHJldmlvdXNTdGF0ZSwgZnVuY3Rpb24gKGRyYWZ0KSB7XG4gICAgICAgICAgICByZXR1cm4gY2FzZVJlZHVjZXIoZHJhZnQsIGFjdGlvbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XG4gICAgfSwgc3RhdGUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRUeXBlJDEoc2xpY2UsIGFjdGlvbktleSkge1xuICByZXR1cm4gc2xpY2UgKyBcIi9cIiArIGFjdGlvbktleTtcbn1cbi8qKlxyXG4gKiBBIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhbiBpbml0aWFsIHN0YXRlLCBhbiBvYmplY3QgZnVsbCBvZiByZWR1Y2VyXHJcbiAqIGZ1bmN0aW9ucywgYW5kIGEgXCJzbGljZSBuYW1lXCIsIGFuZCBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlc1xyXG4gKiBhY3Rpb24gY3JlYXRvcnMgYW5kIGFjdGlvbiB0eXBlcyB0aGF0IGNvcnJlc3BvbmQgdG8gdGhlXHJcbiAqIHJlZHVjZXJzIGFuZCBzdGF0ZS5cclxuICpcclxuICogVGhlIGByZWR1Y2VyYCBhcmd1bWVudCBpcyBwYXNzZWQgdG8gYGNyZWF0ZVJlZHVjZXIoKWAuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlU2xpY2Uob3B0aW9ucykge1xuICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSxcbiAgICAgIGluaXRpYWxTdGF0ZSA9IG9wdGlvbnMuaW5pdGlhbFN0YXRlO1xuXG4gIGlmICghbmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignYG5hbWVgIGlzIGEgcmVxdWlyZWQgb3B0aW9uIGZvciBjcmVhdGVTbGljZScpO1xuICB9XG5cbiAgdmFyIHJlZHVjZXJzID0gb3B0aW9ucy5yZWR1Y2VycyB8fCB7fTtcblxuICB2YXIgX3JlZiA9IHR5cGVvZiBvcHRpb25zLmV4dHJhUmVkdWNlcnMgPT09ICd1bmRlZmluZWQnID8gW10gOiB0eXBlb2Ygb3B0aW9ucy5leHRyYVJlZHVjZXJzID09PSAnZnVuY3Rpb24nID8gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sob3B0aW9ucy5leHRyYVJlZHVjZXJzKSA6IFtvcHRpb25zLmV4dHJhUmVkdWNlcnNdLFxuICAgICAgX3JlZiQgPSBfcmVmWzBdLFxuICAgICAgZXh0cmFSZWR1Y2VycyA9IF9yZWYkID09PSB2b2lkIDAgPyB7fSA6IF9yZWYkLFxuICAgICAgX3JlZiQyID0gX3JlZlsxXSxcbiAgICAgIGFjdGlvbk1hdGNoZXJzID0gX3JlZiQyID09PSB2b2lkIDAgPyBbXSA6IF9yZWYkMixcbiAgICAgIF9yZWYkMyA9IF9yZWZbMl0sXG4gICAgICBkZWZhdWx0Q2FzZVJlZHVjZXIgPSBfcmVmJDMgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYkMztcblxuICB2YXIgcmVkdWNlck5hbWVzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWUgPSB7fTtcbiAgdmFyIHNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlID0ge307XG4gIHZhciBhY3Rpb25DcmVhdG9ycyA9IHt9O1xuICByZWR1Y2VyTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAocmVkdWNlck5hbWUpIHtcbiAgICB2YXIgbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUgPSByZWR1Y2Vyc1tyZWR1Y2VyTmFtZV07XG4gICAgdmFyIHR5cGUgPSBnZXRUeXBlJDEobmFtZSwgcmVkdWNlck5hbWUpO1xuICAgIHZhciBjYXNlUmVkdWNlcjtcbiAgICB2YXIgcHJlcGFyZUNhbGxiYWNrO1xuXG4gICAgaWYgKCdyZWR1Y2VyJyBpbiBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZSkge1xuICAgICAgY2FzZVJlZHVjZXIgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZS5yZWR1Y2VyO1xuICAgICAgcHJlcGFyZUNhbGxiYWNrID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUucHJlcGFyZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FzZVJlZHVjZXIgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZTtcbiAgICB9XG5cbiAgICBzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZVtyZWR1Y2VyTmFtZV0gPSBjYXNlUmVkdWNlcjtcbiAgICBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZVt0eXBlXSA9IGNhc2VSZWR1Y2VyO1xuICAgIGFjdGlvbkNyZWF0b3JzW3JlZHVjZXJOYW1lXSA9IHByZXBhcmVDYWxsYmFjayA/IGNyZWF0ZUFjdGlvbih0eXBlLCBwcmVwYXJlQ2FsbGJhY2spIDogY3JlYXRlQWN0aW9uKHR5cGUpO1xuICB9KTtcblxuICB2YXIgZmluYWxDYXNlUmVkdWNlcnMgPSBfZXh0ZW5kcyh7fSwgZXh0cmFSZWR1Y2Vycywge30sIHNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlKTtcblxuICB2YXIgcmVkdWNlciA9IGNyZWF0ZVJlZHVjZXIoaW5pdGlhbFN0YXRlLCBmaW5hbENhc2VSZWR1Y2VycywgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcik7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICByZWR1Y2VyOiByZWR1Y2VyLFxuICAgIGFjdGlvbnM6IGFjdGlvbkNyZWF0b3JzLFxuICAgIGNhc2VSZWR1Y2Vyczogc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWVcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5pdGlhbEVudGl0eVN0YXRlKCkge1xuICByZXR1cm4ge1xuICAgIGlkczogW10sXG4gICAgZW50aXRpZXM6IHt9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVJbml0aWFsU3RhdGVGYWN0b3J5KCkge1xuICBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoYWRkaXRpb25hbFN0YXRlKSB7XG4gICAgaWYgKGFkZGl0aW9uYWxTdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBhZGRpdGlvbmFsU3RhdGUgPSB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihnZXRJbml0aWFsRW50aXR5U3RhdGUoKSwgYWRkaXRpb25hbFN0YXRlKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0SW5pdGlhbFN0YXRlOiBnZXRJbml0aWFsU3RhdGVcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JzRmFjdG9yeSgpIHtcbiAgZnVuY3Rpb24gZ2V0U2VsZWN0b3JzKHNlbGVjdFN0YXRlKSB7XG4gICAgdmFyIHNlbGVjdElkcyA9IGZ1bmN0aW9uIHNlbGVjdElkcyhzdGF0ZSkge1xuICAgICAgcmV0dXJuIHN0YXRlLmlkcztcbiAgICB9O1xuXG4gICAgdmFyIHNlbGVjdEVudGl0aWVzID0gZnVuY3Rpb24gc2VsZWN0RW50aXRpZXMoc3RhdGUpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5lbnRpdGllcztcbiAgICB9O1xuXG4gICAgdmFyIHNlbGVjdEFsbCA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdElkcywgc2VsZWN0RW50aXRpZXMsIGZ1bmN0aW9uIChpZHMsIGVudGl0aWVzKSB7XG4gICAgICByZXR1cm4gaWRzLm1hcChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgcmV0dXJuIGVudGl0aWVzW2lkXTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdmFyIHNlbGVjdElkID0gZnVuY3Rpb24gc2VsZWN0SWQoXywgaWQpIHtcbiAgICAgIHJldHVybiBpZDtcbiAgICB9O1xuXG4gICAgdmFyIHNlbGVjdEJ5SWQgPSBmdW5jdGlvbiBzZWxlY3RCeUlkKGVudGl0aWVzLCBpZCkge1xuICAgICAgcmV0dXJuIGVudGl0aWVzW2lkXTtcbiAgICB9O1xuXG4gICAgdmFyIHNlbGVjdFRvdGFsID0gY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0SWRzLCBmdW5jdGlvbiAoaWRzKSB7XG4gICAgICByZXR1cm4gaWRzLmxlbmd0aDtcbiAgICB9KTtcblxuICAgIGlmICghc2VsZWN0U3RhdGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNlbGVjdElkczogc2VsZWN0SWRzLFxuICAgICAgICBzZWxlY3RFbnRpdGllczogc2VsZWN0RW50aXRpZXMsXG4gICAgICAgIHNlbGVjdEFsbDogc2VsZWN0QWxsLFxuICAgICAgICBzZWxlY3RUb3RhbDogc2VsZWN0VG90YWwsXG4gICAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdEVudGl0aWVzLCBzZWxlY3RJZCwgc2VsZWN0QnlJZClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RFbnRpdGllcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbGVjdElkczogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdElkcyksXG4gICAgICBzZWxlY3RFbnRpdGllczogc2VsZWN0R2xvYmFsaXplZEVudGl0aWVzLFxuICAgICAgc2VsZWN0QWxsOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0QWxsKSxcbiAgICAgIHNlbGVjdFRvdGFsOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0VG90YWwpLFxuICAgICAgc2VsZWN0QnlJZDogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0R2xvYmFsaXplZEVudGl0aWVzLCBzZWxlY3RJZCwgc2VsZWN0QnlJZClcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRTZWxlY3RvcnM6IGdldFNlbGVjdG9yc1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IobXV0YXRvcikge1xuICB2YXIgb3BlcmF0b3IgPSBjcmVhdGVTdGF0ZU9wZXJhdG9yKGZ1bmN0aW9uIChfLCBzdGF0ZSkge1xuICAgIHJldHVybiBtdXRhdG9yKHN0YXRlKTtcbiAgfSk7XG4gIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUpIHtcbiAgICByZXR1cm4gb3BlcmF0b3Ioc3RhdGUsIHVuZGVmaW5lZCk7XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVTdGF0ZU9wZXJhdG9yKG11dGF0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9wZXJhdGlvbihzdGF0ZSwgYXJnKSB7XG4gICAgZnVuY3Rpb24gaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoYXJnKSB7XG4gICAgICByZXR1cm4gaXNGU0EoYXJnKTtcbiAgICB9XG5cbiAgICB2YXIgcnVuTXV0YXRvciA9IGZ1bmN0aW9uIHJ1bk11dGF0b3IoZHJhZnQpIHtcbiAgICAgIGlmIChpc1BheWxvYWRBY3Rpb25Bcmd1bWVudChhcmcpKSB7XG4gICAgICAgIG11dGF0b3IoYXJnLnBheWxvYWQsIGRyYWZ0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11dGF0b3IoYXJnLCBkcmFmdCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChpc0RyYWZ0KHN0YXRlKSkge1xuICAgICAgLy8gd2UgbXVzdCBhbHJlYWR5IGJlIGluc2lkZSBhIGBjcmVhdGVOZXh0U3RhdGVgIGNhbGwsIGxpa2VseSBiZWNhdXNlXG4gICAgICAvLyB0aGlzIGlzIGJlaW5nIHdyYXBwZWQgaW4gYGNyZWF0ZVJlZHVjZXJgIG9yIGBjcmVhdGVTbGljZWAuXG4gICAgICAvLyBJdCdzIHNhZmUgdG8ganVzdCBwYXNzIHRoZSBkcmFmdCB0byB0aGUgbXV0YXRvci5cbiAgICAgIHJ1bk11dGF0b3Ioc3RhdGUpOyAvLyBzaW5jZSBpdCdzIGEgZHJhZnQsIHdlJ2xsIGp1c3QgcmV0dXJuIGl0XG5cbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQHRzLWlnbm9yZSBjcmVhdGVOZXh0U3RhdGUoKSBwcm9kdWNlcyBhbiBJbW11dGFibGU8RHJhZnQ8Uz4+IHJhdGhlclxuICAgICAgLy8gdGhhbiBhbiBJbW11dGFibGU8Uz4sIGFuZCBUeXBlU2NyaXB0IGNhbm5vdCBmaW5kIG91dCBob3cgdG8gcmVjb25jaWxlXG4gICAgICAvLyB0aGVzZSB0d28gdHlwZXMuXG4gICAgICByZXR1cm4gY3JlYXRlTmV4dFN0YXRlKHN0YXRlLCBydW5NdXRhdG9yKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCkge1xuICB2YXIga2V5ID0gc2VsZWN0SWQoZW50aXR5KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybignVGhlIGVudGl0eSBwYXNzZWQgdG8gdGhlIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24gcmV0dXJuZWQgdW5kZWZpbmVkLicsICdZb3Ugc2hvdWxkIHByb2JhYmx5IHByb3ZpZGUgeW91ciBvd24gYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbi4nLCAnVGhlIGVudGl0eSB0aGF0IHdhcyBwYXNzZWQ6JywgZW50aXR5LCAnVGhlIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb246Jywgc2VsZWN0SWQudG9TdHJpbmcoKSk7XG4gIH1cblxuICByZXR1cm4ga2V5O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCkge1xuICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcbiAgICB2YXIga2V5ID0gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKTtcblxuICAgIGlmIChrZXkgaW4gc3RhdGUuZW50aXRpZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdGF0ZS5pZHMucHVzaChrZXkpO1xuICAgIHN0YXRlLmVudGl0aWVzW2tleV0gPSBlbnRpdHk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRNYW55TXV0YWJseShlbnRpdGllcywgc3RhdGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XG4gICAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGVudGl0aWVzLCBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yKSwgX2kgPSAwLCBfaXRlcmF0b3IgPSBfaXNBcnJheSA/IF9pdGVyYXRvciA6IF9pdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIGlmIChfaXNBcnJheSkge1xuICAgICAgICBpZiAoX2kgPj0gX2l0ZXJhdG9yLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaXRlcmF0b3JbX2krK107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfaSA9IF9pdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChfaS5kb25lKSBicmVhaztcbiAgICAgICAgX3JlZiA9IF9pLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW50aXR5ID0gX3JlZjtcbiAgICAgIGFkZE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShlbnRpdGllcywgc3RhdGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XG4gICAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xuICAgIH1cblxuICAgIHN0YXRlLmlkcyA9IFtdO1xuICAgIHN0YXRlLmVudGl0aWVzID0ge307XG4gICAgYWRkTWFueU11dGFibHkoZW50aXRpZXMsIHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU9uZU11dGFibHkoa2V5LCBzdGF0ZSkge1xuICAgIHJldHVybiByZW1vdmVNYW55TXV0YWJseShba2V5XSwgc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTWFueU11dGFibHkoa2V5cywgc3RhdGUpIHtcbiAgICB2YXIgZGlkTXV0YXRlID0gZmFsc2U7XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmIChrZXkgaW4gc3RhdGUuZW50aXRpZXMpIHtcbiAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW2tleV07XG4gICAgICAgIGRpZE11dGF0ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoZGlkTXV0YXRlKSB7XG4gICAgICBzdGF0ZS5pZHMgPSBzdGF0ZS5pZHMuZmlsdGVyKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICByZXR1cm4gaWQgaW4gc3RhdGUuZW50aXRpZXM7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbGxNdXRhYmx5KHN0YXRlKSB7XG4gICAgT2JqZWN0LmFzc2lnbihzdGF0ZSwge1xuICAgICAgaWRzOiBbXSxcbiAgICAgIGVudGl0aWVzOiB7fVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdGFrZU5ld0tleShrZXlzLCB1cGRhdGUsIHN0YXRlKSB7XG4gICAgdmFyIG9yaWdpbmFsID0gc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcbiAgICB2YXIgdXBkYXRlZCA9IE9iamVjdC5hc3NpZ24oe30sIG9yaWdpbmFsLCB1cGRhdGUuY2hhbmdlcyk7XG4gICAgdmFyIG5ld0tleSA9IHNlbGVjdElkVmFsdWUodXBkYXRlZCwgc2VsZWN0SWQpO1xuICAgIHZhciBoYXNOZXdLZXkgPSBuZXdLZXkgIT09IHVwZGF0ZS5pZDtcblxuICAgIGlmIChoYXNOZXdLZXkpIHtcbiAgICAgIGtleXNbdXBkYXRlLmlkXSA9IG5ld0tleTtcbiAgICAgIGRlbGV0ZSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xuICAgIH1cblxuICAgIHN0YXRlLmVudGl0aWVzW25ld0tleV0gPSB1cGRhdGVkO1xuICAgIHJldHVybiBoYXNOZXdLZXk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVPbmVNdXRhYmx5KHVwZGF0ZSwgc3RhdGUpIHtcbiAgICByZXR1cm4gdXBkYXRlTWFueU11dGFibHkoW3VwZGF0ZV0sIHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZXMsIHN0YXRlKSB7XG4gICAgdmFyIG5ld0tleXMgPSB7fTtcbiAgICB2YXIgdXBkYXRlc1BlckVudGl0eSA9IHt9O1xuICAgIHVwZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAodXBkYXRlKSB7XG4gICAgICAvLyBPbmx5IGFwcGx5IHVwZGF0ZXMgdG8gZW50aXRpZXMgdGhhdCBjdXJyZW50bHkgZXhpc3RcbiAgICAgIGlmICh1cGRhdGUuaWQgaW4gc3RhdGUuZW50aXRpZXMpIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIHVwZGF0ZXMgdG8gb25lIGVudGl0eSwgbWVyZ2UgdGhlbSB0b2dldGhlclxuICAgICAgICB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0gPSB7XG4gICAgICAgICAgaWQ6IHVwZGF0ZS5pZCxcbiAgICAgICAgICAvLyBTcHJlYWRzIGlnbm9yZSBmYWxzeSB2YWx1ZXMsIHNvIHRoaXMgd29ya3MgZXZlbiBpZiB0aGVyZSBpc24ndFxuICAgICAgICAgIC8vIGFuIGV4aXN0aW5nIHVwZGF0ZSBhbHJlYWR5IGF0IHRoaXMga2V5XG4gICAgICAgICAgY2hhbmdlczogX2V4dGVuZHMoe30sIHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXSA/IHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXS5jaGFuZ2VzIDogbnVsbCwge30sIHVwZGF0ZS5jaGFuZ2VzKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVwZGF0ZXMgPSBPYmplY3QudmFsdWVzKHVwZGF0ZXNQZXJFbnRpdHkpO1xuICAgIHZhciBkaWRNdXRhdGVFbnRpdGllcyA9IHVwZGF0ZXMubGVuZ3RoID4gMDtcblxuICAgIGlmIChkaWRNdXRhdGVFbnRpdGllcykge1xuICAgICAgdmFyIGRpZE11dGF0ZUlkcyA9IHVwZGF0ZXMuZmlsdGVyKGZ1bmN0aW9uICh1cGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRha2VOZXdLZXkobmV3S2V5cywgdXBkYXRlLCBzdGF0ZSk7XG4gICAgICB9KS5sZW5ndGggPiAwO1xuXG4gICAgICBpZiAoZGlkTXV0YXRlSWRzKSB7XG4gICAgICAgIHN0YXRlLmlkcyA9IHN0YXRlLmlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgcmV0dXJuIG5ld0tleXNbaWRdIHx8IGlkO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcbiAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KGVudGl0aWVzLCBzdGF0ZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcbiAgICAgIGVudGl0aWVzID0gT2JqZWN0LnZhbHVlcyhlbnRpdGllcyk7XG4gICAgfVxuXG4gICAgdmFyIGFkZGVkID0gW107XG4gICAgdmFyIHVwZGF0ZWQgPSBbXTtcblxuICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBlbnRpdGllcywgX2lzQXJyYXkyID0gQXJyYXkuaXNBcnJheShfaXRlcmF0b3IyKSwgX2kyID0gMCwgX2l0ZXJhdG9yMiA9IF9pc0FycmF5MiA/IF9pdGVyYXRvcjIgOiBfaXRlcmF0b3IyW1N5bWJvbC5pdGVyYXRvcl0oKTs7KSB7XG4gICAgICB2YXIgX3JlZjI7XG5cbiAgICAgIGlmIChfaXNBcnJheTIpIHtcbiAgICAgICAgaWYgKF9pMiA+PSBfaXRlcmF0b3IyLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgIF9yZWYyID0gX2l0ZXJhdG9yMltfaTIrK107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfaTIgPSBfaXRlcmF0b3IyLm5leHQoKTtcbiAgICAgICAgaWYgKF9pMi5kb25lKSBicmVhaztcbiAgICAgICAgX3JlZjIgPSBfaTIudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbnRpdHkgPSBfcmVmMjtcbiAgICAgIHZhciBpZCA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XG5cbiAgICAgIGlmIChpZCBpbiBzdGF0ZS5lbnRpdGllcykge1xuICAgICAgICB1cGRhdGVkLnB1c2goe1xuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBjaGFuZ2VzOiBlbnRpdHlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRlZC5wdXNoKGVudGl0eSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlTWFueU11dGFibHkodXBkYXRlZCwgc3RhdGUpO1xuICAgIGFkZE1hbnlNdXRhYmx5KGFkZGVkLCBzdGF0ZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlbW92ZUFsbDogY3JlYXRlU2luZ2xlQXJndW1lbnRTdGF0ZU9wZXJhdG9yKHJlbW92ZUFsbE11dGFibHkpLFxuICAgIGFkZE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRPbmVNdXRhYmx5KSxcbiAgICBhZGRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE1hbnlNdXRhYmx5KSxcbiAgICBzZXRBbGw6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0QWxsTXV0YWJseSksXG4gICAgdXBkYXRlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU9uZU11dGFibHkpLFxuICAgIHVwZGF0ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlTWFueU11dGFibHkpLFxuICAgIHVwc2VydE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRPbmVNdXRhYmx5KSxcbiAgICB1cHNlcnRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE1hbnlNdXRhYmx5KSxcbiAgICByZW1vdmVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IocmVtb3ZlT25lTXV0YWJseSksXG4gICAgcmVtb3ZlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihyZW1vdmVNYW55TXV0YWJseSlcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkLCBzb3J0KSB7XG4gIHZhciBfY3JlYXRlVW5zb3J0ZWRTdGF0ZUEgPSBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCksXG4gICAgICByZW1vdmVPbmUgPSBfY3JlYXRlVW5zb3J0ZWRTdGF0ZUEucmVtb3ZlT25lLFxuICAgICAgcmVtb3ZlTWFueSA9IF9jcmVhdGVVbnNvcnRlZFN0YXRlQS5yZW1vdmVNYW55LFxuICAgICAgcmVtb3ZlQWxsID0gX2NyZWF0ZVVuc29ydGVkU3RhdGVBLnJlbW92ZUFsbDtcblxuICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcbiAgICByZXR1cm4gYWRkTWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZE1hbnlNdXRhYmx5KG5ld01vZGVscywgc3RhdGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkobmV3TW9kZWxzKSkge1xuICAgICAgbmV3TW9kZWxzID0gT2JqZWN0LnZhbHVlcyhuZXdNb2RlbHMpO1xuICAgIH1cblxuICAgIHZhciBtb2RlbHMgPSBuZXdNb2RlbHMuZmlsdGVyKGZ1bmN0aW9uIChtb2RlbCkge1xuICAgICAgcmV0dXJuICEoc2VsZWN0SWRWYWx1ZShtb2RlbCwgc2VsZWN0SWQpIGluIHN0YXRlLmVudGl0aWVzKTtcbiAgICB9KTtcblxuICAgIGlmIChtb2RlbHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICBtZXJnZShtb2RlbHMsIHN0YXRlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRBbGxNdXRhYmx5KG1vZGVscywgc3RhdGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkobW9kZWxzKSkge1xuICAgICAgbW9kZWxzID0gT2JqZWN0LnZhbHVlcyhtb2RlbHMpO1xuICAgIH1cblxuICAgIHN0YXRlLmVudGl0aWVzID0ge307XG4gICAgc3RhdGUuaWRzID0gW107XG4gICAgYWRkTWFueU11dGFibHkobW9kZWxzLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVPbmVNdXRhYmx5KHVwZGF0ZSwgc3RhdGUpIHtcbiAgICByZXR1cm4gdXBkYXRlTWFueU11dGFibHkoW3VwZGF0ZV0sIHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRha2VVcGRhdGVkTW9kZWwobW9kZWxzLCB1cGRhdGUsIHN0YXRlKSB7XG4gICAgaWYgKCEodXBkYXRlLmlkIGluIHN0YXRlLmVudGl0aWVzKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBvcmlnaW5hbCA9IHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XG4gICAgdmFyIHVwZGF0ZWQgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbCwgdXBkYXRlLmNoYW5nZXMpO1xuICAgIHZhciBuZXdLZXkgPSBzZWxlY3RJZFZhbHVlKHVwZGF0ZWQsIHNlbGVjdElkKTtcbiAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcbiAgICBtb2RlbHMucHVzaCh1cGRhdGVkKTtcbiAgICByZXR1cm4gbmV3S2V5ICE9PSB1cGRhdGUuaWQ7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVzLCBzdGF0ZSkge1xuICAgIHZhciBtb2RlbHMgPSBbXTtcbiAgICB1cGRhdGVzLmZvckVhY2goZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgICAgcmV0dXJuIHRha2VVcGRhdGVkTW9kZWwobW9kZWxzLCB1cGRhdGUsIHN0YXRlKTtcbiAgICB9KTtcblxuICAgIGlmIChtb2RlbHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICBtZXJnZShtb2RlbHMsIHN0YXRlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcbiAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KGVudGl0aWVzLCBzdGF0ZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcbiAgICAgIGVudGl0aWVzID0gT2JqZWN0LnZhbHVlcyhlbnRpdGllcyk7XG4gICAgfVxuXG4gICAgdmFyIGFkZGVkID0gW107XG4gICAgdmFyIHVwZGF0ZWQgPSBbXTtcblxuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGVudGl0aWVzLCBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yKSwgX2kgPSAwLCBfaXRlcmF0b3IgPSBfaXNBcnJheSA/IF9pdGVyYXRvciA6IF9pdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIGlmIChfaXNBcnJheSkge1xuICAgICAgICBpZiAoX2kgPj0gX2l0ZXJhdG9yLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaXRlcmF0b3JbX2krK107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfaSA9IF9pdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChfaS5kb25lKSBicmVhaztcbiAgICAgICAgX3JlZiA9IF9pLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW50aXR5ID0gX3JlZjtcbiAgICAgIHZhciBpZCA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XG5cbiAgICAgIGlmIChpZCBpbiBzdGF0ZS5lbnRpdGllcykge1xuICAgICAgICB1cGRhdGVkLnB1c2goe1xuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBjaGFuZ2VzOiBlbnRpdHlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRlZC5wdXNoKGVudGl0eSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlTWFueU11dGFibHkodXBkYXRlZCwgc3RhdGUpO1xuICAgIGFkZE1hbnlNdXRhYmx5KGFkZGVkLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVBcnJheXNFcXVhbChhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGggJiYgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhW2ldID09PSBiW2ldKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZShtb2RlbHMsIHN0YXRlKSB7XG4gICAgbW9kZWxzLnNvcnQoc29ydCk7IC8vIEluc2VydC9vdmVyd3JpdGUgYWxsIG5ldy91cGRhdGVkXG5cbiAgICBtb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgIHN0YXRlLmVudGl0aWVzW3NlbGVjdElkKG1vZGVsKV0gPSBtb2RlbDtcbiAgICB9KTtcbiAgICB2YXIgYWxsRW50aXRpZXMgPSBPYmplY3QudmFsdWVzKHN0YXRlLmVudGl0aWVzKTtcbiAgICBhbGxFbnRpdGllcy5zb3J0KHNvcnQpO1xuICAgIHZhciBuZXdTb3J0ZWRJZHMgPSBhbGxFbnRpdGllcy5tYXAoc2VsZWN0SWQpO1xuICAgIHZhciBpZHMgPSBzdGF0ZS5pZHM7XG5cbiAgICBpZiAoIWFyZUFycmF5c0VxdWFsKGlkcywgbmV3U29ydGVkSWRzKSkge1xuICAgICAgc3RhdGUuaWRzID0gbmV3U29ydGVkSWRzO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVtb3ZlT25lOiByZW1vdmVPbmUsXG4gICAgcmVtb3ZlTWFueTogcmVtb3ZlTWFueSxcbiAgICByZW1vdmVBbGw6IHJlbW92ZUFsbCxcbiAgICBhZGRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkT25lTXV0YWJseSksXG4gICAgdXBkYXRlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU9uZU11dGFibHkpLFxuICAgIHVwc2VydE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRPbmVNdXRhYmx5KSxcbiAgICBzZXRBbGw6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0QWxsTXV0YWJseSksXG4gICAgYWRkTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRNYW55TXV0YWJseSksXG4gICAgdXBkYXRlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVNYW55TXV0YWJseSksXG4gICAgdXBzZXJ0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRNYW55TXV0YWJseSlcbiAgfTtcbn1cblxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSBvcHRpb25zXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVudGl0eUFkYXB0ZXIob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9zb3J0Q29tcGFyZXIkc2VsZWN0SSA9IF9leHRlbmRzKHtcbiAgICBzb3J0Q29tcGFyZXI6IGZhbHNlLFxuICAgIHNlbGVjdElkOiBmdW5jdGlvbiBzZWxlY3RJZChpbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIGluc3RhbmNlLmlkO1xuICAgIH1cbiAgfSwgb3B0aW9ucyksXG4gICAgICBzZWxlY3RJZCA9IF9zb3J0Q29tcGFyZXIkc2VsZWN0SS5zZWxlY3RJZCxcbiAgICAgIHNvcnRDb21wYXJlciA9IF9zb3J0Q29tcGFyZXIkc2VsZWN0SS5zb3J0Q29tcGFyZXI7XG5cbiAgdmFyIHN0YXRlRmFjdG9yeSA9IGNyZWF0ZUluaXRpYWxTdGF0ZUZhY3RvcnkoKTtcbiAgdmFyIHNlbGVjdG9yc0ZhY3RvcnkgPSBjcmVhdGVTZWxlY3RvcnNGYWN0b3J5KCk7XG4gIHZhciBzdGF0ZUFkYXB0ZXIgPSBzb3J0Q29tcGFyZXIgPyBjcmVhdGVTb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQsIHNvcnRDb21wYXJlcikgOiBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCk7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgc2VsZWN0SWQ6IHNlbGVjdElkLFxuICAgIHNvcnRDb21wYXJlcjogc29ydENvbXBhcmVyXG4gIH0sIHN0YXRlRmFjdG9yeSwge30sIHNlbGVjdG9yc0ZhY3RvcnksIHt9LCBzdGF0ZUFkYXB0ZXIpO1xufVxuXG4vLyBBIHR5cGUgb2YgcHJvbWlzZS1saWtlIHRoYXQgcmVzb2x2ZXMgc3luY2hyb25vdXNseSBhbmQgc3VwcG9ydHMgb25seSBvbmUgb2JzZXJ2ZXJcblxuY29uc3QgX2l0ZXJhdG9yU3ltYm9sID0gLyojX19QVVJFX18qLyB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gKFN5bWJvbC5pdGVyYXRvciB8fCAoU3ltYm9sLml0ZXJhdG9yID0gU3ltYm9sKFwiU3ltYm9sLml0ZXJhdG9yXCIpKSkgOiBcIkBAaXRlcmF0b3JcIjtcblxuY29uc3QgX2FzeW5jSXRlcmF0b3JTeW1ib2wgPSAvKiNfX1BVUkVfXyovIHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyAoU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgKFN5bWJvbC5hc3luY0l0ZXJhdG9yID0gU3ltYm9sKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3JcIikpKSA6IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG5cbi8vIEFzeW5jaHJvbm91c2x5IGNhbGwgYSBmdW5jdGlvbiBhbmQgc2VuZCBlcnJvcnMgdG8gcmVjb3ZlcnkgY29udGludWF0aW9uXG5mdW5jdGlvbiBfY2F0Y2goYm9keSwgcmVjb3Zlcikge1xuXHR0cnkge1xuXHRcdHZhciByZXN1bHQgPSBib2R5KCk7XG5cdH0gY2F0Y2goZSkge1xuXHRcdHJldHVybiByZWNvdmVyKGUpO1xuXHR9XG5cdGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4pIHtcblx0XHRyZXR1cm4gcmVzdWx0LnRoZW4odm9pZCAwLCByZWNvdmVyKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBCb3Jyb3dlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9haS9uYW5vaWQvYmxvYi8zLjAuMi9ub24tc2VjdXJlL2luZGV4LmpzXG4vLyBUaGlzIGFscGhhYmV0IHVzZXMgYEEtWmEtejAtOV8tYCBzeW1ib2xzLiBBIGdlbmV0aWMgYWxnb3JpdGhtIGhlbHBlZFxuLy8gb3B0aW1pemUgdGhlIGd6aXAgY29tcHJlc3Npb24gZm9yIHRoaXMgYWxwaGFiZXQuXG52YXIgdXJsQWxwaGFiZXQgPSAnTW9kdWxlU3ltYmhhc093blByLTAxMjM0NTY3ODlBQkNERUZHSE5SVmZnY3RpVXZ6X0txWVRKa0x4cFpYSWpRVyc7XG4vKipcclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cblxudmFyIG5hbm9pZCA9IGZ1bmN0aW9uIG5hbm9pZChzaXplKSB7XG4gIGlmIChzaXplID09PSB2b2lkIDApIHtcbiAgICBzaXplID0gMjE7XG4gIH1cblxuICB2YXIgaWQgPSAnJzsgLy8gQSBjb21wYWN0IGFsdGVybmF0aXZlIGZvciBgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGVwOyBpKyspYC5cblxuICB2YXIgaSA9IHNpemU7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIC8vIGB8IDBgIGlzIG1vcmUgY29tcGFjdCBhbmQgZmFzdGVyIHRoYW4gYE1hdGguZmxvb3IoKWAuXG4gICAgaWQgKz0gdXJsQWxwaGFiZXRbTWF0aC5yYW5kb20oKSAqIDY0IHwgMF07XG4gIH1cblxuICByZXR1cm4gaWQ7XG59O1xuXG52YXIgY29tbW9uUHJvcGVydGllcyA9IFsnbmFtZScsICdtZXNzYWdlJywgJ3N0YWNrJywgJ2NvZGUnXTtcblxudmFyIFJlamVjdFdpdGhWYWx1ZSA9IGZ1bmN0aW9uIFJlamVjdFdpdGhWYWx1ZShwYXlsb2FkKSB7XG4gIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XG4gIHRoaXMubmFtZSA9ICdSZWplY3RXaXRoVmFsdWUnO1xuICB0aGlzLm1lc3NhZ2UgPSAnUmVqZWN0ZWQnO1xufTsgLy8gUmV3b3JrZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3NlcmlhbGl6ZS1lcnJvclxuXG5cbnZhciBtaW5pU2VyaWFsaXplRXJyb3IgPSBmdW5jdGlvbiBtaW5pU2VyaWFsaXplRXJyb3IodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICB2YXIgc2ltcGxlRXJyb3IgPSB7fTtcblxuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGNvbW1vblByb3BlcnRpZXMsIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheShfaXRlcmF0b3IpLCBfaSA9IDAsIF9pdGVyYXRvciA9IF9pc0FycmF5ID8gX2l0ZXJhdG9yIDogX2l0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0oKTs7KSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgaWYgKF9pc0FycmF5KSB7XG4gICAgICAgIGlmIChfaSA+PSBfaXRlcmF0b3IubGVuZ3RoKSBicmVhaztcbiAgICAgICAgX3JlZiA9IF9pdGVyYXRvcltfaSsrXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9pID0gX2l0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKF9pLmRvbmUpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2kudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9wZXJ0eSA9IF9yZWY7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWVbcHJvcGVydHldID09PSAnc3RyaW5nJykge1xuICAgICAgICBzaW1wbGVFcnJvcltwcm9wZXJ0eV0gPSB2YWx1ZVtwcm9wZXJ0eV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpbXBsZUVycm9yO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtZXNzYWdlOiBTdHJpbmcodmFsdWUpXG4gIH07XG59O1xuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB0eXBlUHJlZml4XHJcbiAqIEBwYXJhbSBwYXlsb2FkQ3JlYXRvclxyXG4gKiBAcGFyYW0gb3B0aW9uc1xyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1RodW5rKHR5cGVQcmVmaXgsIHBheWxvYWRDcmVhdG9yLCBvcHRpb25zKSB7XG4gIHZhciBmdWxmaWxsZWQgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArICcvZnVsZmlsbGVkJywgZnVuY3Rpb24gKHJlc3VsdCwgcmVxdWVzdElkLCBhcmcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF5bG9hZDogcmVzdWx0LFxuICAgICAgbWV0YToge1xuICAgICAgICBhcmc6IGFyZyxcbiAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXG4gICAgICAgIHJlcXVlc3RTdGF0dXM6ICdmdWxmaWxsZWQnXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gIHZhciBwZW5kaW5nID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyAnL3BlbmRpbmcnLCBmdW5jdGlvbiAocmVxdWVzdElkLCBhcmcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF5bG9hZDogdW5kZWZpbmVkLFxuICAgICAgbWV0YToge1xuICAgICAgICBhcmc6IGFyZyxcbiAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXG4gICAgICAgIHJlcXVlc3RTdGF0dXM6ICdwZW5kaW5nJ1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuICB2YXIgcmVqZWN0ZWQgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArICcvcmVqZWN0ZWQnLCBmdW5jdGlvbiAoZXJyb3IsIHJlcXVlc3RJZCwgYXJnKSB7XG4gICAgdmFyIHJlamVjdGVkV2l0aFZhbHVlID0gZXJyb3IgaW5zdGFuY2VvZiBSZWplY3RXaXRoVmFsdWU7XG4gICAgdmFyIGFib3J0ZWQgPSAhIWVycm9yICYmIGVycm9yLm5hbWUgPT09ICdBYm9ydEVycm9yJztcbiAgICB2YXIgY29uZGl0aW9uID0gISFlcnJvciAmJiBlcnJvci5uYW1lID09PSAnQ29uZGl0aW9uRXJyb3InO1xuICAgIHJldHVybiB7XG4gICAgICBwYXlsb2FkOiBlcnJvciBpbnN0YW5jZW9mIFJlamVjdFdpdGhWYWx1ZSA/IGVycm9yLnBheWxvYWQgOiB1bmRlZmluZWQsXG4gICAgICBlcnJvcjogKG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemVFcnJvciB8fCBtaW5pU2VyaWFsaXplRXJyb3IpKGVycm9yIHx8ICdSZWplY3RlZCcpLFxuICAgICAgbWV0YToge1xuICAgICAgICBhcmc6IGFyZyxcbiAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXG4gICAgICAgIHJlamVjdGVkV2l0aFZhbHVlOiByZWplY3RlZFdpdGhWYWx1ZSxcbiAgICAgICAgcmVxdWVzdFN0YXR1czogJ3JlamVjdGVkJyxcbiAgICAgICAgYWJvcnRlZDogYWJvcnRlZCxcbiAgICAgICAgY29uZGl0aW9uOiBjb25kaXRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiAgdmFyIGRpc3BsYXllZFdhcm5pbmcgPSBmYWxzZTtcbiAgdmFyIEFDID0gdHlwZW9mIEFib3J0Q29udHJvbGxlciAhPT0gJ3VuZGVmaW5lZCcgPyBBYm9ydENvbnRyb2xsZXIgOlxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBfY2xhc3MoKSB7XG4gICAgICB0aGlzLnNpZ25hbCA9IHtcbiAgICAgICAgYWJvcnRlZDogZmFsc2UsXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgICAgICAgZGlzcGF0Y2hFdmVudDogZnVuY3Rpb24gZGlzcGF0Y2hFdmVudCgpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIG9uYWJvcnQ6IGZ1bmN0aW9uIG9uYWJvcnQoKSB7fSxcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHt9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBfY2xhc3MucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmFib3J0ID0gZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIWRpc3BsYXllZFdhcm5pbmcpIHtcbiAgICAgICAgICBkaXNwbGF5ZWRXYXJuaW5nID0gdHJ1ZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oXCJUaGlzIHBsYXRmb3JtIGRvZXMgbm90IGltcGxlbWVudCBBYm9ydENvbnRyb2xsZXIuIFxcbklmIHlvdSB3YW50IHRvIHVzZSB0aGUgQWJvcnRDb250cm9sbGVyIHRvIHJlYWN0IHRvIGBhYm9ydGAgZXZlbnRzLCBwbGVhc2UgY29uc2lkZXIgaW1wb3J0aW5nIGEgcG9seWZpbGwgbGlrZSAnYWJvcnRjb250cm9sbGVyLXBvbHlmaWxsL2Rpc3QvYWJvcnRjb250cm9sbGVyLXBvbHlmaWxsLW9ubHknLlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gX2NsYXNzO1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gYWN0aW9uQ3JlYXRvcihhcmcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmEpIHtcbiAgICAgIHZhciByZXF1ZXN0SWQgPSBuYW5vaWQoKTtcbiAgICAgIHZhciBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQUMoKTtcbiAgICAgIHZhciBhYm9ydFJlYXNvbjtcbiAgICAgIHZhciBhYm9ydGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChfLCByZWplY3QpIHtcbiAgICAgICAgcmV0dXJuIGFib3J0Q29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdCh7XG4gICAgICAgICAgICBuYW1lOiAnQWJvcnRFcnJvcicsXG4gICAgICAgICAgICBtZXNzYWdlOiBhYm9ydFJlYXNvbiB8fCAnQWJvcnRlZCdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBzdGFydGVkID0gZmFsc2U7XG5cbiAgICAgIGZ1bmN0aW9uIGFib3J0KHJlYXNvbikge1xuICAgICAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgICAgIGFib3J0UmVhc29uID0gcmVhc29uO1xuICAgICAgICAgIGFib3J0Q29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9taXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciBfdGVtcDMgPSBmdW5jdGlvbiBfdGVtcDMoX3Jlc3VsdCkge1xuICAgICAgICAgICAgaWYgKF9leGl0MikgcmV0dXJuIF9yZXN1bHQ7XG4gICAgICAgICAgICAvLyBXZSBkaXNwYXRjaCB0aGUgcmVzdWx0IGFjdGlvbiBfYWZ0ZXJfIHRoZSBjYXRjaCwgdG8gYXZvaWQgaGF2aW5nIGFueSBlcnJvcnNcbiAgICAgICAgICAgIC8vIGhlcmUgZ2V0IHN3YWxsb3dlZCBieSB0aGUgdHJ5L2NhdGNoIGJsb2NrLFxuICAgICAgICAgICAgLy8gcGVyIGh0dHBzOi8vdHdpdHRlci5jb20vZGFuX2FicmFtb3Yvc3RhdHVzLzc3MDkxNDIyMTYzODk0MjcyMFxuICAgICAgICAgICAgLy8gYW5kIGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvdHV0b3JpYWxzL2FkdmFuY2VkLXR1dG9yaWFsI2FzeW5jLWVycm9yLWhhbmRsaW5nLWxvZ2ljLWluLXRodW5rc1xuICAgICAgICAgICAgdmFyIHNraXBEaXNwYXRjaCA9IG9wdGlvbnMgJiYgIW9wdGlvbnMuZGlzcGF0Y2hDb25kaXRpb25SZWplY3Rpb24gJiYgcmVqZWN0ZWQubWF0Y2goZmluYWxBY3Rpb24pICYmIGZpbmFsQWN0aW9uLm1ldGEuY29uZGl0aW9uO1xuXG4gICAgICAgICAgICBpZiAoIXNraXBEaXNwYXRjaCkge1xuICAgICAgICAgICAgICBkaXNwYXRjaChmaW5hbEFjdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmaW5hbEFjdGlvbjtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdmFyIF9leGl0MiA9IGZhbHNlO1xuICAgICAgICAgIHZhciBmaW5hbEFjdGlvbjtcblxuICAgICAgICAgIHZhciBfdGVtcDQgPSBfY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5jb25kaXRpb24gJiYgb3B0aW9ucy5jb25kaXRpb24oYXJnLCB7XG4gICAgICAgICAgICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICAgICAgICAgICAgZXh0cmE6IGV4dHJhXG4gICAgICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgICAgICAgICAgICAgdGhyb3cge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdDb25kaXRpb25FcnJvcicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0Fib3J0ZWQgZHVlIHRvIGNvbmRpdGlvbiBjYWxsYmFjayByZXR1cm5pbmcgZmFsc2UuJ1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGRpc3BhdGNoKHBlbmRpbmcocmVxdWVzdElkLCBhcmcpKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoUHJvbWlzZS5yYWNlKFthYm9ydGVkUHJvbWlzZSwgUHJvbWlzZS5yZXNvbHZlKHBheWxvYWRDcmVhdG9yKGFyZywge1xuICAgICAgICAgICAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgICAgICAgICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICAgICAgICAgICAgZXh0cmE6IGV4dHJhLFxuICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcbiAgICAgICAgICAgICAgc2lnbmFsOiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLFxuICAgICAgICAgICAgICByZWplY3RXaXRoVmFsdWU6IGZ1bmN0aW9uIHJlamVjdFdpdGhWYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVqZWN0V2l0aFZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUmVqZWN0V2l0aFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdGVkKHJlc3VsdCwgcmVxdWVzdElkLCBhcmcpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZChyZXN1bHQsIHJlcXVlc3RJZCwgYXJnKTtcbiAgICAgICAgICAgIH0pXSkpLnRoZW4oZnVuY3Rpb24gKF9Qcm9taXNlJHJhY2UpIHtcbiAgICAgICAgICAgICAgZmluYWxBY3Rpb24gPSBfUHJvbWlzZSRyYWNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgZmluYWxBY3Rpb24gPSByZWplY3RlZChlcnIsIHJlcXVlc3RJZCwgYXJnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoX3RlbXA0ICYmIF90ZW1wNC50aGVuID8gX3RlbXA0LnRoZW4oX3RlbXAzKSA6IF90ZW1wMyhfdGVtcDQpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcbiAgICAgICAgfVxuICAgICAgfSgpO1xuXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihwcm9taXNlLCB7XG4gICAgICAgIGFib3J0OiBhYm9ydCxcbiAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXG4gICAgICAgIGFyZzogYXJnXG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWN0aW9uQ3JlYXRvciwge1xuICAgIHBlbmRpbmc6IHBlbmRpbmcsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkLFxuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHR5cGVQcmVmaXg6IHR5cGVQcmVmaXhcbiAgfSk7XG59XG4vKipcclxuICogQHB1YmxpY1xyXG4gKi9cblxuZnVuY3Rpb24gdW53cmFwUmVzdWx0KGFjdGlvbikge1xuICBpZiAoYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEucmVqZWN0ZWRXaXRoVmFsdWUpIHtcbiAgICB0aHJvdyBhY3Rpb24ucGF5bG9hZDtcbiAgfVxuXG4gIGlmIChhY3Rpb24uZXJyb3IpIHtcbiAgICB0aHJvdyBhY3Rpb24uZXJyb3I7XG4gIH1cblxuICByZXR1cm4gYWN0aW9uLnBheWxvYWQ7XG59XG5cbnZhciBoYXNNYXRjaEZ1bmN0aW9uID0gZnVuY3Rpb24gaGFzTWF0Y2hGdW5jdGlvbih2KSB7XG4gIHJldHVybiB2ICYmIHR5cGVvZiB2Lm1hdGNoID09PSAnZnVuY3Rpb24nO1xufTtcblxudmFyIG1hdGNoZXMgPSBmdW5jdGlvbiBtYXRjaGVzKG1hdGNoZXIsIGFjdGlvbikge1xuICBpZiAoaGFzTWF0Y2hGdW5jdGlvbihtYXRjaGVyKSkge1xuICAgIHJldHVybiBtYXRjaGVyLm1hdGNoKGFjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG1hdGNoZXIoYWN0aW9uKTtcbiAgfVxufTtcbi8qKlxyXG4gKiBBIGhpZ2hlci1vcmRlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IG1heSBiZSB1c2VkIHRvIGNoZWNrXHJcbiAqIHdoZXRoZXIgYW4gYWN0aW9uIG1hdGNoZXMgYW55IG9uZSBvZiB0aGUgc3VwcGxpZWQgdHlwZSBndWFyZHMgb3IgYWN0aW9uXHJcbiAqIGNyZWF0b3JzLlxyXG4gKlxyXG4gKiBAcGFyYW0gbWF0Y2hlcnMgVGhlIHR5cGUgZ3VhcmRzIG9yIGFjdGlvbiBjcmVhdG9ycyB0byBtYXRjaCBhZ2FpbnN0LlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGlzQW55T2YoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtYXRjaGVycyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtYXRjaGVyc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgcmV0dXJuIG1hdGNoZXJzLnNvbWUoZnVuY3Rpb24gKG1hdGNoZXIpIHtcbiAgICAgIHJldHVybiBtYXRjaGVzKG1hdGNoZXIsIGFjdGlvbik7XG4gICAgfSk7XG4gIH07XG59XG4vKipcclxuICogQSBoaWdoZXItb3JkZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBjaGVja1xyXG4gKiB3aGV0aGVyIGFuIGFjdGlvbiBtYXRjaGVzIGFsbCBvZiB0aGUgc3VwcGxpZWQgdHlwZSBndWFyZHMgb3IgYWN0aW9uXHJcbiAqIGNyZWF0b3JzLlxyXG4gKlxyXG4gKiBAcGFyYW0gbWF0Y2hlcnMgVGhlIHR5cGUgZ3VhcmRzIG9yIGFjdGlvbiBjcmVhdG9ycyB0byBtYXRjaCBhZ2FpbnN0LlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5mdW5jdGlvbiBpc0FsbE9mKCkge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1hdGNoZXJzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgbWF0Y2hlcnNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgcmV0dXJuIG1hdGNoZXJzLmV2ZXJ5KGZ1bmN0aW9uIChtYXRjaGVyKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlcyhtYXRjaGVyLCBhY3Rpb24pO1xuICAgIH0pO1xuICB9O1xufVxuLyoqXHJcbiAqIEBwYXJhbSBhY3Rpb24gQSByZWR1eCBhY3Rpb25cclxuICogQHBhcmFtIHZhbGlkU3RhdHVzIEFuIGFycmF5IG9mIHZhbGlkIG1ldGEucmVxdWVzdFN0YXR1cyB2YWx1ZXNcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xuXG5mdW5jdGlvbiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIHZhbGlkU3RhdHVzKSB7XG4gIGlmICghYWN0aW9uIHx8ICFhY3Rpb24ubWV0YSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgaGFzVmFsaWRSZXF1ZXN0SWQgPSB0eXBlb2YgYWN0aW9uLm1ldGEucmVxdWVzdElkID09PSAnc3RyaW5nJztcbiAgdmFyIGhhc1ZhbGlkUmVxdWVzdFN0YXR1cyA9IHZhbGlkU3RhdHVzLmluZGV4T2YoYWN0aW9uLm1ldGEucmVxdWVzdFN0YXR1cykgPiAtMTtcbiAgcmV0dXJuIGhhc1ZhbGlkUmVxdWVzdElkICYmIGhhc1ZhbGlkUmVxdWVzdFN0YXR1cztcbn1cblxuZnVuY3Rpb24gaXNBc3luY1RodW5rQXJyYXkoYSkge1xuICByZXR1cm4gdHlwZW9mIGFbMF0gPT09ICdmdW5jdGlvbicgJiYgJ3BlbmRpbmcnIGluIGFbMF0gJiYgJ2Z1bGZpbGxlZCcgaW4gYVswXSAmJiAncmVqZWN0ZWQnIGluIGFbMF07XG59XG5cbmZ1bmN0aW9uIGlzUGVuZGluZygpIHtcbiAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhc3luY1RodW5rcyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgIGFzeW5jVGh1bmtzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gIH1cblxuICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFsncGVuZGluZyddKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcbiAgICByZXR1cm4gaXNQZW5kaW5nKCkoYXN5bmNUaHVua3NbMF0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAvLyBub3RlOiB0aGlzIHR5cGUgd2lsbCBiZSBjb3JyZWN0IGJlY2F1c2Ugd2UgaGF2ZSBhdCBsZWFzdCAxIGFzeW5jVGh1bmtcbiAgICB2YXIgbWF0Y2hlcnMgPSBhc3luY1RodW5rcy5tYXAoZnVuY3Rpb24gKGFzeW5jVGh1bmspIHtcbiAgICAgIHJldHVybiBhc3luY1RodW5rLnBlbmRpbmc7XG4gICAgfSk7XG4gICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XG4gICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xuICB9O1xufVxuZnVuY3Rpb24gaXNSZWplY3RlZCgpIHtcbiAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhc3luY1RodW5rcyA9IG5ldyBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgIGFzeW5jVGh1bmtzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gIH1cblxuICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFsncmVqZWN0ZWQnXSk7XG4gICAgfTtcbiAgfVxuXG4gIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XG4gICAgcmV0dXJuIGlzUmVqZWN0ZWQoKShhc3luY1RodW5rc1swXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIC8vIG5vdGU6IHRoaXMgdHlwZSB3aWxsIGJlIGNvcnJlY3QgYmVjYXVzZSB3ZSBoYXZlIGF0IGxlYXN0IDEgYXN5bmNUaHVua1xuICAgIHZhciBtYXRjaGVycyA9IGFzeW5jVGh1bmtzLm1hcChmdW5jdGlvbiAoYXN5bmNUaHVuaykge1xuICAgICAgcmV0dXJuIGFzeW5jVGh1bmsucmVqZWN0ZWQ7XG4gICAgfSk7XG4gICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XG4gICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xuICB9O1xufVxuZnVuY3Rpb24gaXNSZWplY3RlZFdpdGhWYWx1ZSgpIHtcbiAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhc3luY1RodW5rcyA9IG5ldyBBcnJheShfbGVuNSksIF9rZXk1ID0gMDsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgIGFzeW5jVGh1bmtzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gIH1cblxuICB2YXIgaGFzRmxhZyA9IGZ1bmN0aW9uIGhhc0ZsYWcoYWN0aW9uKSB7XG4gICAgcmV0dXJuIGFjdGlvbiAmJiBhY3Rpb24ubWV0YSAmJiBhY3Rpb24ubWV0YS5yZWplY3RlZFdpdGhWYWx1ZTtcbiAgfTtcblxuICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FsbE9mKGlzUmVqZWN0ZWQuYXBwbHkodm9pZCAwLCBhc3luY1RodW5rcyksIGhhc0ZsYWcpO1xuICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xuICAgIH07XG4gIH1cblxuICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xuICAgIHJldHVybiBpc1JlamVjdGVkV2l0aFZhbHVlKCkoYXN5bmNUaHVua3NbMF0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbGxPZihpc1JlamVjdGVkLmFwcGx5KHZvaWQgMCwgYXN5bmNUaHVua3MpLCBoYXNGbGFnKTtcbiAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XG4gIH07XG59XG5mdW5jdGlvbiBpc0Z1bGZpbGxlZCgpIHtcbiAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCBhc3luY1RodW5rcyA9IG5ldyBBcnJheShfbGVuNiksIF9rZXk2ID0gMDsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykge1xuICAgIGFzeW5jVGh1bmtzW19rZXk2XSA9IGFyZ3VtZW50c1tfa2V5Nl07XG4gIH1cblxuICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFsnZnVsZmlsbGVkJ10pO1xuICAgIH07XG4gIH1cblxuICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xuICAgIHJldHVybiBpc0Z1bGZpbGxlZCgpKGFzeW5jVGh1bmtzWzBdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgLy8gbm90ZTogdGhpcyB0eXBlIHdpbGwgYmUgY29ycmVjdCBiZWNhdXNlIHdlIGhhdmUgYXQgbGVhc3QgMSBhc3luY1RodW5rXG4gICAgdmFyIG1hdGNoZXJzID0gYXN5bmNUaHVua3MubWFwKGZ1bmN0aW9uIChhc3luY1RodW5rKSB7XG4gICAgICByZXR1cm4gYXN5bmNUaHVuay5mdWxmaWxsZWQ7XG4gICAgfSk7XG4gICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XG4gICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xuICB9O1xufVxuZnVuY3Rpb24gaXNBc3luY1RodW5rQWN0aW9uKCkge1xuICBmb3IgKHZhciBfbGVuNyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFzeW5jVGh1bmtzID0gbmV3IEFycmF5KF9sZW43KSwgX2tleTcgPSAwOyBfa2V5NyA8IF9sZW43OyBfa2V5NysrKSB7XG4gICAgYXN5bmNUaHVua3NbX2tleTddID0gYXJndW1lbnRzW19rZXk3XTtcbiAgfVxuXG4gIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgWydwZW5kaW5nJywgJ2Z1bGZpbGxlZCcsICdyZWplY3RlZCddKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcbiAgICByZXR1cm4gaXNBc3luY1RodW5rQWN0aW9uKCkoYXN5bmNUaHVua3NbMF0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAvLyBub3RlOiB0aGlzIHR5cGUgd2lsbCBiZSBjb3JyZWN0IGJlY2F1c2Ugd2UgaGF2ZSBhdCBsZWFzdCAxIGFzeW5jVGh1bmtcbiAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcblxuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGFzeW5jVGh1bmtzLCBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yKSwgX2kgPSAwLCBfaXRlcmF0b3IgPSBfaXNBcnJheSA/IF9pdGVyYXRvciA6IF9pdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIGlmIChfaXNBcnJheSkge1xuICAgICAgICBpZiAoX2kgPj0gX2l0ZXJhdG9yLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaXRlcmF0b3JbX2krK107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfaSA9IF9pdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChfaS5kb25lKSBicmVhaztcbiAgICAgICAgX3JlZiA9IF9pLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXN5bmNUaHVuayA9IF9yZWY7XG4gICAgICBtYXRjaGVycy5wdXNoKGFzeW5jVGh1bmsucGVuZGluZywgYXN5bmNUaHVuay5yZWplY3RlZCwgYXN5bmNUaHVuay5mdWxmaWxsZWQpO1xuICAgIH1cblxuICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xuICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcbiAgfTtcbn1cblxuLy8gd2UgYXNzdW1lIFJUSyB3aWxsIGJlIHVzZWQgd2l0aCBSZWFjdCBOYXRpdmUgYW5kIG90aGVyIFByb3h5LWxlc3Ncbi8vIGVudmlyb25tZW50cy4gIEluIGFkZGl0aW9uLCB0aGF0J3MgaG93IEltbWVyIDQgYmVoYXZlZCwgYW5kIHNpbmNlXG4vLyB3ZSB3YW50IHRvIHNoaXAgdGhpcyBpbiBhbiBSVEsgbWlub3IsIHdlIHNob3VsZCBrZWVwIHRoZSBzYW1lIGJlaGF2aW9yLlxuXG5lbmFibGVFUzUoKTtcblxuZXhwb3J0IHsgTWlkZGxld2FyZUFycmF5LCBjb25maWd1cmVTdG9yZSwgY3JlYXRlQWN0aW9uLCBjcmVhdGVBc3luY1RodW5rLCBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvciwgY3JlYXRlRW50aXR5QWRhcHRlciwgY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLCBjcmVhdGVSZWR1Y2VyLCBjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUsIGNyZWF0ZVNsaWNlLCBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUsIGdldERlZmF1bHRNaWRkbGV3YXJlLCBnZXRUeXBlLCBpc0FsbE9mLCBpc0FueU9mLCBpc0FzeW5jVGh1bmtBY3Rpb24sIGlzRnVsZmlsbGVkLCBpc0ltbXV0YWJsZURlZmF1bHQsIGlzUGVuZGluZywgaXNQbGFpbiwgaXNQbGFpbk9iamVjdCwgaXNSZWplY3RlZCwgaXNSZWplY3RlZFdpdGhWYWx1ZSwgbmFub2lkLCB1bndyYXBSZXN1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZHV4LXRvb2xraXQuZXNtLmpzLm1hcFxuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuZXJyb3Ige1xcclxcbiAgY29sb3I6IHJlZDtcXHJcXG59XFxyXFxuLnByaW1hcnkge1xcclxcbiAgY29sb3I6IGJsdWU7XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3dlYmFwcC9zcmMvd29ya2VyL21haW4uY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsVUFBVTtBQUNaO0FBQ0E7RUFDRSxXQUFXO0FBQ2JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmVycm9yIHtcXHJcXG4gIGNvbG9yOiByZWQ7XFxyXFxufVxcclxcbi5wcmltYXJ5IHtcXHJcXG4gIGNvbG9yOiBibHVlO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59OyIsImZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2gsXG4gICAgICAgIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIHRodW5rID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKCk7XG50aHVuay53aXRoRXh0cmFBcmd1bWVudCA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZTtcblxuZXhwb3J0IGRlZmF1bHQgdGh1bms7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCJhc3luYyBmdW5jdGlvbiBjbGllbnQoZW5kcG9pbnQsIGpzb24sIHsgbWV0aG9kLCBib2R5LCAuLi5jdXN0b21Db25mIH0gPSB7fSkge1xyXG4gIGxldCBoZWFkZXJzO1xyXG4gIGlmIChqc29uKSB7XHJcbiAgICBoZWFkZXJzID0geyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH07XHJcbiAgfVxyXG5cclxuICBjb25zdCBjb25maWcgPSB7XHJcbiAgICBtZXRob2QsXHJcbiAgICAuLi5jdXN0b21Db25mLFxyXG4gICAgaGVhZGVyczoge1xyXG4gICAgICAuLi5oZWFkZXJzLFxyXG4gICAgICAuLi5jdXN0b21Db25mLmhlYWRlcnMsXHJcbiAgICB9LFxyXG4gIH07XHJcblxyXG4gIGlmIChib2R5KSB7XHJcbiAgICBpZiAoanNvbikge1xyXG4gICAgICBjb25maWcuYm9keSA9IEpTT04uc3RyaW5naWZ5KGJvZHkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgZm9yIChjb25zdCBuYW1lIGluIGJvZHkpIHtcclxuICAgICAgICBmb3JtRGF0YS5hcHBlbmQobmFtZSwgYm9keVtuYW1lXSk7XHJcbiAgICAgIH1cclxuICAgICAgY29uZmlnLmJvZHkgPSBmb3JtRGF0YTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGxldCBkYXRhO1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHdpbmRvdy5mZXRjaChlbmRwb2ludCwgY29uZmlnKTtcclxuICAgIGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihkYXRhLnN0YXR1c1RleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkYXRhO1xyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVyci5tZXNzYWdlIHx8IGRhdGEpO1xyXG4gIH1cclxufVxyXG5cclxuY2xpZW50LmdldCA9IChlbmRwb2ludCwgY3VzdG9tQ29uZiA9IHt9KSA9PiB7XHJcbiAgcmV0dXJuIGNsaWVudChlbmRwb2ludCwgdHJ1ZSwgeyBtZXRob2Q6ICdHRVQnLCAuLi5jdXN0b21Db25mIH0pO1xyXG59O1xyXG5cclxuY2xpZW50LnBvc3QgPSAoZW5kcG9pbnQsIGJvZHksIGpzb24sIGN1c3RvbUNvbmYgPSB7fSkgPT4ge1xyXG4gIHJldHVybiBjbGllbnQoZW5kcG9pbnQsIGpzb24sIHsgbWV0aG9kOiAnUE9TVCcsIGJvZHksIC4uLmN1c3RvbUNvbmYgfSk7XHJcbn07XHJcblxyXG5jbGllbnQucHV0ID0gKGVuZHBvaW50LCBib2R5LCBqc29uLCBjdXN0b21Db25mID0ge30pID0+IHtcclxuICByZXR1cm4gY2xpZW50KGVuZHBvaW50LCBqc29uLCB7IG1ldGhvZDogJ1BVVCcsIGJvZHksIC4uLmN1c3RvbUNvbmYgfSk7XHJcbn07XHJcblxyXG5jbGllbnQuZGVsID0gKGVuZHBvaW50LCBib2R5LCBqc29uLCBjdXN0b21Db25mID0ge30pID0+IHtcclxuICByZXR1cm4gY2xpZW50KGVuZHBvaW50LCBqc29uLCB7IG1ldGhvZDogJ0RFTEVURScsIGJvZHksIC4uLmN1c3RvbUNvbmYgfSk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHsgY2xpZW50IH07XHJcbiIsImNvbnN0IHtcclxuICBsb2FkaW5nQWN0aW9uLFxyXG4gIGVycm9yQWN0aW9uLFxyXG4gIHJlZ2lzdGVyZWRBY3Rpb24sXHJcbiAgcmVtb3ZlZEFjdGlvbixcclxuICB3b3JrZXJzTG9hZGVkQWN0aW9uLFxyXG59ID0gcmVxdWlyZSgnLi9zdG9yZScpO1xyXG5jb25zdCB3b3JrZXJTdmMgPSByZXF1aXJlKCcuL3dvcmtlci5jbGllbnQnKTtcclxuXHJcbmV4cG9ydHMucmVnaXN0ZXIgPSAoZGF0YSkgPT4gYXN5bmMgKGRpc3BhdGNoKSA9PiB7XHJcbiAgZGlzcGF0Y2gobG9hZGluZ0FjdGlvbigpKTtcclxuICB0cnkge1xyXG4gICAgY29uc3Qgd29ya2VyID0gYXdhaXQgd29ya2VyU3ZjLnJlZ2lzdGVyKGRhdGEpO1xyXG4gICAgZGlzcGF0Y2gocmVnaXN0ZXJlZEFjdGlvbih3b3JrZXIpKTtcclxuICB9IGNhdGNoIChlcnIpIHtcclxuICAgIGRpc3BhdGNoKGVycm9yQWN0aW9uKGBnYWdhbCBtZW5kYWZ0YXJrYW4gJHtkYXRhLm5hbWV9YCkpO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydHMucmVtb3ZlID0gKGlkKSA9PiBhc3luYyAoZGlzcGF0Y2gpID0+IHtcclxuICBkaXNwYXRjaChsb2FkaW5nQWN0aW9uKCkpO1xyXG4gIHRyeSB7XHJcbiAgICBhd2FpdCB3b3JrZXJTdmMucmVtb3ZlKGlkKTtcclxuICAgIGRpc3BhdGNoKHJlbW92ZWRBY3Rpb24oaWQpKTtcclxuICB9IGNhdGNoIChlcnIpIHtcclxuICAgIGRpc3BhdGNoKGVycm9yQWN0aW9uKCdnYWdhbCBtZW5naGFwdXMgcGVrZXJqYScpKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnRzLmdldExpc3QgPSBhc3luYyAoZGlzcGF0Y2gpID0+IHtcclxuICBkaXNwYXRjaChsb2FkaW5nQWN0aW9uKCkpO1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB3b3JrZXJzID0gYXdhaXQgd29ya2VyU3ZjLmxpc3QoKTtcclxuICAgIGRpc3BhdGNoKHdvcmtlcnNMb2FkZWRBY3Rpb24od29ya2VycykpO1xyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgZGlzcGF0Y2goZXJyb3JBY3Rpb24oJ2dhZ2FsIG1lbXVhdCBkYWZ0YXIgcGVrZXJqYScpKTtcclxuICB9XHJcbn07XHJcbiIsImV4cG9ydHMuU0VSVklDRV9CQVNFVVJMID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6NzAwMSc7XHJcbiIsImNvbnN0IHsgU0VSVklDRV9CQVNFVVJMIH0gPSByZXF1aXJlKCcuL2NvbmZpZycpO1xyXG5cclxuLy8gc2V0dXAgc3RhdGVcclxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xyXG4gIGxvYWRpbmc6IGZhbHNlLFxyXG4gIGVycm9yOiBudWxsLFxyXG4gIHdvcmtlcnM6IFtdLFxyXG59O1xyXG5cclxuZnVuY3Rpb24gbG9hZGluZyhzdGF0ZSkge1xyXG4gIHN0YXRlLmxvYWRpbmcgPSB0cnVlO1xyXG4gIHN0YXRlLmVycm9yID0gbnVsbDtcclxufVxyXG5cclxuZnVuY3Rpb24gZXJyb3Ioc3RhdGUsIGFjdGlvbikge1xyXG4gIHN0YXRlLmxvYWRpbmcgPSBmYWxzZTtcclxuICBzdGF0ZS5lcnJvciA9IGFjdGlvbi5wYXlsb2FkO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjbGVhckVycm9yKHN0YXRlKSB7XHJcbiAgc3RhdGUuZXJyb3IgPSBudWxsO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZWdpc3RlcmVkKHN0YXRlLCBhY3Rpb24pIHtcclxuICBjb25zdCB3b3JrZXIgPSBhY3Rpb24ucGF5bG9hZDtcclxuICBzdGF0ZS53b3JrZXJzLnB1c2goe1xyXG4gICAgaWQ6IHdvcmtlci5pZCxcclxuICAgIG5hbWU6IHdvcmtlci5uYW1lLFxyXG4gICAgcGhvdG86IGAke1NFUlZJQ0VfQkFTRVVSTH0vcGhvdG8vJHt3b3JrZXIucGhvdG99YCxcclxuICAgIGJpbzogd29ya2VyLmJpbyxcclxuICB9KTtcclxuICBzdGF0ZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgc3RhdGUuZXJyb3IgPSBudWxsO1xyXG4gIHJldHVybiBzdGF0ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlZChzdGF0ZSwgYWN0aW9uKSB7XHJcbiAgY29uc3QgaWR4ID0gc3RhdGUud29ya2Vycy5maW5kSW5kZXgoKHQpID0+IHQuaWQgPT09IGFjdGlvbi5wYXlsb2FkKTtcclxuICBzdGF0ZS53b3JrZXJzLnNwbGljZShpZHgsIDEpO1xyXG4gIHN0YXRlLmxvYWRpbmcgPSBmYWxzZTtcclxuICBzdGF0ZS5lcnJvciA9IG51bGw7XHJcbiAgcmV0dXJuIHN0YXRlO1xyXG59XHJcblxyXG5mdW5jdGlvbiB3b3JrZXJzTG9hZGVkKHN0YXRlLCBhY3Rpb24pIHtcclxuICBzdGF0ZS53b3JrZXJzID0gYWN0aW9uLnBheWxvYWQubWFwKCh3b3JrZXIpID0+ICh7XHJcbiAgICBpZDogd29ya2VyLmlkLFxyXG4gICAgbmFtZTogd29ya2VyLm5hbWUsXHJcbiAgICBwaG90bzogYCR7U0VSVklDRV9CQVNFVVJMfS9waG90by8ke3dvcmtlci5waG90b31gLFxyXG4gICAgYmlvOiB3b3JrZXIuYmlvLFxyXG4gIH0pKTtcclxuICBzdGF0ZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgc3RhdGUuZXJyb3IgPSBudWxsO1xyXG4gIHJldHVybiBzdGF0ZTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgaW5pdGlhbFN0YXRlLFxyXG4gIHJlZ2lzdGVyZWQsXHJcbiAgcmVtb3ZlZCxcclxuICB3b3JrZXJzTG9hZGVkLFxyXG4gIGVycm9yLFxyXG4gIGxvYWRpbmcsXHJcbiAgY2xlYXJFcnJvcixcclxufTtcclxuIiwiY29uc3Qge1xyXG4gIGNyZWF0ZUFjdGlvbixcclxuICBjcmVhdGVSZWR1Y2VyLFxyXG4gIGNvbmZpZ3VyZVN0b3JlLFxyXG59ID0gcmVxdWlyZSgnQHJlZHV4anMvdG9vbGtpdCcpO1xyXG5jb25zdCB7XHJcbiAgaW5pdGlhbFN0YXRlLFxyXG4gIGVycm9yLFxyXG4gIGxvYWRpbmcsXHJcbiAgcmVnaXN0ZXJlZCxcclxuICByZW1vdmVkLFxyXG4gIHdvcmtlcnNMb2FkZWQsXHJcbiAgY2xlYXJFcnJvcixcclxufSA9IHJlcXVpcmUoJy4vcmVkdWNlcicpO1xyXG5jb25zdCB0aHVua01pZGRsZXdhcmUgPSByZXF1aXJlKCdyZWR1eC10aHVuaycpO1xyXG5cclxuY29uc3QgZXJyb3JBY3Rpb24gPSBjcmVhdGVBY3Rpb24oJ2Vycm9yJyk7XHJcbmNvbnN0IGxvYWRpbmdBY3Rpb24gPSBjcmVhdGVBY3Rpb24oJ2xvYWRpbmcnKTtcclxuY29uc3QgcmVnaXN0ZXJlZEFjdGlvbiA9IGNyZWF0ZUFjdGlvbigncmVnaXN0ZXJlZCcpO1xyXG5jb25zdCByZW1vdmVkQWN0aW9uID0gY3JlYXRlQWN0aW9uKCdyZW1vdmVkJyk7XHJcbmNvbnN0IHdvcmtlcnNMb2FkZWRBY3Rpb24gPSBjcmVhdGVBY3Rpb24oJ3dvcmtlcnNMb2FkZWQnKTtcclxuY29uc3QgY2xlYXJFcnJvckFjdGlvbiA9IGNyZWF0ZUFjdGlvbignY2xlYXJFcnJvcicpO1xyXG5cclxuY29uc3QgcmVkdWNlciA9IGNyZWF0ZVJlZHVjZXIoaW5pdGlhbFN0YXRlLCB7XHJcbiAgW2Vycm9yQWN0aW9uXTogZXJyb3IsXHJcbiAgW2NsZWFyRXJyb3JBY3Rpb25dOiBjbGVhckVycm9yLFxyXG4gIFtsb2FkaW5nQWN0aW9uXTogbG9hZGluZyxcclxuICBbcmVnaXN0ZXJlZEFjdGlvbl06IHJlZ2lzdGVyZWQsXHJcbiAgW3JlbW92ZWRBY3Rpb25dOiByZW1vdmVkLFxyXG4gIFt3b3JrZXJzTG9hZGVkQWN0aW9uXTogd29ya2Vyc0xvYWRlZCxcclxufSk7XHJcblxyXG5jb25zdCBzdG9yZSQgPSBjb25maWd1cmVTdG9yZSh7XHJcbiAgcmVkdWNlcixcclxuICBtaWRkbGV3YXJlOiBbdGh1bmtNaWRkbGV3YXJlLmRlZmF1bHRdLFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIHN0b3JlJCxcclxuICBlcnJvckFjdGlvbixcclxuICBsb2FkaW5nQWN0aW9uLFxyXG4gIHJlZ2lzdGVyZWRBY3Rpb24sXHJcbiAgcmVtb3ZlZEFjdGlvbixcclxuICB3b3JrZXJzTG9hZGVkQWN0aW9uLFxyXG4gIGNsZWFyRXJyb3JBY3Rpb24sXHJcbn07XHJcbiIsImNvbnN0IHsgY2xpZW50IH0gPSByZXF1aXJlKCcuLi9saWIvaHR0cC1jbGllbnQnKTtcclxuXHJcbmNvbnN0IHsgU0VSVklDRV9CQVNFVVJMIH0gPSByZXF1aXJlKCcuL2NvbmZpZycpO1xyXG5cclxuZnVuY3Rpb24gcmVnaXN0ZXIoZGF0YSkge1xyXG4gIHJldHVybiBjbGllbnQucG9zdChgJHtTRVJWSUNFX0JBU0VVUkx9L3JlZ2lzdGVyYCwgZGF0YSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxpc3QoKSB7XHJcbiAgcmV0dXJuIGNsaWVudC5nZXQoYCR7U0VSVklDRV9CQVNFVVJMfS9saXN0YCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZShpZCkge1xyXG4gIHJldHVybiBjbGllbnQuZGVsKGAke1NFUlZJQ0VfQkFTRVVSTH0vcmVtb3ZlP2lkPSR7aWR9YCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluZm8oaWQpIHtcclxuICByZXR1cm4gY2xpZW50LmdldChgJHtTRVJWSUNFX0JBU0VVUkx9L2luZm8/aWQ9JHtpZH1gKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgcmVnaXN0ZXIsXHJcbiAgbGlzdCxcclxuICByZW1vdmUsXHJcbiAgaW5mbyxcclxufTtcclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlID0gT2JqZWN0LmNyZWF0ZShtb2R1bGUpO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsICdleHBvcnRzJywge1xuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0c2V0OiAoKSA9PiB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0VTIE1vZHVsZXMgbWF5IG5vdCBhc3NpZ24gbW9kdWxlLmV4cG9ydHMgb3IgZXhwb3J0cy4qLCBVc2UgRVNNIGV4cG9ydCBzeW50YXgsIGluc3RlYWQ6ICcgKyBtb2R1bGUuaWQpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiLyohXG4gKiBWdWUuanMgdjIuNi4xMlxuICogKGMpIDIwMTQtMjAyMCBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4vKiAgKi9cblxudmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIFRoZXNlIGhlbHBlcnMgcHJvZHVjZSBiZXR0ZXIgVk0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZy5cbmZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gIHJldHVybiB2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICByZXR1cm4gdiA9PT0gZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAodmFsKSB7XG4gIHJldHVybiAoXG4gICAgaXNEZWYodmFsKSAmJlxuICAgIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbidcbiAgKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG59KTtcblxuLyoqXG4gKiBDYXBpdGFsaXplIGEgc3RyaW5nLlxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn0pO1xuXG4vKipcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gKi9cbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxuICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gKiBzaW5jZSBuYXRpdmUgYmluZCBpcyBub3cgcGVyZm9ybWFudCBlbm91Z2ggaW4gbW9zdCBicm93c2Vycy5cbiAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cbiAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoYSwgYiwgYykgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgc3RyaW5nIGNvbnRhaW5pbmcgc3RhdGljIGtleXMgZnJvbSBjb21waWxlciBtb2R1bGVzLlxuICovXG5mdW5jdGlvbiBnZW5TdGF0aWNLZXlzIChtb2R1bGVzKSB7XG4gIHJldHVybiBtb2R1bGVzLnJlZHVjZShmdW5jdGlvbiAoa2V5cywgbSkge1xuICAgIHJldHVybiBrZXlzLmNvbmNhdChtLnN0YXRpY0tleXMgfHwgW10pXG4gIH0sIFtdKS5qb2luKCcsJylcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0d28gdmFsdWVzIGFyZSBsb29zZWx5IGVxdWFsIC0gdGhhdCBpcyxcbiAqIGlmIHRoZXkgYXJlIHBsYWluIG9iamVjdHMsIGRvIHRoZXkgaGF2ZSB0aGUgc2FtZSBzaGFwZT9cbiAqL1xuZnVuY3Rpb24gbG9vc2VFcXVhbCAoYSwgYikge1xuICBpZiAoYSA9PT0gYikgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpc09iamVjdEEgPSBpc09iamVjdChhKTtcbiAgdmFyIGlzT2JqZWN0QiA9IGlzT2JqZWN0KGIpO1xuICBpZiAoaXNPYmplY3RBICYmIGlzT2JqZWN0Qikge1xuICAgIHRyeSB7XG4gICAgICB2YXIgaXNBcnJheUEgPSBBcnJheS5pc0FycmF5KGEpO1xuICAgICAgdmFyIGlzQXJyYXlCID0gQXJyYXkuaXNBcnJheShiKTtcbiAgICAgIGlmIChpc0FycmF5QSAmJiBpc0FycmF5Qikge1xuICAgICAgICByZXR1cm4gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChlLCBiW2ldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmIChhIGluc3RhbmNlb2YgRGF0ZSAmJiBiIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gYS5nZXRUaW1lKCkgPT09IGIuZ2V0VGltZSgpXG4gICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgZmlyc3QgaW5kZXggYXQgd2hpY2ggYSBsb29zZWx5IGVxdWFsIHZhbHVlIGNhbiBiZVxuICogZm91bmQgaW4gdGhlIGFycmF5IChpZiB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdCwgdGhlIGFycmF5IG11c3RcbiAqIGNvbnRhaW4gYW4gb2JqZWN0IG9mIHRoZSBzYW1lIHNoYXBlKSwgb3IgLTEgaWYgaXQgaXMgbm90IHByZXNlbnQuXG4gKi9cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZiAoYXJyLCB2YWwpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobG9vc2VFcXVhbChhcnJbaV0sIHZhbCkpIHsgcmV0dXJuIGkgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG4vKipcbiAqIEVuc3VyZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmx5IG9uY2UuXG4gKi9cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBTU1JfQVRUUiA9ICdkYXRhLXNlcnZlci1yZW5kZXJlZCc7XG5cbnZhciBBU1NFVF9UWVBFUyA9IFtcbiAgJ2NvbXBvbmVudCcsXG4gICdkaXJlY3RpdmUnLFxuICAnZmlsdGVyJ1xuXTtcblxudmFyIExJRkVDWUNMRV9IT09LUyA9IFtcbiAgJ2JlZm9yZUNyZWF0ZScsXG4gICdjcmVhdGVkJyxcbiAgJ2JlZm9yZU1vdW50JyxcbiAgJ21vdW50ZWQnLFxuICAnYmVmb3JlVXBkYXRlJyxcbiAgJ3VwZGF0ZWQnLFxuICAnYmVmb3JlRGVzdHJveScsXG4gICdkZXN0cm95ZWQnLFxuICAnYWN0aXZhdGVkJyxcbiAgJ2RlYWN0aXZhdGVkJyxcbiAgJ2Vycm9yQ2FwdHVyZWQnLFxuICAnc2VydmVyUHJlZmV0Y2gnXG5dO1xuXG4vKiAgKi9cblxuXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICovXG4gIHByb2R1Y3Rpb25UaXA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byByZWNvcmQgcGVyZlxuICAgKi9cbiAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBFcnJvciBoYW5kbGVyIGZvciB3YXRjaGVyIGVycm9yc1xuICAgKi9cbiAgZXJyb3JIYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnNcbiAgICovXG4gIHdhcm5IYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcbiAgICovXG4gIGlnbm9yZWRFbGVtZW50czogW10sXG5cbiAgLyoqXG4gICAqIEN1c3RvbSB1c2VyIGtleSBhbGlhc2VzIGZvciB2LW9uXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAga2V5Q29kZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnRcbiAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRBdHRyOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgYW4gdW5rbm93biBlbGVtZW50LlxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBpc1Vua25vd25FbGVtZW50OiBubyxcblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgKi9cbiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBtdXN0VXNlUHJvcDogbm8sXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gdXBkYXRlcyBhc3luY2hyb25vdXNseS4gSW50ZW5kZWQgdG8gYmUgdXNlZCBieSBWdWUgVGVzdCBVdGlsc1xuICAgKiBUaGlzIHdpbGwgc2lnbmlmaWNhbnRseSByZWR1Y2UgcGVyZm9ybWFuY2UgaWYgc2V0IHRvIGZhbHNlLlxuICAgKi9cbiAgYXN5bmM6IHRydWUsXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IExJRkVDWUNMRV9IT09LU1xufSk7XG5cbi8qICAqL1xuXG4vKipcbiAqIHVuaWNvZGUgbGV0dGVycyB1c2VkIGZvciBwYXJzaW5nIGh0bWwgdGFncywgY29tcG9uZW50IG5hbWVzIGFuZCBwcm9wZXJ0eSBwYXRocy5cbiAqIHVzaW5nIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNTMvc2VtYW50aWNzLXNjcmlwdGluZy5odG1sI3BvdGVudGlhbGN1c3RvbWVsZW1lbnRuYW1lXG4gKiBza2lwcGluZyBcXHUxMDAwMC1cXHVFRkZGRiBkdWUgdG8gaXQgZnJlZXppbmcgdXAgUGhhbnRvbUpTXG4gKi9cbnZhciB1bmljb2RlUmVnRXhwID0gL2EtekEtWlxcdTAwQjdcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDNGLVxcdTIwNDBcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkQvO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoICQgb3IgX1xuICovXG5mdW5jdGlvbiBpc1Jlc2VydmVkIChzdHIpIHtcbiAgdmFyIGMgPSAoc3RyICsgJycpLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiBjID09PSAweDI0IHx8IGMgPT09IDB4NUZcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZGVmIChvYmosIGtleSwgdmFsLCBlbnVtZXJhYmxlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIHZhbHVlOiB2YWwsXG4gICAgZW51bWVyYWJsZTogISFlbnVtZXJhYmxlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBQYXJzZSBzaW1wbGUgcGF0aC5cbiAqL1xudmFyIGJhaWxSRSA9IG5ldyBSZWdFeHAoKFwiW15cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIi4kX1xcXFxkXVwiKSk7XG5mdW5jdGlvbiBwYXJzZVBhdGggKHBhdGgpIHtcbiAgaWYgKGJhaWxSRS50ZXN0KHBhdGgpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLicpO1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghb2JqKSB7IHJldHVybiB9XG4gICAgICBvYmogPSBvYmpbc2VnbWVudHNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gb2JqXG4gIH1cbn1cblxuLyogICovXG5cbi8vIGNhbiB3ZSB1c2UgX19wcm90b19fP1xudmFyIGhhc1Byb3RvID0gJ19fcHJvdG9fXycgaW4ge307XG5cbi8vIEJyb3dzZXIgZW52aXJvbm1lbnQgc25pZmZpbmdcbnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbnZhciBpbldlZXggPSB0eXBlb2YgV1hFbnZpcm9ubWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgISFXWEVudmlyb25tZW50LnBsYXRmb3JtO1xudmFyIHdlZXhQbGF0Zm9ybSA9IGluV2VleCAmJiBXWEVudmlyb25tZW50LnBsYXRmb3JtLnRvTG93ZXJDYXNlKCk7XG52YXIgVUEgPSBpbkJyb3dzZXIgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbnZhciBpc0lFID0gVUEgJiYgL21zaWV8dHJpZGVudC8udGVzdChVQSk7XG52YXIgaXNJRTkgPSBVQSAmJiBVQS5pbmRleE9mKCdtc2llIDkuMCcpID4gMDtcbnZhciBpc0VkZ2UgPSBVQSAmJiBVQS5pbmRleE9mKCdlZGdlLycpID4gMDtcbnZhciBpc0FuZHJvaWQgPSAoVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMCkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2FuZHJvaWQnKTtcbnZhciBpc0lPUyA9IChVQSAmJiAvaXBob25lfGlwYWR8aXBvZHxpb3MvLnRlc3QoVUEpKSB8fCAod2VleFBsYXRmb3JtID09PSAnaW9zJyk7XG52YXIgaXNDaHJvbWUgPSBVQSAmJiAvY2hyb21lXFwvXFxkKy8udGVzdChVQSkgJiYgIWlzRWRnZTtcbnZhciBpc1BoYW50b21KUyA9IFVBICYmIC9waGFudG9tanMvLnRlc3QoVUEpO1xudmFyIGlzRkYgPSBVQSAmJiBVQS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pO1xuXG4vLyBGaXJlZm94IGhhcyBhIFwid2F0Y2hcIiBmdW5jdGlvbiBvbiBPYmplY3QucHJvdG90eXBlLi4uXG52YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoO1xuXG52YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5pZiAoaW5Ccm93c2VyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXSAmJiBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJlxuICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNldCAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFtrZXldID09PSB0cnVlXG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoa2V5KSB7XG4gICAgICB0aGlzLnNldFtrZXldID0gdHJ1ZTtcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcblxuICAgIHJldHVybiBTZXQ7XG4gIH0oKSk7XG59XG5cbi8qICAqL1xuXG52YXIgd2FybiA9IG5vb3A7XG52YXIgdGlwID0gbm9vcDtcbnZhciBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gKG5vb3ApOyAvLyB3b3JrIGFyb3VuZCBmbG93IGNoZWNrXG52YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IChub29wKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuICB2YXIgY2xhc3NpZnkgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHJcbiAgICAucmVwbGFjZShjbGFzc2lmeVJFLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1VwcGVyQ2FzZSgpOyB9KVxuICAgIC5yZXBsYWNlKC9bLV9dL2csICcnKTsgfTtcblxuICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XG5cbiAgICBpZiAoY29uZmlnLndhcm5IYW5kbGVyKSB7XG4gICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XG4gICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSB3YXJuXTogXCIgKyBtc2cgKyB0cmFjZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aXAgPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltWdWUgdGlwXTogXCIgKyBtc2cgKyAoXG4gICAgICAgIHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJ1xuICAgICAgKSk7XG4gICAgfVxuICB9O1xuXG4gIGZvcm1hdENvbXBvbmVudE5hbWUgPSBmdW5jdGlvbiAodm0sIGluY2x1ZGVGaWxlKSB7XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICc8Um9vdD4nXG4gICAgfVxuICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsXG4gICAgICA/IHZtLm9wdGlvbnNcbiAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9uc1xuICAgICAgICA6IHZtO1xuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlO1xuICAgIGlmICghbmFtZSAmJiBmaWxlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBmaWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcbiAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCI8XCIgKyAoY2xhc3NpZnkobmFtZSkpICsgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXG4gICAgICAoZmlsZSAmJiBpbmNsdWRlRmlsZSAhPT0gZmFsc2UgPyAoXCIgYXQgXCIgKyBmaWxlKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbikge1xuICAgIHZhciByZXMgPSAnJztcbiAgICB3aGlsZSAobikge1xuICAgICAgaWYgKG4gJSAyID09PSAxKSB7IHJlcyArPSBzdHI7IH1cbiAgICAgIGlmIChuID4gMSkgeyBzdHIgKz0gc3RyOyB9XG4gICAgICBuID4+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH07XG5cbiAgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkge1xuICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgIHZhciBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgbGFzdCA9IHRyZWVbdHJlZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSsrO1xuICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA+IDApIHtcbiAgICAgICAgICAgIHRyZWVbdHJlZS5sZW5ndGggLSAxXSA9IFtsYXN0LCBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2VdO1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJlZS5wdXNoKHZtKTtcbiAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuICdcXG5cXG5mb3VuZCBpblxcblxcbicgKyB0cmVlXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoXCJcIiArIChpID09PSAwID8gJy0tLT4gJyA6IHJlcGVhdCgnICcsIDUgKyBpICogMikpICsgKEFycmF5LmlzQXJyYXkodm0pXG4gICAgICAgICAgICA/ICgoZm9ybWF0Q29tcG9uZW50TmFtZSh2bVswXSkpICsgXCIuLi4gKFwiICsgKHZtWzFdKSArIFwiIHJlY3Vyc2l2ZSBjYWxscylcIilcbiAgICAgICAgICAgIDogZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpKTsgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcXG5cXG4oZm91bmQgaW4gXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIpXCIpXG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCA9IDA7XG5cbi8qKlxuICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXG4gKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICovXG52YXIgRGVwID0gZnVuY3Rpb24gRGVwICgpIHtcbiAgdGhpcy5pZCA9IHVpZCsrO1xuICB0aGlzLnN1YnMgPSBbXTtcbn07XG5cbkRlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24gYWRkU3ViIChzdWIpIHtcbiAgdGhpcy5zdWJzLnB1c2goc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUucmVtb3ZlU3ViID0gZnVuY3Rpb24gcmVtb3ZlU3ViIChzdWIpIHtcbiAgcmVtb3ZlKHRoaXMuc3Vicywgc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgaWYgKERlcC50YXJnZXQpIHtcbiAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcbiAgfVxufTtcblxuRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkgKCkge1xuICAvLyBzdGFiaWxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgLy8gc3VicyBhcmVuJ3Qgc29ydGVkIGluIHNjaGVkdWxlciBpZiBub3QgcnVubmluZyBhc3luY1xuICAgIC8vIHdlIG5lZWQgdG8gc29ydCB0aGVtIG5vdyB0byBtYWtlIHN1cmUgdGhleSBmaXJlIGluIGNvcnJlY3RcbiAgICAvLyBvcmRlclxuICAgIHN1YnMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyBUaGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4vLyBUaGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIG9ubHkgb25lIHdhdGNoZXJcbi8vIGNhbiBiZSBldmFsdWF0ZWQgYXQgYSB0aW1lLlxuRGVwLnRhcmdldCA9IG51bGw7XG52YXIgdGFyZ2V0U3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gcHVzaFRhcmdldCAodGFyZ2V0KSB7XG4gIHRhcmdldFN0YWNrLnB1c2godGFyZ2V0KTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldDtcbn1cblxuZnVuY3Rpb24gcG9wVGFyZ2V0ICgpIHtcbiAgdGFyZ2V0U3RhY2sucG9wKCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXRTdGFja1t0YXJnZXRTdGFjay5sZW5ndGggLSAxXTtcbn1cblxuLyogICovXG5cbnZhciBWTm9kZSA9IGZ1bmN0aW9uIFZOb2RlIChcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgdGV4dCxcbiAgZWxtLFxuICBjb250ZXh0LFxuICBjb21wb25lbnRPcHRpb25zLFxuICBhc3luY0ZhY3Rvcnlcbikge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnRleHQgPSB0ZXh0O1xuICB0aGlzLmVsbSA9IGVsbTtcbiAgdGhpcy5ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5mbkNvbnRleHQgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5PcHRpb25zID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuU2NvcGVJZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5rZXkgPSBkYXRhICYmIGRhdGEua2V5O1xuICB0aGlzLmNvbXBvbmVudE9wdGlvbnMgPSBjb21wb25lbnRPcHRpb25zO1xuICB0aGlzLmNvbXBvbmVudEluc3RhbmNlID0gdW5kZWZpbmVkO1xuICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5yYXcgPSBmYWxzZTtcbiAgdGhpcy5pc1N0YXRpYyA9IGZhbHNlO1xuICB0aGlzLmlzUm9vdEluc2VydCA9IHRydWU7XG4gIHRoaXMuaXNDb21tZW50ID0gZmFsc2U7XG4gIHRoaXMuaXNDbG9uZWQgPSBmYWxzZTtcbiAgdGhpcy5pc09uY2UgPSBmYWxzZTtcbiAgdGhpcy5hc3luY0ZhY3RvcnkgPSBhc3luY0ZhY3Rvcnk7XG4gIHRoaXMuYXN5bmNNZXRhID0gdW5kZWZpbmVkO1xuICB0aGlzLmlzQXN5bmNQbGFjZWhvbGRlciA9IGZhbHNlO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY2hpbGQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLy8gREVQUkVDQVRFRDogYWxpYXMgZm9yIGNvbXBvbmVudEluc3RhbmNlIGZvciBiYWNrd2FyZHMgY29tcGF0LlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnByb3RvdHlwZUFjY2Vzc29ycy5jaGlsZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmNvbXBvbmVudEluc3RhbmNlXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVk5vZGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxudmFyIGNyZWF0ZUVtcHR5Vk5vZGUgPSBmdW5jdGlvbiAodGV4dCkge1xuICBpZiAoIHRleHQgPT09IHZvaWQgMCApIHRleHQgPSAnJztcblxuICB2YXIgbm9kZSA9IG5ldyBWTm9kZSgpO1xuICBub2RlLnRleHQgPSB0ZXh0O1xuICBub2RlLmlzQ29tbWVudCA9IHRydWU7XG4gIHJldHVybiBub2RlXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUgKHZhbCkge1xuICByZXR1cm4gbmV3IFZOb2RlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFN0cmluZyh2YWwpKVxufVxuXG4vLyBvcHRpbWl6ZWQgc2hhbGxvdyBjbG9uZVxuLy8gdXNlZCBmb3Igc3RhdGljIG5vZGVzIGFuZCBzbG90IG5vZGVzIGJlY2F1c2UgdGhleSBtYXkgYmUgcmV1c2VkIGFjcm9zc1xuLy8gbXVsdGlwbGUgcmVuZGVycywgY2xvbmluZyB0aGVtIGF2b2lkcyBlcnJvcnMgd2hlbiBET00gbWFuaXB1bGF0aW9ucyByZWx5XG4vLyBvbiB0aGVpciBlbG0gcmVmZXJlbmNlLlxuZnVuY3Rpb24gY2xvbmVWTm9kZSAodm5vZGUpIHtcbiAgdmFyIGNsb25lZCA9IG5ldyBWTm9kZShcbiAgICB2bm9kZS50YWcsXG4gICAgdm5vZGUuZGF0YSxcbiAgICAvLyAjNzk3NVxuICAgIC8vIGNsb25lIGNoaWxkcmVuIGFycmF5IHRvIGF2b2lkIG11dGF0aW5nIG9yaWdpbmFsIGluIGNhc2Ugb2YgY2xvbmluZ1xuICAgIC8vIGEgY2hpbGQuXG4gICAgdm5vZGUuY2hpbGRyZW4gJiYgdm5vZGUuY2hpbGRyZW4uc2xpY2UoKSxcbiAgICB2bm9kZS50ZXh0LFxuICAgIHZub2RlLmVsbSxcbiAgICB2bm9kZS5jb250ZXh0LFxuICAgIHZub2RlLmNvbXBvbmVudE9wdGlvbnMsXG4gICAgdm5vZGUuYXN5bmNGYWN0b3J5XG4gICk7XG4gIGNsb25lZC5ucyA9IHZub2RlLm5zO1xuICBjbG9uZWQuaXNTdGF0aWMgPSB2bm9kZS5pc1N0YXRpYztcbiAgY2xvbmVkLmtleSA9IHZub2RlLmtleTtcbiAgY2xvbmVkLmlzQ29tbWVudCA9IHZub2RlLmlzQ29tbWVudDtcbiAgY2xvbmVkLmZuQ29udGV4dCA9IHZub2RlLmZuQ29udGV4dDtcbiAgY2xvbmVkLmZuT3B0aW9ucyA9IHZub2RlLmZuT3B0aW9ucztcbiAgY2xvbmVkLmZuU2NvcGVJZCA9IHZub2RlLmZuU2NvcGVJZDtcbiAgY2xvbmVkLmFzeW5jTWV0YSA9IHZub2RlLmFzeW5jTWV0YTtcbiAgY2xvbmVkLmlzQ2xvbmVkID0gdHJ1ZTtcbiAgcmV0dXJuIGNsb25lZFxufVxuXG4vKlxuICogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoXG4gKiBkeW5hbWljYWxseSBhY2Nlc3NpbmcgbWV0aG9kcyBvbiBBcnJheSBwcm90b3R5cGVcbiAqL1xuXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbnZhciBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pO1xuXG52YXIgbWV0aG9kc1RvUGF0Y2ggPSBbXG4gICdwdXNoJyxcbiAgJ3BvcCcsXG4gICdzaGlmdCcsXG4gICd1bnNoaWZ0JyxcbiAgJ3NwbGljZScsXG4gICdzb3J0JyxcbiAgJ3JldmVyc2UnXG5dO1xuXG4vKipcbiAqIEludGVyY2VwdCBtdXRhdGluZyBtZXRob2RzIGFuZCBlbWl0IGV2ZW50c1xuICovXG5tZXRob2RzVG9QYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgLy8gY2FjaGUgb3JpZ2luYWwgbWV0aG9kXG4gIHZhciBvcmlnaW5hbCA9IGFycmF5UHJvdG9bbWV0aG9kXTtcbiAgZGVmKGFycmF5TWV0aG9kcywgbWV0aG9kLCBmdW5jdGlvbiBtdXRhdG9yICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICB2YXIgcmVzdWx0ID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgdmFyIG9iID0gdGhpcy5fX29iX187XG4gICAgdmFyIGluc2VydGVkO1xuICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICBjYXNlICdwdXNoJzpcbiAgICAgIGNhc2UgJ3Vuc2hpZnQnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3M7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdzcGxpY2UnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3Muc2xpY2UoMik7XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChpbnNlcnRlZCkgeyBvYi5vYnNlcnZlQXJyYXkoaW5zZXJ0ZWQpOyB9XG4gICAgLy8gbm90aWZ5IGNoYW5nZVxuICAgIG9iLmRlcC5ub3RpZnkoKTtcbiAgICByZXR1cm4gcmVzdWx0XG4gIH0pO1xufSk7XG5cbi8qICAqL1xuXG52YXIgYXJyYXlLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJyYXlNZXRob2RzKTtcblxuLyoqXG4gKiBJbiBzb21lIGNhc2VzIHdlIG1heSB3YW50IHRvIGRpc2FibGUgb2JzZXJ2YXRpb24gaW5zaWRlIGEgY29tcG9uZW50J3NcbiAqIHVwZGF0ZSBjb21wdXRhdGlvbi5cbiAqL1xudmFyIHNob3VsZE9ic2VydmUgPSB0cnVlO1xuXG5mdW5jdGlvbiB0b2dnbGVPYnNlcnZpbmcgKHZhbHVlKSB7XG4gIHNob3VsZE9ic2VydmUgPSB2YWx1ZTtcbn1cblxuLyoqXG4gKiBPYnNlcnZlciBjbGFzcyB0aGF0IGlzIGF0dGFjaGVkIHRvIGVhY2ggb2JzZXJ2ZWRcbiAqIG9iamVjdC4gT25jZSBhdHRhY2hlZCwgdGhlIG9ic2VydmVyIGNvbnZlcnRzIHRoZSB0YXJnZXRcbiAqIG9iamVjdCdzIHByb3BlcnR5IGtleXMgaW50byBnZXR0ZXIvc2V0dGVycyB0aGF0XG4gKiBjb2xsZWN0IGRlcGVuZGVuY2llcyBhbmQgZGlzcGF0Y2ggdXBkYXRlcy5cbiAqL1xudmFyIE9ic2VydmVyID0gZnVuY3Rpb24gT2JzZXJ2ZXIgKHZhbHVlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgdGhpcy5kZXAgPSBuZXcgRGVwKCk7XG4gIHRoaXMudm1Db3VudCA9IDA7XG4gIGRlZih2YWx1ZSwgJ19fb2JfXycsIHRoaXMpO1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBpZiAoaGFzUHJvdG8pIHtcbiAgICAgIHByb3RvQXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29weUF1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcywgYXJyYXlLZXlzKTtcbiAgICB9XG4gICAgdGhpcy5vYnNlcnZlQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud2Fsayh2YWx1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV2FsayB0aHJvdWdoIGFsbCBwcm9wZXJ0aWVzIGFuZCBjb252ZXJ0IHRoZW0gaW50b1xuICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gKiB2YWx1ZSB0eXBlIGlzIE9iamVjdC5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMShvYmosIGtleXNbaV0pO1xuICB9XG59O1xuXG4vKipcbiAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5IChpdGVtcykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9ic2VydmUoaXRlbXNbaV0pO1xuICB9XG59O1xuXG4vLyBoZWxwZXJzXG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgaW50ZXJjZXB0aW5nXG4gKiB0aGUgcHJvdG90eXBlIGNoYWluIHVzaW5nIF9fcHJvdG9fX1xuICovXG5mdW5jdGlvbiBwcm90b0F1Z21lbnQgKHRhcmdldCwgc3JjKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG4gIHRhcmdldC5fX3Byb3RvX18gPSBzcmM7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8gKi9cbn1cblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZ1xuICogaGlkZGVuIHByb3BlcnRpZXMuXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBjb3B5QXVnbWVudCAodGFyZ2V0LCBzcmMsIGtleXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGRlZih0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdCB0byBjcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UgZm9yIGEgdmFsdWUsXG4gKiByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgaWYgc3VjY2Vzc2Z1bGx5IG9ic2VydmVkLFxuICogb3IgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGhhcyBvbmUuXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmUgKHZhbHVlLCBhc1Jvb3REYXRhKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IHZhbHVlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2I7XG4gIGlmIChoYXNPd24odmFsdWUsICdfX29iX18nKSAmJiB2YWx1ZS5fX29iX18gaW5zdGFuY2VvZiBPYnNlcnZlcikge1xuICAgIG9iID0gdmFsdWUuX19vYl9fO1xuICB9IGVsc2UgaWYgKFxuICAgIHNob3VsZE9ic2VydmUgJiZcbiAgICAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSAmJlxuICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkgJiZcbiAgICBPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSAmJlxuICAgICF2YWx1ZS5faXNWdWVcbiAgKSB7XG4gICAgb2IgPSBuZXcgT2JzZXJ2ZXIodmFsdWUpO1xuICB9XG4gIGlmIChhc1Jvb3REYXRhICYmIG9iKSB7XG4gICAgb2Iudm1Db3VudCsrO1xuICB9XG4gIHJldHVybiBvYlxufVxuXG4vKipcbiAqIERlZmluZSBhIHJlYWN0aXZlIHByb3BlcnR5IG9uIGFuIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lUmVhY3RpdmUkJDEgKFxuICBvYmosXG4gIGtleSxcbiAgdmFsLFxuICBjdXN0b21TZXR0ZXIsXG4gIHNoYWxsb3dcbikge1xuICB2YXIgZGVwID0gbmV3IERlcCgpO1xuXG4gIHZhciBwcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gY2F0ZXIgZm9yIHByZS1kZWZpbmVkIGdldHRlci9zZXR0ZXJzXG4gIHZhciBnZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5nZXQ7XG4gIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG4gIGlmICgoIWdldHRlciB8fCBzZXR0ZXIpICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICB2YWwgPSBvYmpba2V5XTtcbiAgfVxuXG4gIHZhciBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZSh2YWwpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlR2V0dGVyICgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICBkZXAuZGVwZW5kKCk7XG4gICAgICAgIGlmIChjaGlsZE9iKSB7XG4gICAgICAgICAgY2hpbGRPYi5kZXAuZGVwZW5kKCk7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gcmVhY3RpdmVTZXR0ZXIgKG5ld1ZhbCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKG5ld1ZhbCA9PT0gdmFsdWUgfHwgKG5ld1ZhbCAhPT0gbmV3VmFsICYmIHZhbHVlICE9PSB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY3VzdG9tU2V0dGVyKSB7XG4gICAgICAgIGN1c3RvbVNldHRlcigpO1xuICAgICAgfVxuICAgICAgLy8gIzc5ODE6IGZvciBhY2Nlc3NvciBwcm9wZXJ0aWVzIHdpdGhvdXQgc2V0dGVyXG4gICAgICBpZiAoZ2V0dGVyICYmICFzZXR0ZXIpIHsgcmV0dXJuIH1cbiAgICAgIGlmIChzZXR0ZXIpIHtcbiAgICAgICAgc2V0dGVyLmNhbGwob2JqLCBuZXdWYWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gbmV3VmFsO1xuICAgICAgfVxuICAgICAgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUobmV3VmFsKTtcbiAgICAgIGRlcC5ub3RpZnkoKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCBhIHByb3BlcnR5IG9uIGFuIG9iamVjdC4gQWRkcyB0aGUgbmV3IHByb3BlcnR5IGFuZFxuICogdHJpZ2dlcnMgY2hhbmdlIG5vdGlmaWNhdGlvbiBpZiB0aGUgcHJvcGVydHkgZG9lc24ndFxuICogYWxyZWFkeSBleGlzdC5cbiAqL1xuZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBzZXQgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5sZW5ndGggPSBNYXRoLm1heCh0YXJnZXQubGVuZ3RoLCBrZXkpO1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxLCB2YWwpO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoa2V5IGluIHRhcmdldCAmJiAhKGtleSBpbiBPYmplY3QucHJvdG90eXBlKSkge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBhZGRpbmcgcmVhY3RpdmUgcHJvcGVydGllcyB0byBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICdhdCBydW50aW1lIC0gZGVjbGFyZSBpdCB1cGZyb250IGluIHRoZSBkYXRhIG9wdGlvbi4nXG4gICAgKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKCFvYikge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBkZWZpbmVSZWFjdGl2ZSQkMShvYi52YWx1ZSwga2V5LCB2YWwpO1xuICBvYi5kZXAubm90aWZ5KCk7XG4gIHJldHVybiB2YWxcbn1cblxuLyoqXG4gKiBEZWxldGUgYSBwcm9wZXJ0eSBhbmQgdHJpZ2dlciBjaGFuZ2UgaWYgbmVjZXNzYXJ5LlxuICovXG5mdW5jdGlvbiBkZWwgKHRhcmdldCwga2V5KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBkZWxldGUgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBkZWxldGluZyBwcm9wZXJ0aWVzIG9uIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJy0ganVzdCBzZXQgaXQgdG8gbnVsbC4nXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoIWhhc093bih0YXJnZXQsIGtleSkpIHtcbiAgICByZXR1cm5cbiAgfVxuICBkZWxldGUgdGFyZ2V0W2tleV07XG4gIGlmICghb2IpIHtcbiAgICByZXR1cm5cbiAgfVxuICBvYi5kZXAubm90aWZ5KCk7XG59XG5cbi8qKlxuICogQ29sbGVjdCBkZXBlbmRlbmNpZXMgb24gYXJyYXkgZWxlbWVudHMgd2hlbiB0aGUgYXJyYXkgaXMgdG91Y2hlZCwgc2luY2VcbiAqIHdlIGNhbm5vdCBpbnRlcmNlcHQgYXJyYXkgZWxlbWVudCBhY2Nlc3MgbGlrZSBwcm9wZXJ0eSBnZXR0ZXJzLlxuICovXG5mdW5jdGlvbiBkZXBlbmRBcnJheSAodmFsdWUpIHtcbiAgZm9yICh2YXIgZSA9ICh2b2lkIDApLCBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGUgPSB2YWx1ZVtpXTtcbiAgICBlICYmIGUuX19vYl9fICYmIGUuX19vYl9fLmRlcC5kZXBlbmQoKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgZGVwZW5kQXJyYXkoZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIE9wdGlvbiBvdmVyd3JpdGluZyBzdHJhdGVnaWVzIGFyZSBmdW5jdGlvbnMgdGhhdCBoYW5kbGVcbiAqIGhvdyB0byBtZXJnZSBhIHBhcmVudCBvcHRpb24gdmFsdWUgYW5kIGEgY2hpbGQgb3B0aW9uXG4gKiB2YWx1ZSBpbnRvIHRoZSBmaW5hbCB2YWx1ZS5cbiAqL1xudmFyIHN0cmF0cyA9IGNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG5cbi8qKlxuICogT3B0aW9ucyB3aXRoIHJlc3RyaWN0aW9uc1xuICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIm9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgaW5zdGFuY2UgXCIgK1xuICAgICAgICAnY3JlYXRpb24gd2l0aCB0aGUgYG5ld2Aga2V5d29yZC4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCwgY2hpbGQpXG4gIH07XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgcmVjdXJzaXZlbHkgbWVyZ2VzIHR3byBkYXRhIG9iamVjdHMgdG9nZXRoZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YSAodG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7IHJldHVybiB0byB9XG4gIHZhciBrZXksIHRvVmFsLCBmcm9tVmFsO1xuXG4gIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgPyBSZWZsZWN0Lm93bktleXMoZnJvbSlcbiAgICA6IE9iamVjdC5rZXlzKGZyb20pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgLy8gaW4gY2FzZSB0aGUgb2JqZWN0IGlzIGFscmVhZHkgb2JzZXJ2ZWQuLi5cbiAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgdG9WYWwgPSB0b1trZXldO1xuICAgIGZyb21WYWwgPSBmcm9tW2tleV07XG4gICAgaWYgKCFoYXNPd24odG8sIGtleSkpIHtcbiAgICAgIHNldCh0bywga2V5LCBmcm9tVmFsKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgdG9WYWwgIT09IGZyb21WYWwgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QodG9WYWwpICYmXG4gICAgICBpc1BsYWluT2JqZWN0KGZyb21WYWwpXG4gICAgKSB7XG4gICAgICBtZXJnZURhdGEodG9WYWwsIGZyb21WYWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBEYXRhXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YU9yRm4gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICAvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xuICAgIGlmICghY2hpbGRWYWwpIHtcbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgIH1cbiAgICAvLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXG4gICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvXG4gICAgLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXG4gICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbiAoKSB7XG4gICAgICByZXR1cm4gbWVyZ2VEYXRhKFxuICAgICAgICB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbicgPyBjaGlsZFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogY2hpbGRWYWwsXG4gICAgICAgIHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbicgPyBwYXJlbnRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IHBhcmVudFZhbFxuICAgICAgKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkSW5zdGFuY2VEYXRhRm4gKCkge1xuICAgICAgLy8gaW5zdGFuY2UgbWVyZ2VcbiAgICAgIHZhciBpbnN0YW5jZURhdGEgPSB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBjaGlsZFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBjaGlsZFZhbDtcbiAgICAgIHZhciBkZWZhdWx0RGF0YSA9IHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwYXJlbnRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogcGFyZW50VmFsO1xuICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VEYXRhKGluc3RhbmNlRGF0YSwgZGVmYXVsdERhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERhdGFcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIGlmIChjaGlsZFZhbCAmJiB0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ1RoZSBcImRhdGFcIiBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gJyArXG4gICAgICAgICd0aGF0IHJldHVybnMgYSBwZXItaW5zdGFuY2UgdmFsdWUgaW4gY29tcG9uZW50ICcgK1xuICAgICAgICAnZGVmaW5pdGlvbnMuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbClcbiAgfVxuXG4gIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKVxufTtcblxuLyoqXG4gKiBIb29rcyBhbmQgcHJvcHMgYXJlIG1lcmdlZCBhcyBhcnJheXMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlSG9vayAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWxcbikge1xuICB2YXIgcmVzID0gY2hpbGRWYWxcbiAgICA/IHBhcmVudFZhbFxuICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkVmFsKVxuICAgICAgICA/IGNoaWxkVmFsXG4gICAgICAgIDogW2NoaWxkVmFsXVxuICAgIDogcGFyZW50VmFsO1xuICByZXR1cm4gcmVzXG4gICAgPyBkZWR1cGVIb29rcyhyZXMpXG4gICAgOiByZXNcbn1cblxuZnVuY3Rpb24gZGVkdXBlSG9va3MgKGhvb2tzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChyZXMuaW5kZXhPZihob29rc1tpXSkgPT09IC0xKSB7XG4gICAgICByZXMucHVzaChob29rc1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuTElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xufSk7XG5cbi8qKlxuICogQXNzZXRzXG4gKlxuICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICogb3B0aW9ucyBhbmQgcGFyZW50IG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQXNzZXRzIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTtcbiAgaWYgKGNoaWxkVmFsKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgICByZXR1cm4gZXh0ZW5kKHJlcywgY2hpbGRWYWwpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbkFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG59KTtcblxuLyoqXG4gKiBXYXRjaGVycy5cbiAqXG4gKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lXG4gKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAqL1xuc3RyYXRzLndhdGNoID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgLy8gd29yayBhcm91bmQgRmlyZWZveCdzIE9iamVjdC5wcm90b3R5cGUud2F0Y2guLi5cbiAgaWYgKHBhcmVudFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgcGFyZW50VmFsID0gdW5kZWZpbmVkOyB9XG4gIGlmIChjaGlsZFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgY2hpbGRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0ge307XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGZvciAodmFyIGtleSQxIGluIGNoaWxkVmFsKSB7XG4gICAgdmFyIHBhcmVudCA9IHJldFtrZXkkMV07XG4gICAgdmFyIGNoaWxkID0gY2hpbGRWYWxba2V5JDFdO1xuICAgIGlmIChwYXJlbnQgJiYgIUFycmF5LmlzQXJyYXkocGFyZW50KSkge1xuICAgICAgcGFyZW50ID0gW3BhcmVudF07XG4gICAgfVxuICAgIHJldFtrZXkkMV0gPSBwYXJlbnRcbiAgICAgID8gcGFyZW50LmNvbmNhdChjaGlsZClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZCkgPyBjaGlsZCA6IFtjaGlsZF07XG4gIH1cbiAgcmV0dXJuIHJldFxufTtcblxuLyoqXG4gKiBPdGhlciBvYmplY3QgaGFzaGVzLlxuICovXG5zdHJhdHMucHJvcHMgPVxuc3RyYXRzLm1ldGhvZHMgPVxuc3RyYXRzLmluamVjdCA9XG5zdHJhdHMuY29tcHV0ZWQgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICBpZiAoY2hpbGRWYWwgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBpZiAoY2hpbGRWYWwpIHsgZXh0ZW5kKHJldCwgY2hpbGRWYWwpOyB9XG4gIHJldHVybiByZXRcbn07XG5zdHJhdHMucHJvdmlkZSA9IG1lcmdlRGF0YU9yRm47XG5cbi8qKlxuICogRGVmYXVsdCBzdHJhdGVneS5cbiAqL1xudmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkXG4gICAgPyBwYXJlbnRWYWxcbiAgICA6IGNoaWxkVmFsXG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGNvbXBvbmVudCBuYW1lc1xuICovXG5mdW5jdGlvbiBjaGVja0NvbXBvbmVudHMgKG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMuY29tcG9uZW50cykge1xuICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ29tcG9uZW50TmFtZSAobmFtZSkge1xuICBpZiAoIW5ldyBSZWdFeHAoKFwiXlthLXpBLVpdW1xcXFwtXFxcXC4wLTlfXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCJdKiRcIikpLnRlc3QobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgY29tcG9uZW50IG5hbWU6IFwiJyArIG5hbWUgKyAnXCIuIENvbXBvbmVudCBuYW1lcyAnICtcbiAgICAgICdzaG91bGQgY29uZm9ybSB0byB2YWxpZCBjdXN0b20gZWxlbWVudCBuYW1lIGluIGh0bWw1IHNwZWNpZmljYXRpb24uJ1xuICAgICk7XG4gIH1cbiAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCAnICtcbiAgICAgICdpZDogJyArIG5hbWVcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlXG4gKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyAob3B0aW9ucywgdm0pIHtcbiAgdmFyIHByb3BzID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKCFwcm9wcykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBpLCB2YWwsIG5hbWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFsID0gcHJvcHNbaV07XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbmFtZSA9IGNhbWVsaXplKHZhbCk7XG4gICAgICAgIHJlc1tuYW1lXSA9IHsgdHlwZTogbnVsbCB9O1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oJ3Byb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIHZhbCA9IHByb3BzW2tleV07XG4gICAgICBuYW1lID0gY2FtZWxpemUoa2V5KTtcbiAgICAgIHJlc1tuYW1lXSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IHZhbFxuICAgICAgICA6IHsgdHlwZTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcInByb3BzXFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHByb3BzKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICBvcHRpb25zLnByb3BzID0gcmVzO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhbGwgaW5qZWN0aW9ucyBpbnRvIE9iamVjdC1iYXNlZCBmb3JtYXRcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0IChvcHRpb25zLCB2bSkge1xuICB2YXIgaW5qZWN0ID0gb3B0aW9ucy5pbmplY3Q7XG4gIGlmICghaW5qZWN0KSB7IHJldHVybiB9XG4gIHZhciBub3JtYWxpemVkID0gb3B0aW9ucy5pbmplY3QgPSB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5qZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBub3JtYWxpemVkW2luamVjdFtpXV0gPSB7IGZyb206IGluamVjdFtpXSB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5qZWN0KSB7XG4gICAgICB2YXIgdmFsID0gaW5qZWN0W2tleV07XG4gICAgICBub3JtYWxpemVkW2tleV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyBleHRlbmQoeyBmcm9tOiBrZXkgfSwgdmFsKVxuICAgICAgICA6IHsgZnJvbTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcImluamVjdFxcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShpbmplY3QpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTm9ybWFsaXplIHJhdyBmdW5jdGlvbiBkaXJlY3RpdmVzIGludG8gb2JqZWN0IGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyAob3B0aW9ucykge1xuICB2YXIgZGlycyA9IG9wdGlvbnMuZGlyZWN0aXZlcztcbiAgaWYgKGRpcnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGlycykge1xuICAgICAgdmFyIGRlZiQkMSA9IGRpcnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgZGVmJCQxID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRpcnNba2V5XSA9IHsgYmluZDogZGVmJCQxLCB1cGRhdGU6IGRlZiQkMSB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRPYmplY3RUeXBlIChuYW1lLCB2YWx1ZSwgdm0pIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiOiBleHBlY3RlZCBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9wdGlvbiBvYmplY3RzIGludG8gYSBuZXcgb25lLlxuICogQ29yZSB1dGlsaXR5IHVzZWQgaW4gYm90aCBpbnN0YW50aWF0aW9uIGFuZCBpbmhlcml0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VPcHRpb25zIChcbiAgcGFyZW50LFxuICBjaGlsZCxcbiAgdm1cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrQ29tcG9uZW50cyhjaGlsZCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGNoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2hpbGQgPSBjaGlsZC5vcHRpb25zO1xuICB9XG5cbiAgbm9ybWFsaXplUHJvcHMoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplSW5qZWN0KGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpO1xuXG4gIC8vIEFwcGx5IGV4dGVuZHMgYW5kIG1peGlucyBvbiB0aGUgY2hpbGQgb3B0aW9ucyxcbiAgLy8gYnV0IG9ubHkgaWYgaXQgaXMgYSByYXcgb3B0aW9ucyBvYmplY3QgdGhhdCBpc24ndFxuICAvLyB0aGUgcmVzdWx0IG9mIGFub3RoZXIgbWVyZ2VPcHRpb25zIGNhbGwuXG4gIC8vIE9ubHkgbWVyZ2VkIG9wdGlvbnMgaGFzIHRoZSBfYmFzZSBwcm9wZXJ0eS5cbiAgaWYgKCFjaGlsZC5fYmFzZSkge1xuICAgIGlmIChjaGlsZC5leHRlbmRzKSB7XG4gICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5leHRlbmRzLCB2bSk7XG4gICAgfVxuICAgIGlmIChjaGlsZC5taXhpbnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5taXhpbnNbaV0sIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IHt9O1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBwYXJlbnQpIHtcbiAgICBtZXJnZUZpZWxkKGtleSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gY2hpbGQpIHtcbiAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWVyZ2VGaWVsZCAoa2V5KSB7XG4gICAgdmFyIHN0cmF0ID0gc3RyYXRzW2tleV0gfHwgZGVmYXVsdFN0cmF0O1xuICAgIG9wdGlvbnNba2V5XSA9IHN0cmF0KHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSwga2V5KTtcbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG4vKipcbiAqIFJlc29sdmUgYW4gYXNzZXQuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3NcbiAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0IChcbiAgb3B0aW9ucyxcbiAgdHlwZSxcbiAgaWQsXG4gIHdhcm5NaXNzaW5nXG4pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGFzc2V0cyA9IG9wdGlvbnNbdHlwZV07XG4gIC8vIGNoZWNrIGxvY2FsIHJlZ2lzdHJhdGlvbiB2YXJpYXRpb25zIGZpcnN0XG4gIGlmIChoYXNPd24oYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfVxuICB2YXIgY2FtZWxpemVkSWQgPSBjYW1lbGl6ZShpZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBjYW1lbGl6ZWRJZCkpIHsgcmV0dXJuIGFzc2V0c1tjYW1lbGl6ZWRJZF0gfVxuICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBQYXNjYWxDYXNlSWQpKSB7IHJldHVybiBhc3NldHNbUGFzY2FsQ2FzZUlkXSB9XG4gIC8vIGZhbGxiYWNrIHRvIHByb3RvdHlwZSBjaGFpblxuICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuTWlzc2luZyAmJiAhcmVzKSB7XG4gICAgd2FybihcbiAgICAgICdGYWlsZWQgdG8gcmVzb2x2ZSAnICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnOiAnICsgaWQsXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wIChcbiAga2V5LFxuICBwcm9wT3B0aW9ucyxcbiAgcHJvcHNEYXRhLFxuICB2bVxuKSB7XG4gIHZhciBwcm9wID0gcHJvcE9wdGlvbnNba2V5XTtcbiAgdmFyIGFic2VudCA9ICFoYXNPd24ocHJvcHNEYXRhLCBrZXkpO1xuICB2YXIgdmFsdWUgPSBwcm9wc0RhdGFba2V5XTtcbiAgLy8gYm9vbGVhbiBjYXN0aW5nXG4gIHZhciBib29sZWFuSW5kZXggPSBnZXRUeXBlSW5kZXgoQm9vbGVhbiwgcHJvcC50eXBlKTtcbiAgaWYgKGJvb2xlYW5JbmRleCA+IC0xKSB7XG4gICAgaWYgKGFic2VudCAmJiAhaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSB7XG4gICAgICAvLyBvbmx5IGNhc3QgZW1wdHkgc3RyaW5nIC8gc2FtZSBuYW1lIHRvIGJvb2xlYW4gaWZcbiAgICAgIC8vIGJvb2xlYW4gaGFzIGhpZ2hlciBwcmlvcml0eVxuICAgICAgdmFyIHN0cmluZ0luZGV4ID0gZ2V0VHlwZUluZGV4KFN0cmluZywgcHJvcC50eXBlKTtcbiAgICAgIGlmIChzdHJpbmdJbmRleCA8IDAgfHwgYm9vbGVhbkluZGV4IDwgc3RyaW5nSW5kZXgpIHtcbiAgICAgICAgdmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBjaGVjayBkZWZhdWx0IHZhbHVlXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsdWUgPSBnZXRQcm9wRGVmYXVsdFZhbHVlKHZtLCBwcm9wLCBrZXkpO1xuICAgIC8vIHNpbmNlIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGEgZnJlc2ggY29weSxcbiAgICAvLyBtYWtlIHN1cmUgdG8gb2JzZXJ2ZSBpdC5cbiAgICB2YXIgcHJldlNob3VsZE9ic2VydmUgPSBzaG91bGRPYnNlcnZlO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICBvYnNlcnZlKHZhbHVlKTtcbiAgICB0b2dnbGVPYnNlcnZpbmcocHJldlNob3VsZE9ic2VydmUpO1xuICB9XG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgLy8gc2tpcCB2YWxpZGF0aW9uIGZvciB3ZWV4IHJlY3ljbGUtbGlzdCBjaGlsZCBjb21wb25lbnQgcHJvcHNcbiAgICAhKGZhbHNlKVxuICApIHtcbiAgICBhc3NlcnRQcm9wKHByb3AsIGtleSwgdmFsdWUsIHZtLCBhYnNlbnQpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUgKHZtLCBwcm9wLCBrZXkpIHtcbiAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHZhciBkZWYgPSBwcm9wLmRlZmF1bHQ7XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tZmFjdG9yeSBkZWZhdWx0cyBmb3IgT2JqZWN0ICYgQXJyYXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF2YWxpZCkge1xuICAgIHdhcm4oXG4gICAgICBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZSAobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgdmFyIG1lc3NhZ2UgPSBcIkludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIiArXG4gICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSk7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xuICB2YXIgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgdmFyIGV4cGVjdGVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgcmVjZWl2ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSk7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSBleHBlY3RlZCB2YWx1ZVxuICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiZcbiAgICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmXG4gICAgICAhaXNCb29sZWFuKGV4cGVjdGVkVHlwZSwgcmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCIgd2l0aCB2YWx1ZSBcIiArIGV4cGVjdGVkVmFsdWU7XG4gIH1cbiAgbWVzc2FnZSArPSBcIiwgZ290IFwiICsgcmVjZWl2ZWRUeXBlICsgXCIgXCI7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxuICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwid2l0aCB2YWx1ZSBcIiArIHJlY2VpdmVkVmFsdWUgKyBcIi5cIjtcbiAgfVxuICByZXR1cm4gbWVzc2FnZVxufVxuXG5mdW5jdGlvbiBzdHlsZVZhbHVlICh2YWx1ZSwgdHlwZSkge1xuICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICByZXR1cm4gKFwiXFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIilcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnTnVtYmVyJykge1xuICAgIHJldHVybiAoXCJcIiArIChOdW1iZXIodmFsdWUpKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiXCIgKyB2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0V4cGxpY2FibGUgKHZhbHVlKSB7XG4gIHZhciBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcbiAgcmV0dXJuIGV4cGxpY2l0VHlwZXMuc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbTsgfSlcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuICgpIHtcbiAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICByZXR1cm4gYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJzsgfSlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIC8vIERlYWN0aXZhdGUgZGVwcyB0cmFja2luZyB3aGlsZSBwcm9jZXNzaW5nIGVycm9yIGhhbmRsZXIgdG8gYXZvaWQgcG9zc2libGUgaW5maW5pdGUgcmVuZGVyaW5nLlxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWV4L2lzc3Vlcy8xNTA1XG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICBpZiAodm0pIHtcbiAgICAgIHZhciBjdXIgPSB2bTtcbiAgICAgIHdoaWxlICgoY3VyID0gY3VyLiRwYXJlbnQpKSB7XG4gICAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgY2FwdHVyZSA9IGhvb2tzW2ldLmNhbGwoY3VyLCBlcnIsIHZtLCBpbmZvKSA9PT0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmIChjYXB0dXJlKSB7IHJldHVybiB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGdsb2JhbEhhbmRsZUVycm9yKGUsIGN1ciwgJ2Vycm9yQ2FwdHVyZWQgaG9vaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBnbG9iYWxIYW5kbGVFcnJvcihlcnIsIHZtLCBpbmZvKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyAoXG4gIGhhbmRsZXIsXG4gIGNvbnRleHQsXG4gIGFyZ3MsXG4gIHZtLFxuICBpbmZvXG4pIHtcbiAgdmFyIHJlcztcbiAgdHJ5IHtcbiAgICByZXMgPSBhcmdzID8gaGFuZGxlci5hcHBseShjb250ZXh0LCBhcmdzKSA6IGhhbmRsZXIuY2FsbChjb250ZXh0KTtcbiAgICBpZiAocmVzICYmICFyZXMuX2lzVnVlICYmIGlzUHJvbWlzZShyZXMpICYmICFyZXMuX2hhbmRsZWQpIHtcbiAgICAgIHJlcy5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8gKyBcIiAoUHJvbWlzZS9hc3luYylcIik7IH0pO1xuICAgICAgLy8gaXNzdWUgIzk1MTFcbiAgICAgIC8vIGF2b2lkIGNhdGNoIHRyaWdnZXJpbmcgbXVsdGlwbGUgdGltZXMgd2hlbiBuZXN0ZWQgY2FsbHNcbiAgICAgIHJlcy5faGFuZGxlZCA9IHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8pO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2xvYmFsSGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlcnIsIHZtLCBpbmZvKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGlmIHRoZSB1c2VyIGludGVudGlvbmFsbHkgdGhyb3dzIHRoZSBvcmlnaW5hbCBlcnJvciBpbiB0aGUgaGFuZGxlcixcbiAgICAgIC8vIGRvIG5vdCBsb2cgaXQgdHdpY2VcbiAgICAgIGlmIChlICE9PSBlcnIpIHtcbiAgICAgICAgbG9nRXJyb3IoZSwgbnVsbCwgJ2NvbmZpZy5lcnJvckhhbmRsZXInKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGxvZ0Vycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybigoXCJFcnJvciBpbiBcIiArIGluZm8gKyBcIjogXFxcIlwiICsgKGVyci50b1N0cmluZygpKSArIFwiXFxcIlwiKSwgdm0pO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICgoaW5Ccm93c2VyIHx8IGluV2VleCkgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGVyclxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgaXNVc2luZ01pY3JvVGFzayA9IGZhbHNlO1xuXG52YXIgY2FsbGJhY2tzID0gW107XG52YXIgcGVuZGluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBmbHVzaENhbGxiYWNrcyAoKSB7XG4gIHBlbmRpbmcgPSBmYWxzZTtcbiAgdmFyIGNvcGllcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcbiAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29waWVzW2ldKCk7XG4gIH1cbn1cblxuLy8gSGVyZSB3ZSBoYXZlIGFzeW5jIGRlZmVycmluZyB3cmFwcGVycyB1c2luZyBtaWNyb3Rhc2tzLlxuLy8gSW4gMi41IHdlIHVzZWQgKG1hY3JvKSB0YXNrcyAoaW4gY29tYmluYXRpb24gd2l0aCBtaWNyb3Rhc2tzKS5cbi8vIEhvd2V2ZXIsIGl0IGhhcyBzdWJ0bGUgcHJvYmxlbXMgd2hlbiBzdGF0ZSBpcyBjaGFuZ2VkIHJpZ2h0IGJlZm9yZSByZXBhaW50XG4vLyAoZS5nLiAjNjgxMywgb3V0LWluIHRyYW5zaXRpb25zKS5cbi8vIEFsc28sIHVzaW5nIChtYWNybykgdGFza3MgaW4gZXZlbnQgaGFuZGxlciB3b3VsZCBjYXVzZSBzb21lIHdlaXJkIGJlaGF2aW9yc1xuLy8gdGhhdCBjYW5ub3QgYmUgY2lyY3VtdmVudGVkIChlLmcuICM3MTA5LCAjNzE1MywgIzc1NDYsICM3ODM0LCAjODEwOSkuXG4vLyBTbyB3ZSBub3cgdXNlIG1pY3JvdGFza3MgZXZlcnl3aGVyZSwgYWdhaW4uXG4vLyBBIG1ham9yIGRyYXdiYWNrIG9mIHRoaXMgdHJhZGVvZmYgaXMgdGhhdCB0aGVyZSBhcmUgc29tZSBzY2VuYXJpb3Ncbi8vIHdoZXJlIG1pY3JvdGFza3MgaGF2ZSB0b28gaGlnaCBhIHByaW9yaXR5IGFuZCBmaXJlIGluIGJldHdlZW4gc3VwcG9zZWRseVxuLy8gc2VxdWVudGlhbCBldmVudHMgKGUuZy4gIzQ1MjEsICM2NjkwLCB3aGljaCBoYXZlIHdvcmthcm91bmRzKVxuLy8gb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lIGV2ZW50ICgjNjU2NikuXG52YXIgdGltZXJGdW5jO1xuXG4vLyBUaGUgbmV4dFRpY2sgYmVoYXZpb3IgbGV2ZXJhZ2VzIHRoZSBtaWNyb3Rhc2sgcXVldWUsIHdoaWNoIGNhbiBiZSBhY2Nlc3NlZFxuLy8gdmlhIGVpdGhlciBuYXRpdmUgUHJvbWlzZS50aGVuIG9yIE11dGF0aW9uT2JzZXJ2ZXIuXG4vLyBNdXRhdGlvbk9ic2VydmVyIGhhcyB3aWRlciBzdXBwb3J0LCBob3dldmVyIGl0IGlzIHNlcmlvdXNseSBidWdnZWQgaW5cbi8vIFVJV2ViVmlldyBpbiBpT1MgPj0gOS4zLjMgd2hlbiB0cmlnZ2VyZWQgaW4gdG91Y2ggZXZlbnQgaGFuZGxlcnMuIEl0XG4vLyBjb21wbGV0ZWx5IHN0b3BzIHdvcmtpbmcgYWZ0ZXIgdHJpZ2dlcmluZyBhIGZldyB0aW1lcy4uLiBzbywgaWYgbmF0aXZlXG4vLyBQcm9taXNlIGlzIGF2YWlsYWJsZSwgd2Ugd2lsbCB1c2UgaXQ6XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCwgJGZsb3ctZGlzYWJsZS1saW5lICovXG5pZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwLnRoZW4oZmx1c2hDYWxsYmFja3MpO1xuICAgIC8vIEluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuICAgIC8vIGl0IGNhbiBnZXQgc3R1Y2sgaW4gYSB3ZWlyZCBzdGF0ZSB3aGVyZSBjYWxsYmFja3MgYXJlIHB1c2hlZCBpbnRvIHRoZVxuICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG4gICAgLy8gXCJmb3JjZVwiIHRoZSBtaWNyb3Rhc2sgcXVldWUgdG8gYmUgZmx1c2hlZCBieSBhZGRpbmcgYW4gZW1wdHkgdGltZXIuXG4gICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgfTtcbiAgaXNVc2luZ01pY3JvVGFzayA9IHRydWU7XG59IGVsc2UgaWYgKCFpc0lFICYmIHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gIGlzTmF0aXZlKE11dGF0aW9uT2JzZXJ2ZXIpIHx8XG4gIC8vIFBoYW50b21KUyBhbmQgaU9TIDcueFxuICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG4pKSB7XG4gIC8vIFVzZSBNdXRhdGlvbk9ic2VydmVyIHdoZXJlIG5hdGl2ZSBQcm9taXNlIGlzIG5vdCBhdmFpbGFibGUsXG4gIC8vIGUuZy4gUGhhbnRvbUpTLCBpT1M3LCBBbmRyb2lkIDQuNFxuICAvLyAoIzY0NjYgTXV0YXRpb25PYnNlcnZlciBpcyB1bnJlbGlhYmxlIGluIElFMTEpXG4gIHZhciBjb3VudGVyID0gMTtcbiAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2hDYWxsYmFja3MpO1xuICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoY291bnRlcikpO1xuICBvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLCB7XG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICB9KTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICB0ZXh0Tm9kZS5kYXRhID0gU3RyaW5nKGNvdW50ZXIpO1xuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoc2V0SW1tZWRpYXRlKSkge1xuICAvLyBGYWxsYmFjayB0byBzZXRJbW1lZGlhdGUuXG4gIC8vIFRlY2huaWNhbGx5IGl0IGxldmVyYWdlcyB0aGUgKG1hY3JvKSB0YXNrIHF1ZXVlLFxuICAvLyBidXQgaXQgaXMgc3RpbGwgYSBiZXR0ZXIgY2hvaWNlIHRoYW4gc2V0VGltZW91dC5cbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldEltbWVkaWF0ZShmbHVzaENhbGxiYWNrcyk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBGYWxsYmFjayB0byBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dChmbHVzaENhbGxiYWNrcywgMCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrIChjYiwgY3R4KSB7XG4gIHZhciBfcmVzb2x2ZTtcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbChjdHgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCBjdHgsICduZXh0VGljaycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlKGN0eCk7XG4gICAgfVxuICB9KTtcbiAgaWYgKCFwZW5kaW5nKSB7XG4gICAgcGVuZGluZyA9IHRydWU7XG4gICAgdGltZXJGdW5jKCk7XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSlcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIG1hcms7XG52YXIgbWVhc3VyZTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHBlcmYgPSBpbkJyb3dzZXIgJiYgd2luZG93LnBlcmZvcm1hbmNlO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKFxuICAgIHBlcmYgJiZcbiAgICBwZXJmLm1hcmsgJiZcbiAgICBwZXJmLm1lYXN1cmUgJiZcbiAgICBwZXJmLmNsZWFyTWFya3MgJiZcbiAgICBwZXJmLmNsZWFyTWVhc3VyZXNcbiAgKSB7XG4gICAgbWFyayA9IGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHBlcmYubWFyayh0YWcpOyB9O1xuICAgIG1lYXN1cmUgPSBmdW5jdGlvbiAobmFtZSwgc3RhcnRUYWcsIGVuZFRhZykge1xuICAgICAgcGVyZi5tZWFzdXJlKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhlbmRUYWcpO1xuICAgICAgLy8gcGVyZi5jbGVhck1lYXN1cmVzKG5hbWUpXG4gICAgfTtcbiAgfVxufVxuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcChcbiAgICAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICtcbiAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG4gICAgJ01hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCwnICtcbiAgICAncmVxdWlyZScgLy8gZm9yIFdlYnBhY2svQnJvd3NlcmlmeVxuICApO1xuXG4gIHZhciB3YXJuTm9uUHJlc2VudCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IG9yIG1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQgb24gdGhlIGluc3RhbmNlIGJ1dCBcIiArXG4gICAgICAncmVmZXJlbmNlZCBkdXJpbmcgcmVuZGVyLiBNYWtlIHN1cmUgdGhhdCB0aGlzIHByb3BlcnR5IGlzIHJlYWN0aXZlLCAnICtcbiAgICAgICdlaXRoZXIgaW4gdGhlIGRhdGEgb3B0aW9uLCBvciBmb3IgY2xhc3MtYmFzZWQgY29tcG9uZW50cywgYnkgJyArXG4gICAgICAnaW5pdGlhbGl6aW5nIHRoZSBwcm9wZXJ0eS4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9yZWFjdGl2aXR5Lmh0bWwjRGVjbGFyaW5nLVJlYWN0aXZlLVByb3BlcnRpZXMuJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIHdhcm5SZXNlcnZlZFByZWZpeCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBtdXN0IGJlIGFjY2Vzc2VkIHdpdGggXFxcIiRkYXRhLlwiICsga2V5ICsgXCJcXFwiIGJlY2F1c2UgXCIgK1xuICAgICAgJ3Byb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCBcIiRcIiBvciBcIl9cIiBhcmUgbm90IHByb3hpZWQgaW4gdGhlIFZ1ZSBpbnN0YW5jZSB0byAnICtcbiAgICAgICdwcmV2ZW50IGNvbmZsaWN0cyB3aXRoIFZ1ZSBpbnRlcm5hbHMuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvYXBpLyNkYXRhJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIGhhc1Byb3h5ID1cbiAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb3h5KTtcblxuICBpZiAoaGFzUHJveHkpIHtcbiAgICB2YXIgaXNCdWlsdEluTW9kaWZpZXIgPSBtYWtlTWFwKCdzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhLGV4YWN0Jyk7XG4gICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNCdWlsdEluTW9kaWZpZXIoa2V5KSkge1xuICAgICAgICAgIHdhcm4oKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIgKyBrZXkpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYXNIYW5kbGVyID0ge1xuICAgIGhhczogZnVuY3Rpb24gaGFzICh0YXJnZXQsIGtleSkge1xuICAgICAgdmFyIGhhcyA9IGtleSBpbiB0YXJnZXQ7XG4gICAgICB2YXIgaXNBbGxvd2VkID0gYWxsb3dlZEdsb2JhbHMoa2V5KSB8fFxuICAgICAgICAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5LmNoYXJBdCgwKSA9PT0gJ18nICYmICEoa2V5IGluIHRhcmdldC4kZGF0YSkpO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXMgfHwgIWlzQWxsb3dlZFxuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0SGFuZGxlciA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldFtrZXldXG4gICAgfVxuICB9O1xuXG4gIGluaXRQcm94eSA9IGZ1bmN0aW9uIGluaXRQcm94eSAodm0pIHtcbiAgICBpZiAoaGFzUHJveHkpIHtcbiAgICAgIC8vIGRldGVybWluZSB3aGljaCBwcm94eSBoYW5kbGVyIHRvIHVzZVxuICAgICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgICAgIHZhciBoYW5kbGVycyA9IG9wdGlvbnMucmVuZGVyICYmIG9wdGlvbnMucmVuZGVyLl93aXRoU3RyaXBwZWRcbiAgICAgICAgPyBnZXRIYW5kbGVyXG4gICAgICAgIDogaGFzSGFuZGxlcjtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IG5ldyBQcm94eSh2bSwgaGFuZGxlcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgc2Vlbk9iamVjdHMgPSBuZXcgX1NldCgpO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG4gKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdFxuICogaXMgY29sbGVjdGVkIGFzIGEgXCJkZWVwXCIgZGVwZW5kZW5jeS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2UgKHZhbCkge1xuICBfdHJhdmVyc2UodmFsLCBzZWVuT2JqZWN0cyk7XG4gIHNlZW5PYmplY3RzLmNsZWFyKCk7XG59XG5cbmZ1bmN0aW9uIF90cmF2ZXJzZSAodmFsLCBzZWVuKSB7XG4gIHZhciBpLCBrZXlzO1xuICB2YXIgaXNBID0gQXJyYXkuaXNBcnJheSh2YWwpO1xuICBpZiAoKCFpc0EgJiYgIWlzT2JqZWN0KHZhbCkpIHx8IE9iamVjdC5pc0Zyb3plbih2YWwpIHx8IHZhbCBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbC5fX29iX18pIHtcbiAgICB2YXIgZGVwSWQgPSB2YWwuX19vYl9fLmRlcC5pZDtcbiAgICBpZiAoc2Vlbi5oYXMoZGVwSWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc2Vlbi5hZGQoZGVwSWQpO1xuICB9XG4gIGlmIChpc0EpIHtcbiAgICBpID0gdmFsLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pOyB9XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtrZXlzW2ldXSwgc2Vlbik7IH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIG5vcm1hbGl6ZUV2ZW50ID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciBwYXNzaXZlID0gbmFtZS5jaGFyQXQoMCkgPT09ICcmJztcbiAgbmFtZSA9IHBhc3NpdmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIG9uY2UkJDEgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJ34nOyAvLyBQcmVmaXhlZCBsYXN0LCBjaGVja2VkIGZpcnN0XG4gIG5hbWUgPSBvbmNlJCQxID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBjYXB0dXJlID0gbmFtZS5jaGFyQXQoMCkgPT09ICchJztcbiAgbmFtZSA9IGNhcHR1cmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIG9uY2U6IG9uY2UkJDEsXG4gICAgY2FwdHVyZTogY2FwdHVyZSxcbiAgICBwYXNzaXZlOiBwYXNzaXZlXG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVGbkludm9rZXIgKGZucywgdm0pIHtcbiAgZnVuY3Rpb24gaW52b2tlciAoKSB7XG4gICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIGZucyA9IGludm9rZXIuZm5zO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZucykpIHtcbiAgICAgIHZhciBjbG9uZWQgPSBmbnMuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNsb25lZFtpXSwgbnVsbCwgYXJndW1lbnRzJDEsIHZtLCBcInYtb24gaGFuZGxlclwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmV0dXJuIGhhbmRsZXIgcmV0dXJuIHZhbHVlIGZvciBzaW5nbGUgaGFuZGxlcnNcbiAgICAgIHJldHVybiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhmbnMsIG51bGwsIGFyZ3VtZW50cywgdm0sIFwidi1vbiBoYW5kbGVyXCIpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICBjcmVhdGVPbmNlSGFuZGxlcixcbiAgdm1cbikge1xuICB2YXIgbmFtZSwgZGVmJCQxLCBjdXIsIG9sZCwgZXZlbnQ7XG4gIGZvciAobmFtZSBpbiBvbikge1xuICAgIGRlZiQkMSA9IGN1ciA9IG9uW25hbWVdO1xuICAgIG9sZCA9IG9sZE9uW25hbWVdO1xuICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgaWYgKGlzVW5kZWYoY3VyKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXFxcIlwiICsgKGV2ZW50Lm5hbWUpICsgXCJcXFwiOiBnb3QgXCIgKyBTdHJpbmcoY3VyKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZCkpIHtcbiAgICAgIGlmIChpc1VuZGVmKGN1ci5mbnMpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlRm5JbnZva2VyKGN1ciwgdm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzVHJ1ZShldmVudC5vbmNlKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZU9uY2VIYW5kbGVyKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSk7XG4gICAgICB9XG4gICAgICBhZGQoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlLCBldmVudC5wYXNzaXZlLCBldmVudC5wYXJhbXMpO1xuICAgIH0gZWxzZSBpZiAoY3VyICE9PSBvbGQpIHtcbiAgICAgIG9sZC5mbnMgPSBjdXI7XG4gICAgICBvbltuYW1lXSA9IG9sZDtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG9sZE9uKSB7XG4gICAgaWYgKGlzVW5kZWYob25bbmFtZV0pKSB7XG4gICAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgICAgcmVtb3ZlJCQxKGV2ZW50Lm5hbWUsIG9sZE9uW25hbWVdLCBldmVudC5jYXB0dXJlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG1lcmdlVk5vZGVIb29rIChkZWYsIGhvb2tLZXksIGhvb2spIHtcbiAgaWYgKGRlZiBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgZGVmID0gZGVmLmRhdGEuaG9vayB8fCAoZGVmLmRhdGEuaG9vayA9IHt9KTtcbiAgfVxuICB2YXIgaW52b2tlcjtcbiAgdmFyIG9sZEhvb2sgPSBkZWZbaG9va0tleV07XG5cbiAgZnVuY3Rpb24gd3JhcHBlZEhvb2sgKCkge1xuICAgIGhvb2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAvLyBpbXBvcnRhbnQ6IHJlbW92ZSBtZXJnZWQgaG9vayB0byBlbnN1cmUgaXQncyBjYWxsZWQgb25seSBvbmNlXG4gICAgLy8gYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtcbiAgICByZW1vdmUoaW52b2tlci5mbnMsIHdyYXBwZWRIb29rKTtcbiAgfVxuXG4gIGlmIChpc1VuZGVmKG9sZEhvb2spKSB7XG4gICAgLy8gbm8gZXhpc3RpbmcgaG9va1xuICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW3dyYXBwZWRIb29rXSk7XG4gIH0gZWxzZSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzRGVmKG9sZEhvb2suZm5zKSAmJiBpc1RydWUob2xkSG9vay5tZXJnZWQpKSB7XG4gICAgICAvLyBhbHJlYWR5IGEgbWVyZ2VkIGludm9rZXJcbiAgICAgIGludm9rZXIgPSBvbGRIb29rO1xuICAgICAgaW52b2tlci5mbnMucHVzaCh3cmFwcGVkSG9vayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIHBsYWluIGhvb2tcbiAgICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW29sZEhvb2ssIHdyYXBwZWRIb29rXSk7XG4gICAgfVxuICB9XG5cbiAgaW52b2tlci5tZXJnZWQgPSB0cnVlO1xuICBkZWZbaG9va0tleV0gPSBpbnZva2VyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSAoXG4gIGRhdGEsXG4gIEN0b3IsXG4gIHRhZ1xuKSB7XG4gIC8vIHdlIGFyZSBvbmx5IGV4dHJhY3RpbmcgcmF3IHZhbHVlcyBoZXJlLlxuICAvLyB2YWxpZGF0aW9uIGFuZCBkZWZhdWx0IHZhbHVlcyBhcmUgaGFuZGxlZCBpbiB0aGUgY2hpbGRcbiAgLy8gY29tcG9uZW50IGl0c2VsZi5cbiAgdmFyIHByb3BPcHRpb25zID0gQ3Rvci5vcHRpb25zLnByb3BzO1xuICBpZiAoaXNVbmRlZihwcm9wT3B0aW9ucykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBhdHRycyA9IGRhdGEuYXR0cnM7XG4gIHZhciBwcm9wcyA9IGRhdGEucHJvcHM7XG4gIGlmIChpc0RlZihhdHRycykgfHwgaXNEZWYocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICB2YXIgYWx0S2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIga2V5SW5Mb3dlckNhc2UgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSAhPT0ga2V5SW5Mb3dlckNhc2UgJiZcbiAgICAgICAgICBhdHRycyAmJiBoYXNPd24oYXR0cnMsIGtleUluTG93ZXJDYXNlKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aXAoXG4gICAgICAgICAgICBcIlByb3AgXFxcIlwiICsga2V5SW5Mb3dlckNhc2UgKyBcIlxcXCIgaXMgcGFzc2VkIHRvIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh0YWcgfHwgQ3RvcikpICsgXCIsIGJ1dCB0aGUgZGVjbGFyZWQgcHJvcCBuYW1lIGlzXCIgK1xuICAgICAgICAgICAgXCIgXFxcIlwiICsga2V5ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIGNhbWVsQ2FzZWQgXCIgK1xuICAgICAgICAgICAgXCJwcm9wcyBuZWVkIHRvIHVzZSB0aGVpciBrZWJhYi1jYXNlIGVxdWl2YWxlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIFwiICtcbiAgICAgICAgICAgIFwidGVtcGxhdGVzLiBZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyBhbHRLZXkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjaGVja1Byb3AocmVzLCBwcm9wcywga2V5LCBhbHRLZXksIHRydWUpIHx8XG4gICAgICBjaGVja1Byb3AocmVzLCBhdHRycywga2V5LCBhbHRLZXksIGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja1Byb3AgKFxuICByZXMsXG4gIGhhc2gsXG4gIGtleSxcbiAgYWx0S2V5LFxuICBwcmVzZXJ2ZVxuKSB7XG4gIGlmIChpc0RlZihoYXNoKSkge1xuICAgIGlmIChoYXNPd24oaGFzaCwga2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2tleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoaGFzT3duKGhhc2gsIGFsdEtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFthbHRLZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFthbHRLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG4vLyBUaGUgdGVtcGxhdGUgY29tcGlsZXIgYXR0ZW1wdHMgdG8gbWluaW1pemUgdGhlIG5lZWQgZm9yIG5vcm1hbGl6YXRpb24gYnlcbi8vIHN0YXRpY2FsbHkgYW5hbHl6aW5nIHRoZSB0ZW1wbGF0ZSBhdCBjb21waWxlIHRpbWUuXG4vL1xuLy8gRm9yIHBsYWluIEhUTUwgbWFya3VwLCBub3JtYWxpemF0aW9uIGNhbiBiZSBjb21wbGV0ZWx5IHNraXBwZWQgYmVjYXVzZSB0aGVcbi8vIGdlbmVyYXRlZCByZW5kZXIgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byByZXR1cm4gQXJyYXk8Vk5vZGU+LiBUaGVyZSBhcmVcbi8vIHR3byBjYXNlcyB3aGVyZSBleHRyYSBub3JtYWxpemF0aW9uIGlzIG5lZWRlZDpcblxuLy8gMS4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29tcG9uZW50cyAtIGJlY2F1c2UgYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxuLy8gbWF5IHJldHVybiBhbiBBcnJheSBpbnN0ZWFkIG9mIGEgc2luZ2xlIHJvb3QuIEluIHRoaXMgY2FzZSwganVzdCBhIHNpbXBsZVxuLy8gbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQgLSBpZiBhbnkgY2hpbGQgaXMgYW4gQXJyYXksIHdlIGZsYXR0ZW4gdGhlIHdob2xlXG4vLyB0aGluZyB3aXRoIEFycmF5LnByb3RvdHlwZS5jb25jYXQuIEl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgb25seSAxLWxldmVsIGRlZXBcbi8vIGJlY2F1c2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIGFscmVhZHkgbm9ybWFsaXplIHRoZWlyIG93biBjaGlsZHJlbi5cbmZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgY2hpbGRyZW4pXG4gICAgfVxuICB9XG4gIHJldHVybiBjaGlsZHJlblxufVxuXG4vLyAyLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb25zdHJ1Y3RzIHRoYXQgYWx3YXlzIGdlbmVyYXRlZCBuZXN0ZWQgQXJyYXlzLFxuLy8gZS5nLiA8dGVtcGxhdGU+LCA8c2xvdD4sIHYtZm9yLCBvciB3aGVuIHRoZSBjaGlsZHJlbiBpcyBwcm92aWRlZCBieSB1c2VyXG4vLyB3aXRoIGhhbmQtd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zIC8gSlNYLiBJbiBzdWNoIGNhc2VzIGEgZnVsbCBub3JtYWxpemF0aW9uXG4vLyBpcyBuZWVkZWQgdG8gY2F0ZXIgdG8gYWxsIHBvc3NpYmxlIHR5cGVzIG9mIGNoaWxkcmVuIHZhbHVlcy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICByZXR1cm4gaXNQcmltaXRpdmUoY2hpbGRyZW4pXG4gICAgPyBbY3JlYXRlVGV4dFZOb2RlKGNoaWxkcmVuKV1cbiAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pXG4gICAgICA/IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4pXG4gICAgICA6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBpc1RleHROb2RlIChub2RlKSB7XG4gIHJldHVybiBpc0RlZihub2RlKSAmJiBpc0RlZihub2RlLnRleHQpICYmIGlzRmFsc2Uobm9kZS5pc0NvbW1lbnQpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4gKGNoaWxkcmVuLCBuZXN0ZWRJbmRleCkge1xuICB2YXIgcmVzID0gW107XG4gIHZhciBpLCBjLCBsYXN0SW5kZXgsIGxhc3Q7XG4gIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGMgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoaXNVbmRlZihjKSB8fCB0eXBlb2YgYyA9PT0gJ2Jvb2xlYW4nKSB7IGNvbnRpbnVlIH1cbiAgICBsYXN0SW5kZXggPSByZXMubGVuZ3RoIC0gMTtcbiAgICBsYXN0ID0gcmVzW2xhc3RJbmRleF07XG4gICAgLy8gIG5lc3RlZFxuICAgIGlmIChBcnJheS5pc0FycmF5KGMpKSB7XG4gICAgICBpZiAoYy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGMgPSBub3JtYWxpemVBcnJheUNoaWxkcmVuKGMsICgobmVzdGVkSW5kZXggfHwgJycpICsgXCJfXCIgKyBpKSk7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgaWYgKGlzVGV4dE5vZGUoY1swXSkgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIChjWzBdKS50ZXh0KTtcbiAgICAgICAgICBjLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2guYXBwbHkocmVzLCBjKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKGMpKSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBTU1IgaHlkcmF0aW9uIGJlY2F1c2UgdGV4dCBub2RlcyBhcmVcbiAgICAgICAgLy8gZXNzZW50aWFsbHkgbWVyZ2VkIHdoZW4gcmVuZGVyZWQgdG8gSFRNTCBzdHJpbmdzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMpO1xuICAgICAgfSBlbHNlIGlmIChjICE9PSAnJykge1xuICAgICAgICAvLyBjb252ZXJ0IHByaW1pdGl2ZSB0byB2bm9kZVxuICAgICAgICByZXMucHVzaChjcmVhdGVUZXh0Vk5vZGUoYykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShjKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYy50ZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZmF1bHQga2V5IGZvciBuZXN0ZWQgYXJyYXkgY2hpbGRyZW4gKGxpa2VseSBnZW5lcmF0ZWQgYnkgdi1mb3IpXG4gICAgICAgIGlmIChpc1RydWUoY2hpbGRyZW4uX2lzVkxpc3QpICYmXG4gICAgICAgICAgaXNEZWYoYy50YWcpICYmXG4gICAgICAgICAgaXNVbmRlZihjLmtleSkgJiZcbiAgICAgICAgICBpc0RlZihuZXN0ZWRJbmRleCkpIHtcbiAgICAgICAgICBjLmtleSA9IFwiX192bGlzdFwiICsgbmVzdGVkSW5kZXggKyBcIl9cIiArIGkgKyBcIl9fXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRQcm92aWRlICh2bSkge1xuICB2YXIgcHJvdmlkZSA9IHZtLiRvcHRpb25zLnByb3ZpZGU7XG4gIGlmIChwcm92aWRlKSB7XG4gICAgdm0uX3Byb3ZpZGVkID0gdHlwZW9mIHByb3ZpZGUgPT09ICdmdW5jdGlvbidcbiAgICAgID8gcHJvdmlkZS5jYWxsKHZtKVxuICAgICAgOiBwcm92aWRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRJbmplY3Rpb25zICh2bSkge1xuICB2YXIgcmVzdWx0ID0gcmVzb2x2ZUluamVjdCh2bS4kb3B0aW9ucy5pbmplY3QsIHZtKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgT2JqZWN0LmtleXMocmVzdWx0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGFuIGluamVjdGVkIHZhbHVlIGRpcmVjdGx5IHNpbmNlIHRoZSBjaGFuZ2VzIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcHJvdmlkZWQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiaW5qZWN0aW9uIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUluamVjdCAoaW5qZWN0LCB2bSkge1xuICBpZiAoaW5qZWN0KSB7XG4gICAgLy8gaW5qZWN0IGlzIDphbnkgYmVjYXVzZSBmbG93IGlzIG5vdCBzbWFydCBlbm91Z2ggdG8gZmlndXJlIG91dCBjYWNoZWRcbiAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgICAgPyBSZWZsZWN0Lm93bktleXMoaW5qZWN0KVxuICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIC8vICM2NTc0IGluIGNhc2UgdGhlIGluamVjdCBvYmplY3QgaXMgb2JzZXJ2ZWQuLi5cbiAgICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICAgIHZhciBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV0uZnJvbTtcbiAgICAgIHZhciBzb3VyY2UgPSB2bTtcbiAgICAgIHdoaWxlIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5fcHJvdmlkZWQgJiYgaGFzT3duKHNvdXJjZS5fcHJvdmlkZWQsIHByb3ZpZGVLZXkpKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVEZWZhdWx0ID0gaW5qZWN0W2tleV0uZGVmYXVsdDtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHR5cGVvZiBwcm92aWRlRGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBwcm92aWRlRGVmYXVsdC5jYWxsKHZtKVxuICAgICAgICAgICAgOiBwcm92aWRlRGVmYXVsdDtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybigoXCJJbmplY3Rpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIG5vdCBmb3VuZFwiKSwgdm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyByYXcgY2hpbGRyZW4gVk5vZGVzIGludG8gYSBzbG90IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVNsb3RzIChcbiAgY2hpbGRyZW4sXG4gIGNvbnRleHRcbikge1xuICBpZiAoIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICByZXR1cm4ge31cbiAgfVxuICB2YXIgc2xvdHMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICB2YXIgZGF0YSA9IGNoaWxkLmRhdGE7XG4gICAgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZVxuICAgIGlmIChkYXRhICYmIGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy5zbG90KSB7XG4gICAgICBkZWxldGUgZGF0YS5hdHRycy5zbG90O1xuICAgIH1cbiAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcbiAgICAvLyBzYW1lIGNvbnRleHQuXG4gICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgIGRhdGEgJiYgZGF0YS5zbG90ICE9IG51bGxcbiAgICApIHtcbiAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90O1xuICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdHMgKFxuICBzbG90cyxcbiAgbm9ybWFsU2xvdHMsXG4gIHByZXZTbG90c1xuKSB7XG4gIHZhciByZXM7XG4gIHZhciBoYXNOb3JtYWxTbG90cyA9IE9iamVjdC5rZXlzKG5vcm1hbFNsb3RzKS5sZW5ndGggPiAwO1xuICB2YXIgaXNTdGFibGUgPSBzbG90cyA/ICEhc2xvdHMuJHN0YWJsZSA6ICFoYXNOb3JtYWxTbG90cztcbiAgdmFyIGtleSA9IHNsb3RzICYmIHNsb3RzLiRrZXk7XG4gIGlmICghc2xvdHMpIHtcbiAgICByZXMgPSB7fTtcbiAgfSBlbHNlIGlmIChzbG90cy5fbm9ybWFsaXplZCkge1xuICAgIC8vIGZhc3QgcGF0aCAxOiBjaGlsZCBjb21wb25lbnQgcmUtcmVuZGVyIG9ubHksIHBhcmVudCBkaWQgbm90IGNoYW5nZVxuICAgIHJldHVybiBzbG90cy5fbm9ybWFsaXplZFxuICB9IGVsc2UgaWYgKFxuICAgIGlzU3RhYmxlICYmXG4gICAgcHJldlNsb3RzICYmXG4gICAgcHJldlNsb3RzICE9PSBlbXB0eU9iamVjdCAmJlxuICAgIGtleSA9PT0gcHJldlNsb3RzLiRrZXkgJiZcbiAgICAhaGFzTm9ybWFsU2xvdHMgJiZcbiAgICAhcHJldlNsb3RzLiRoYXNOb3JtYWxcbiAgKSB7XG4gICAgLy8gZmFzdCBwYXRoIDI6IHN0YWJsZSBzY29wZWQgc2xvdHMgdy8gbm8gbm9ybWFsIHNsb3RzIHRvIHByb3h5LFxuICAgIC8vIG9ubHkgbmVlZCB0byBub3JtYWxpemUgb25jZVxuICAgIHJldHVybiBwcmV2U2xvdHNcbiAgfSBlbHNlIHtcbiAgICByZXMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkkMSBpbiBzbG90cykge1xuICAgICAgaWYgKHNsb3RzW2tleSQxXSAmJiBrZXkkMVswXSAhPT0gJyQnKSB7XG4gICAgICAgIHJlc1trZXkkMV0gPSBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXkkMSwgc2xvdHNba2V5JDFdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gZXhwb3NlIG5vcm1hbCBzbG90cyBvbiBzY29wZWRTbG90c1xuICBmb3IgKHZhciBrZXkkMiBpbiBub3JtYWxTbG90cykge1xuICAgIGlmICghKGtleSQyIGluIHJlcykpIHtcbiAgICAgIHJlc1trZXkkMl0gPSBwcm94eU5vcm1hbFNsb3Qobm9ybWFsU2xvdHMsIGtleSQyKTtcbiAgICB9XG4gIH1cbiAgLy8gYXZvcmlheiBzZWVtcyB0byBtb2NrIGEgbm9uLWV4dGVuc2libGUgJHNjb3BlZFNsb3RzIG9iamVjdFxuICAvLyBhbmQgd2hlbiB0aGF0IGlzIHBhc3NlZCBkb3duIHRoaXMgd291bGQgY2F1c2UgYW4gZXJyb3JcbiAgaWYgKHNsb3RzICYmIE9iamVjdC5pc0V4dGVuc2libGUoc2xvdHMpKSB7XG4gICAgKHNsb3RzKS5fbm9ybWFsaXplZCA9IHJlcztcbiAgfVxuICBkZWYocmVzLCAnJHN0YWJsZScsIGlzU3RhYmxlKTtcbiAgZGVmKHJlcywgJyRrZXknLCBrZXkpO1xuICBkZWYocmVzLCAnJGhhc05vcm1hbCcsIGhhc05vcm1hbFNsb3RzKTtcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXksIGZuKSB7XG4gIHZhciBub3JtYWxpemVkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXMgPSBhcmd1bWVudHMubGVuZ3RoID8gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKSA6IGZuKHt9KTtcbiAgICByZXMgPSByZXMgJiYgdHlwZW9mIHJlcyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkocmVzKVxuICAgICAgPyBbcmVzXSAvLyBzaW5nbGUgdm5vZGVcbiAgICAgIDogbm9ybWFsaXplQ2hpbGRyZW4ocmVzKTtcbiAgICByZXR1cm4gcmVzICYmIChcbiAgICAgIHJlcy5sZW5ndGggPT09IDAgfHxcbiAgICAgIChyZXMubGVuZ3RoID09PSAxICYmIHJlc1swXS5pc0NvbW1lbnQpIC8vICM5NjU4XG4gICAgKSA/IHVuZGVmaW5lZFxuICAgICAgOiByZXNcbiAgfTtcbiAgLy8gdGhpcyBpcyBhIHNsb3QgdXNpbmcgdGhlIG5ldyB2LXNsb3Qgc3ludGF4IHdpdGhvdXQgc2NvcGUuIGFsdGhvdWdoIGl0IGlzXG4gIC8vIGNvbXBpbGVkIGFzIGEgc2NvcGVkIHNsb3QsIHJlbmRlciBmbiB1c2VycyB3b3VsZCBleHBlY3QgaXQgdG8gYmUgcHJlc2VudFxuICAvLyBvbiB0aGlzLiRzbG90cyBiZWNhdXNlIHRoZSB1c2FnZSBpcyBzZW1hbnRpY2FsbHkgYSBub3JtYWwgc2xvdC5cbiAgaWYgKGZuLnByb3h5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vcm1hbFNsb3RzLCBrZXksIHtcbiAgICAgIGdldDogbm9ybWFsaXplZCxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbm9ybWFsaXplZFxufVxuXG5mdW5jdGlvbiBwcm94eU5vcm1hbFNsb3Qoc2xvdHMsIGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gc2xvdHNba2V5XTsgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHYtZm9yIGxpc3RzLlxuICovXG5mdW5jdGlvbiByZW5kZXJMaXN0IChcbiAgdmFsLFxuICByZW5kZXJcbikge1xuICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxbaV0sIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwpO1xuICAgIGZvciAoaSA9IDA7IGkgPCB2YWw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKGkgKyAxLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSkge1xuICAgIGlmIChoYXNTeW1ib2wgJiYgdmFsW1N5bWJvbC5pdGVyYXRvcl0pIHtcbiAgICAgIHJldCA9IFtdO1xuICAgICAgdmFyIGl0ZXJhdG9yID0gdmFsW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB3aGlsZSAoIXJlc3VsdC5kb25lKSB7XG4gICAgICAgIHJldC5wdXNoKHJlbmRlcihyZXN1bHQudmFsdWUsIHJldC5sZW5ndGgpKTtcbiAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtrZXldLCBrZXksIGkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzRGVmKHJldCkpIHtcbiAgICByZXQgPSBbXTtcbiAgfVxuICAocmV0KS5faXNWTGlzdCA9IHRydWU7XG4gIHJldHVybiByZXRcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyA8c2xvdD5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU2xvdCAoXG4gIG5hbWUsXG4gIGZhbGxiYWNrLFxuICBwcm9wcyxcbiAgYmluZE9iamVjdFxuKSB7XG4gIHZhciBzY29wZWRTbG90Rm4gPSB0aGlzLiRzY29wZWRTbG90c1tuYW1lXTtcbiAgdmFyIG5vZGVzO1xuICBpZiAoc2NvcGVkU2xvdEZuKSB7IC8vIHNjb3BlZCBzbG90XG4gICAgcHJvcHMgPSBwcm9wcyB8fCB7fTtcbiAgICBpZiAoYmluZE9iamVjdCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzT2JqZWN0KGJpbmRPYmplY3QpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ3Nsb3Qgdi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QnLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHByb3BzID0gZXh0ZW5kKGV4dGVuZCh7fSwgYmluZE9iamVjdCksIHByb3BzKTtcbiAgICB9XG4gICAgbm9kZXMgPSBzY29wZWRTbG90Rm4ocHJvcHMpIHx8IGZhbGxiYWNrO1xuICB9IGVsc2Uge1xuICAgIG5vZGVzID0gdGhpcy4kc2xvdHNbbmFtZV0gfHwgZmFsbGJhY2s7XG4gIH1cblxuICB2YXIgdGFyZ2V0ID0gcHJvcHMgJiYgcHJvcHMuc2xvdDtcbiAgaWYgKHRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScsIHsgc2xvdDogdGFyZ2V0IH0sIG5vZGVzKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBub2Rlc1xuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgZmlsdGVyc1xuICovXG5mdW5jdGlvbiByZXNvbHZlRmlsdGVyIChpZCkge1xuICByZXR1cm4gcmVzb2x2ZUFzc2V0KHRoaXMuJG9wdGlvbnMsICdmaWx0ZXJzJywgaWQsIHRydWUpIHx8IGlkZW50aXR5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0tleU5vdE1hdGNoIChleHBlY3QsIGFjdHVhbCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3QpKSB7XG4gICAgcmV0dXJuIGV4cGVjdC5pbmRleE9mKGFjdHVhbCkgPT09IC0xXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGV4cGVjdCAhPT0gYWN0dWFsXG4gIH1cbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgY2hlY2tpbmcga2V5Q29kZXMgZnJvbSBjb25maWcuXG4gKiBleHBvc2VkIGFzIFZ1ZS5wcm90b3R5cGUuX2tcbiAqIHBhc3NpbmcgaW4gZXZlbnRLZXlOYW1lIGFzIGxhc3QgYXJndW1lbnQgc2VwYXJhdGVseSBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICovXG5mdW5jdGlvbiBjaGVja0tleUNvZGVzIChcbiAgZXZlbnRLZXlDb2RlLFxuICBrZXksXG4gIGJ1aWx0SW5LZXlDb2RlLFxuICBldmVudEtleU5hbWUsXG4gIGJ1aWx0SW5LZXlOYW1lXG4pIHtcbiAgdmFyIG1hcHBlZEtleUNvZGUgPSBjb25maWcua2V5Q29kZXNba2V5XSB8fCBidWlsdEluS2V5Q29kZTtcbiAgaWYgKGJ1aWx0SW5LZXlOYW1lICYmIGV2ZW50S2V5TmFtZSAmJiAhY29uZmlnLmtleUNvZGVzW2tleV0pIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChidWlsdEluS2V5TmFtZSwgZXZlbnRLZXlOYW1lKVxuICB9IGVsc2UgaWYgKG1hcHBlZEtleUNvZGUpIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChtYXBwZWRLZXlDb2RlLCBldmVudEtleUNvZGUpXG4gIH0gZWxzZSBpZiAoZXZlbnRLZXlOYW1lKSB7XG4gICAgcmV0dXJuIGh5cGhlbmF0ZShldmVudEtleU5hbWUpICE9PSBrZXlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgbWVyZ2luZyB2LWJpbmQ9XCJvYmplY3RcIiBpbnRvIGEgVk5vZGUncyBkYXRhLlxuICovXG5mdW5jdGlvbiBiaW5kT2JqZWN0UHJvcHMgKFxuICBkYXRhLFxuICB0YWcsXG4gIHZhbHVlLFxuICBhc1Byb3AsXG4gIGlzU3luY1xuKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHRvT2JqZWN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNoO1xuICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSA9PT0gJ2NsYXNzJyB8fFxuICAgICAgICAgIGtleSA9PT0gJ3N0eWxlJyB8fFxuICAgICAgICAgIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoa2V5KVxuICAgICAgICApIHtcbiAgICAgICAgICBoYXNoID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlO1xuICAgICAgICAgIGhhc2ggPSBhc1Byb3AgfHwgY29uZmlnLm11c3RVc2VQcm9wKHRhZywgdHlwZSwga2V5KVxuICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG4gICAgICAgICAgICA6IGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIGlmICghKGNhbWVsaXplZEtleSBpbiBoYXNoKSAmJiAhKGh5cGhlbmF0ZWRLZXkgaW4gaGFzaCkpIHtcbiAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXG4gICAgICAgICAgaWYgKGlzU3luYykge1xuICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgICAgICAgICAgIG9uWyhcInVwZGF0ZTpcIiArIGtleSldID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgbG9vcCgga2V5ICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLlxuICovXG5mdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICBpbmRleCxcbiAgaXNJbkZvclxuKSB7XG4gIHZhciBjYWNoZWQgPSB0aGlzLl9zdGF0aWNUcmVlcyB8fCAodGhpcy5fc3RhdGljVHJlZXMgPSBbXSk7XG4gIHZhciB0cmVlID0gY2FjaGVkW2luZGV4XTtcbiAgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4gIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlLlxuICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgIHJldHVybiB0cmVlXG4gIH1cbiAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuICB0cmVlID0gY2FjaGVkW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKFxuICAgIHRoaXMuX3JlbmRlclByb3h5LFxuICAgIG51bGwsXG4gICAgdGhpcyAvLyBmb3IgcmVuZGVyIGZucyBnZW5lcmF0ZWQgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IHRlbXBsYXRlc1xuICApO1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fc3RhdGljX19cIiArIGluZGV4KSwgZmFsc2UpO1xuICByZXR1cm4gdHJlZVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciB2LW9uY2UuXG4gKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS5cbiAqL1xuZnVuY3Rpb24gbWFya09uY2UgKFxuICB0cmVlLFxuICBpbmRleCxcbiAga2V5XG4pIHtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX29uY2VfX1wiICsgaW5kZXggKyAoa2V5ID8gKFwiX1wiICsga2V5KSA6IFwiXCIpKSwgdHJ1ZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMgKFxuICB0cmVlLFxuICBrZXksXG4gIGlzT25jZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHRyZWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWFya1N0YXRpY05vZGUodHJlZVtpXSwgKGtleSArIFwiX1wiICsgaSksIGlzT25jZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcbiAgbm9kZS5pc1N0YXRpYyA9IHRydWU7XG4gIG5vZGUua2V5ID0ga2V5O1xuICBub2RlLmlzT25jZSA9IGlzT25jZTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmRPYmplY3RMaXN0ZW5lcnMgKGRhdGEsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3Ytb24gd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvbiA9IGRhdGEub24gPSBkYXRhLm9uID8gZXh0ZW5kKHt9LCBkYXRhLm9uKSA6IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIHZhciBleGlzdGluZyA9IG9uW2tleV07XG4gICAgICAgIHZhciBvdXJzID0gdmFsdWVba2V5XTtcbiAgICAgICAgb25ba2V5XSA9IGV4aXN0aW5nID8gW10uY29uY2F0KGV4aXN0aW5nLCBvdXJzKSA6IG91cnM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlcyxcbiAgLy8gdGhlIGZvbGxvd2luZyBhcmUgYWRkZWQgaW4gMi42XG4gIGhhc0R5bmFtaWNLZXlzLFxuICBjb250ZW50SGFzaEtleVxuKSB7XG4gIHJlcyA9IHJlcyB8fCB7ICRzdGFibGU6ICFoYXNEeW5hbWljS2V5cyB9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzbG90ID0gZm5zW2ldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNsb3QpKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoc2xvdCwgcmVzLCBoYXNEeW5hbWljS2V5cyk7XG4gICAgfSBlbHNlIGlmIChzbG90KSB7XG4gICAgICAvLyBtYXJrZXIgZm9yIHJldmVyc2UgcHJveHlpbmcgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbiAgICAgIGlmIChzbG90LnByb3h5KSB7XG4gICAgICAgIHNsb3QuZm4ucHJveHkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmVzW3Nsb3Qua2V5XSA9IHNsb3QuZm47XG4gICAgfVxuICB9XG4gIGlmIChjb250ZW50SGFzaEtleSkge1xuICAgIChyZXMpLiRrZXkgPSBjb250ZW50SGFzaEtleTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kRHluYW1pY0tleXMgKGJhc2VPYmosIHZhbHVlcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBrZXkgPSB2YWx1ZXNbaV07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleSkge1xuICAgICAgYmFzZU9ialt2YWx1ZXNbaV1dID0gdmFsdWVzW2kgKyAxXTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5ICE9PSAnJyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgIC8vIG51bGwgaXMgYSBzcGVjaWFsIHZhbHVlIGZvciBleHBsaWNpdGx5IHJlbW92aW5nIGEgYmluZGluZ1xuICAgICAgd2FybihcbiAgICAgICAgKFwiSW52YWxpZCB2YWx1ZSBmb3IgZHluYW1pYyBkaXJlY3RpdmUgYXJndW1lbnQgKGV4cGVjdGVkIHN0cmluZyBvciBudWxsKTogXCIgKyBrZXkpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmFzZU9ialxufVxuXG4vLyBoZWxwZXIgdG8gZHluYW1pY2FsbHkgYXBwZW5kIG1vZGlmaWVyIHJ1bnRpbWUgbWFya2VycyB0byBldmVudCBuYW1lcy5cbi8vIGVuc3VyZSBvbmx5IGFwcGVuZCB3aGVuIHZhbHVlIGlzIGFscmVhZHkgc3RyaW5nLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBjYXN0XG4vLyB0byBzdHJpbmcgYW5kIGNhdXNlIHRoZSB0eXBlIGNoZWNrIHRvIG1pc3MuXG5mdW5jdGlvbiBwcmVwZW5kTW9kaWZpZXIgKHZhbHVlLCBzeW1ib2wpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBzeW1ib2wgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbnN0YWxsUmVuZGVySGVscGVycyAodGFyZ2V0KSB7XG4gIHRhcmdldC5fbyA9IG1hcmtPbmNlO1xuICB0YXJnZXQuX24gPSB0b051bWJlcjtcbiAgdGFyZ2V0Ll9zID0gdG9TdHJpbmc7XG4gIHRhcmdldC5fbCA9IHJlbmRlckxpc3Q7XG4gIHRhcmdldC5fdCA9IHJlbmRlclNsb3Q7XG4gIHRhcmdldC5fcSA9IGxvb3NlRXF1YWw7XG4gIHRhcmdldC5faSA9IGxvb3NlSW5kZXhPZjtcbiAgdGFyZ2V0Ll9tID0gcmVuZGVyU3RhdGljO1xuICB0YXJnZXQuX2YgPSByZXNvbHZlRmlsdGVyO1xuICB0YXJnZXQuX2sgPSBjaGVja0tleUNvZGVzO1xuICB0YXJnZXQuX2IgPSBiaW5kT2JqZWN0UHJvcHM7XG4gIHRhcmdldC5fdiA9IGNyZWF0ZVRleHRWTm9kZTtcbiAgdGFyZ2V0Ll9lID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgdGFyZ2V0Ll91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzO1xuICB0YXJnZXQuX2cgPSBiaW5kT2JqZWN0TGlzdGVuZXJzO1xuICB0YXJnZXQuX2QgPSBiaW5kRHluYW1pY0tleXM7XG4gIHRhcmdldC5fcCA9IHByZXBlbmRNb2RpZmllcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IChcbiAgZGF0YSxcbiAgcHJvcHMsXG4gIGNoaWxkcmVuLFxuICBwYXJlbnQsXG4gIEN0b3Jcbikge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgLy8gZW5zdXJlIHRoZSBjcmVhdGVFbGVtZW50IGZ1bmN0aW9uIGluIGZ1bmN0aW9uYWwgY29tcG9uZW50c1xuICAvLyBnZXRzIGEgdW5pcXVlIGNvbnRleHQgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdCBuYW1lZCBzbG90IGNoZWNrXG4gIHZhciBjb250ZXh0Vm07XG4gIGlmIChoYXNPd24ocGFyZW50LCAnX3VpZCcpKSB7XG4gICAgY29udGV4dFZtID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQpO1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIGNvbnRleHRWbS5fb3JpZ2luYWwgPSBwYXJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNvbnRleHQgdm0gcGFzc2VkIGluIGlzIGEgZnVuY3Rpb25hbCBjb250ZXh0IGFzIHdlbGwuXG4gICAgLy8gaW4gdGhpcyBjYXNlIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFyZSBhYmxlIHRvIGdldCBhIGhvbGQgdG8gdGhlXG4gICAgLy8gcmVhbCBjb250ZXh0IGluc3RhbmNlLlxuICAgIGNvbnRleHRWbSA9IHBhcmVudDtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBwYXJlbnQgPSBwYXJlbnQuX29yaWdpbmFsO1xuICB9XG4gIHZhciBpc0NvbXBpbGVkID0gaXNUcnVlKG9wdGlvbnMuX2NvbXBpbGVkKTtcbiAgdmFyIG5lZWROb3JtYWxpemF0aW9uID0gIWlzQ29tcGlsZWQ7XG5cbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLmxpc3RlbmVycyA9IGRhdGEub24gfHwgZW1wdHlPYmplY3Q7XG4gIHRoaXMuaW5qZWN0aW9ucyA9IHJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QsIHBhcmVudCk7XG4gIHRoaXMuc2xvdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzJDEuJHNsb3RzKSB7XG4gICAgICBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdGhpcyQxLiRzbG90cyA9IHJlc29sdmVTbG90cyhjaGlsZHJlbiwgcGFyZW50KVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMkMS4kc2xvdHNcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Njb3BlZFNsb3RzJywgKHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLnNsb3RzKCkpXG4gICAgfVxuICB9KSk7XG5cbiAgLy8gc3VwcG9ydCBmb3IgY29tcGlsZWQgZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoaXNDb21waWxlZCkge1xuICAgIC8vIGV4cG9zaW5nICRvcHRpb25zIGZvciByZW5kZXJTdGF0aWMoKVxuICAgIHRoaXMuJG9wdGlvbnMgPSBvcHRpb25zO1xuICAgIC8vIHByZS1yZXNvbHZlIHNsb3RzIGZvciByZW5kZXJTbG90KClcbiAgICB0aGlzLiRzbG90cyA9IHRoaXMuc2xvdHMoKTtcbiAgICB0aGlzLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuJHNsb3RzKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLl9zY29wZUlkKSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pO1xuICAgICAgaWYgKHZub2RlICYmICFBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB2bm9kZS5mblNjb3BlSWQgPSBvcHRpb25zLl9zY29wZUlkO1xuICAgICAgICB2bm9kZS5mbkNvbnRleHQgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm5vZGVcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTsgfTtcbiAgfVxufVxuXG5pbnN0YWxsUmVuZGVySGVscGVycyhGdW5jdGlvbmFsUmVuZGVyQ29udGV4dC5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgcHJvcHNEYXRhLFxuICBkYXRhLFxuICBjb250ZXh0Vm0sXG4gIGNoaWxkcmVuXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBwcm9wcyA9IHt9O1xuICB2YXIgcHJvcE9wdGlvbnMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoaXNEZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSB8fCBlbXB0eU9iamVjdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0RlZihkYXRhLmF0dHJzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLmF0dHJzKTsgfVxuICAgIGlmIChpc0RlZihkYXRhLnByb3BzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLnByb3BzKTsgfVxuICB9XG5cbiAgdmFyIHJlbmRlckNvbnRleHQgPSBuZXcgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQoXG4gICAgZGF0YSxcbiAgICBwcm9wcyxcbiAgICBjaGlsZHJlbixcbiAgICBjb250ZXh0Vm0sXG4gICAgQ3RvclxuICApO1xuXG4gIHZhciB2bm9kZSA9IG9wdGlvbnMucmVuZGVyLmNhbGwobnVsbCwgcmVuZGVyQ29udGV4dC5fYywgcmVuZGVyQ29udGV4dCk7XG5cbiAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm4gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICB2YXIgdm5vZGVzID0gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUpIHx8IFtdO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXkodm5vZGVzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc1tpXSA9IGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGVzW2ldLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0ICh2bm9kZSwgZGF0YSwgY29udGV4dFZtLCBvcHRpb25zLCByZW5kZXJDb250ZXh0KSB7XG4gIC8vICM3ODE3IGNsb25lIG5vZGUgYmVmb3JlIHNldHRpbmcgZm5Db250ZXh0LCBvdGhlcndpc2UgaWYgdGhlIG5vZGUgaXMgcmV1c2VkXG4gIC8vIChlLmcuIGl0IHdhcyBmcm9tIGEgY2FjaGVkIG5vcm1hbCBzbG90KSB0aGUgZm5Db250ZXh0IGNhdXNlcyBuYW1lZCBzbG90c1xuICAvLyB0aGF0IHNob3VsZCBub3QgYmUgbWF0Y2hlZCB0byBtYXRjaC5cbiAgdmFyIGNsb25lID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gIGNsb25lLmZuQ29udGV4dCA9IGNvbnRleHRWbTtcbiAgY2xvbmUuZm5PcHRpb25zID0gb3B0aW9ucztcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAoY2xvbmUuZGV2dG9vbHNNZXRhID0gY2xvbmUuZGV2dG9vbHNNZXRhIHx8IHt9KS5yZW5kZXJDb250ZXh0ID0gcmVuZGVyQ29udGV4dDtcbiAgfVxuICBpZiAoZGF0YS5zbG90KSB7XG4gICAgKGNsb25lLmRhdGEgfHwgKGNsb25lLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gIH1cbiAgcmV0dXJuIGNsb25lXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGlubGluZSBob29rcyB0byBiZSBpbnZva2VkIG9uIGNvbXBvbmVudCBWTm9kZXMgZHVyaW5nIHBhdGNoXG52YXIgY29tcG9uZW50Vk5vZGVIb29rcyA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIGlmIChcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAhdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkICYmXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZVxuICAgICkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgIHZub2RlLFxuICAgICAgICBhY3RpdmVJbnN0YW5jZVxuICAgICAgKTtcbiAgICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XG4gICAgfVxuICB9LFxuXG4gIHByZXBhdGNoOiBmdW5jdGlvbiBwcmVwYXRjaCAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgdXBkYXRlQ2hpbGRDb21wb25lbnQoXG4gICAgICBjaGlsZCxcbiAgICAgIG9wdGlvbnMucHJvcHNEYXRhLCAvLyB1cGRhdGVkIHByb3BzXG4gICAgICBvcHRpb25zLmxpc3RlbmVycywgLy8gdXBkYXRlZCBsaXN0ZW5lcnNcbiAgICAgIHZub2RlLCAvLyBuZXcgcGFyZW50IHZub2RlXG4gICAgICBvcHRpb25zLmNoaWxkcmVuIC8vIG5ldyBjaGlsZHJlblxuICAgICk7XG4gIH0sXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQgKHZub2RlKSB7XG4gICAgdmFyIGNvbnRleHQgPSB2bm9kZS5jb250ZXh0O1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCkge1xuICAgICAgY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCA9IHRydWU7XG4gICAgICBjYWxsSG9vayhjb21wb25lbnRJbnN0YW5jZSwgJ21vdW50ZWQnKTtcbiAgICB9XG4gICAgaWYgKHZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICBpZiAoY29udGV4dC5faXNNb3VudGVkKSB7XG4gICAgICAgIC8vIHZ1ZS1yb3V0ZXIjMTIxMlxuICAgICAgICAvLyBEdXJpbmcgdXBkYXRlcywgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCdzIGNoaWxkIGNvbXBvbmVudHMgbWF5XG4gICAgICAgIC8vIGNoYW5nZSwgc28gZGlyZWN0bHkgd2Fsa2luZyB0aGUgdHJlZSBoZXJlIG1heSBjYWxsIGFjdGl2YXRlZCBob29rc1xuICAgICAgICAvLyBvbiBpbmNvcnJlY3QgY2hpbGRyZW4uIEluc3RlYWQgd2UgcHVzaCB0aGVtIGludG8gYSBxdWV1ZSB3aGljaCB3aWxsXG4gICAgICAgIC8vIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgd2hvbGUgcGF0Y2ggcHJvY2VzcyBlbmRlZC5cbiAgICAgICAgcXVldWVBY3RpdmF0ZWRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkKSB7XG4gICAgICBpZiAoIXZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICAgIGNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciBob29rc1RvTWVyZ2UgPSBPYmplY3Qua2V5cyhjb21wb25lbnRWTm9kZUhvb2tzKTtcblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIGlmIChpc1VuZGVmKEN0b3IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgYmFzZUN0b3IgPSBjb250ZXh0LiRvcHRpb25zLl9iYXNlO1xuXG4gIC8vIHBsYWluIG9wdGlvbnMgb2JqZWN0OiB0dXJuIGl0IGludG8gYSBjb25zdHJ1Y3RvclxuICBpZiAoaXNPYmplY3QoQ3RvcikpIHtcbiAgICBDdG9yID0gYmFzZUN0b3IuZXh0ZW5kKEN0b3IpO1xuICB9XG5cbiAgLy8gaWYgYXQgdGhpcyBzdGFnZSBpdCdzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIGFuIGFzeW5jIGNvbXBvbmVudCBmYWN0b3J5LFxuICAvLyByZWplY3QuXG4gIGlmICh0eXBlb2YgQ3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuKChcIkludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246IFwiICsgKFN0cmluZyhDdG9yKSkpLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBhc3luYyBjb21wb25lbnRcbiAgdmFyIGFzeW5jRmFjdG9yeTtcbiAgaWYgKGlzVW5kZWYoQ3Rvci5jaWQpKSB7XG4gICAgYXN5bmNGYWN0b3J5ID0gQ3RvcjtcbiAgICBDdG9yID0gcmVzb2x2ZUFzeW5jQ29tcG9uZW50KGFzeW5jRmFjdG9yeSwgYmFzZUN0b3IpO1xuICAgIGlmIChDdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIG5vZGUgZm9yIGFzeW5jIGNvbXBvbmVudCwgd2hpY2ggaXMgcmVuZGVyZWRcbiAgICAgIC8vIGFzIGEgY29tbWVudCBub2RlIGJ1dCBwcmVzZXJ2ZXMgYWxsIHRoZSByYXcgaW5mb3JtYXRpb24gZm9yIHRoZSBub2RlLlxuICAgICAgLy8gdGhlIGluZm9ybWF0aW9uIHdpbGwgYmUgdXNlZCBmb3IgYXN5bmMgc2VydmVyLXJlbmRlcmluZyBhbmQgaHlkcmF0aW9uLlxuICAgICAgcmV0dXJuIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIoXG4gICAgICAgIGFzeW5jRmFjdG9yeSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHRhZ1xuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGRhdGEgPSBkYXRhIHx8IHt9O1xuXG4gIC8vIHJlc29sdmUgY29uc3RydWN0b3Igb3B0aW9ucyBpbiBjYXNlIGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQgYWZ0ZXJcbiAgLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uXG4gIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvcik7XG5cbiAgLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGRhdGEgaW50byBwcm9wcyAmIGV2ZW50c1xuICBpZiAoaXNEZWYoZGF0YS5tb2RlbCkpIHtcbiAgICB0cmFuc2Zvcm1Nb2RlbChDdG9yLm9wdGlvbnMsIGRhdGEpO1xuICB9XG5cbiAgLy8gZXh0cmFjdCBwcm9wc1xuICB2YXIgcHJvcHNEYXRhID0gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YShkYXRhLCBDdG9yLCB0YWcpO1xuXG4gIC8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbilcbiAgfVxuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzLCBzaW5jZSB0aGVzZSBuZWVkcyB0byBiZSB0cmVhdGVkIGFzXG4gIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzXG4gIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICAvLyBzbyBpdCBnZXRzIHByb2Nlc3NlZCBkdXJpbmcgcGFyZW50IGNvbXBvbmVudCBwYXRjaC5cbiAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuYWJzdHJhY3QpKSB7XG4gICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90XG5cbiAgICAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgdmFyIHNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgZGF0YSA9IHt9O1xuICAgIGlmIChzbG90KSB7XG4gICAgICBkYXRhLnNsb3QgPSBzbG90O1xuICAgIH1cbiAgfVxuXG4gIC8vIGluc3RhbGwgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZVxuICBpbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7XG5cbiAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG4gIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICBhc3luY0ZhY3RvcnlcbiAgKTtcblxuICByZXR1cm4gdm5vZGVcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSAoXG4gIHZub2RlLCAvLyB3ZSBrbm93IGl0J3MgTW91bnRlZENvbXBvbmVudFZOb2RlIGJ1dCBmbG93IGRvZXNuJ3RcbiAgcGFyZW50IC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIHBhcmVudDogcGFyZW50XG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICB2YXIgZXhpc3RpbmcgPSBob29rc1trZXldO1xuICAgIHZhciB0b01lcmdlID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7XG4gICAgICBob29rc1trZXldID0gZXhpc3RpbmcgPyBtZXJnZUhvb2skMSh0b01lcmdlLCBleGlzdGluZykgOiB0b01lcmdlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2skMSAoZjEsIGYyKSB7XG4gIHZhciBtZXJnZWQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIC8vIGZsb3cgY29tcGxhaW5zIGFib3V0IGV4dHJhIGFyZ3Mgd2hpY2ggaXMgd2h5IHdlIHVzZSBhbnlcbiAgICBmMShhLCBiKTtcbiAgICBmMihhLCBiKTtcbiAgfTtcbiAgbWVyZ2VkLl9tZXJnZWQgPSB0cnVlO1xuICByZXR1cm4gbWVyZ2VkXG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCdcbiAgOyhkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pKVtwcm9wXSA9IGRhdGEubW9kZWwudmFsdWU7XG4gIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gIHZhciBleGlzdGluZyA9IG9uW2V2ZW50XTtcbiAgdmFyIGNhbGxiYWNrID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgaWYgKGlzRGVmKGV4aXN0aW5nKSkge1xuICAgIGlmIChcbiAgICAgIEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpXG4gICAgICAgID8gZXhpc3RpbmcuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xXG4gICAgICAgIDogZXhpc3RpbmcgIT09IGNhbGxiYWNrXG4gICAgKSB7XG4gICAgICBvbltldmVudF0gPSBbY2FsbGJhY2tdLmNvbmNhdChleGlzdGluZyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG9uW2V2ZW50XSA9IGNhbGxiYWNrO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG52YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7XG5cbi8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZSxcbiAgYWx3YXlzTm9ybWFsaXplXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IGNoaWxkcmVuO1xuICAgIGNoaWxkcmVuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGVcbikge1xuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoKGRhdGEpLl9fb2JfXykpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIkF2b2lkIHVzaW5nIG9ic2VydmVkIGRhdGEgb2JqZWN0IGFzIHZub2RlIGRhdGE6IFwiICsgKEpTT04uc3RyaW5naWZ5KGRhdGEpKSArIFwiXFxuXCIgK1xuICAgICAgJ0Fsd2F5cyBjcmVhdGUgZnJlc2ggdm5vZGUgZGF0YSBvYmplY3RzIGluIGVhY2ggcmVuZGVyIScsXG4gICAgICBjb250ZXh0XG4gICAgKTtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gb2JqZWN0IHN5bnRheCBpbiB2LWJpbmRcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEuaXMpKSB7XG4gICAgdGFnID0gZGF0YS5pcztcbiAgfVxuICBpZiAoIXRhZykge1xuICAgIC8vIGluIGNhc2Ugb2YgY29tcG9uZW50IDppcyBzZXQgdG8gZmFsc3kgdmFsdWVcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1wcmltaXRpdmUga2V5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5rZXkpICYmICFpc1ByaW1pdGl2ZShkYXRhLmtleSlcbiAgKSB7XG4gICAge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHVzaW5nIG5vbi1wcmltaXRpdmUgdmFsdWUgYXMga2V5LCAnICtcbiAgICAgICAgJ3VzZSBzdHJpbmcvbnVtYmVyIHZhbHVlIGluc3RlYWQuJyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5zY29wZWRTbG90cyA9IHsgZGVmYXVsdDogY2hpbGRyZW5bMF0gfTtcbiAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH1cbiAgdmFyIHZub2RlLCBucztcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIEN0b3I7XG4gICAgbnMgPSAoY29udGV4dC4kdm5vZGUgJiYgY29udGV4dC4kdm5vZGUubnMpIHx8IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEubmF0aXZlT24pKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiVGhlIC5uYXRpdmUgbW9kaWZpZXIgZm9yIHYtb24gaXMgb25seSB2YWxpZCBvbiBjb21wb25lbnRzIGJ1dCBpdCB3YXMgdXNlZCBvbiA8XCIgKyB0YWcgKyBcIj4uXCIpLFxuICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICBjb25maWcucGFyc2VQbGF0Zm9ybVRhZ05hbWUodGFnKSwgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoKCFkYXRhIHx8ICFkYXRhLnByZSkgJiYgaXNEZWYoQ3RvciA9IHJlc29sdmVBc3NldChjb250ZXh0LiRvcHRpb25zLCAnY29tcG9uZW50cycsIHRhZykpKSB7XG4gICAgICAvLyBjb21wb25lbnRcbiAgICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KEN0b3IsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuLCB0YWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1bmtub3duIG9yIHVubGlzdGVkIG5hbWVzcGFjZWQgZWxlbWVudHNcbiAgICAgIC8vIGNoZWNrIGF0IHJ1bnRpbWUgYmVjYXVzZSBpdCBtYXkgZ2V0IGFzc2lnbmVkIGEgbmFtZXNwYWNlIHdoZW4gaXRzXG4gICAgICAvLyBwYXJlbnQgbm9ybWFsaXplcyBjaGlsZHJlblxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIHRhZywgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBkaXJlY3QgY29tcG9uZW50IG9wdGlvbnMgLyBjb25zdHJ1Y3RvclxuICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KHRhZywgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2UgaWYgKGlzRGVmKHZub2RlKSkge1xuICAgIGlmIChpc0RlZihucykpIHsgYXBwbHlOUyh2bm9kZSwgbnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7IHJlZ2lzdGVyRGVlcEJpbmRpbmdzKGRhdGEpOyB9XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5TlMgKHZub2RlLCBucywgZm9yY2UpIHtcbiAgdm5vZGUubnMgPSBucztcbiAgaWYgKHZub2RlLnRhZyA9PT0gJ2ZvcmVpZ25PYmplY3QnKSB7XG4gICAgLy8gdXNlIGRlZmF1bHQgbmFtZXNwYWNlIGluc2lkZSBmb3JlaWduT2JqZWN0XG4gICAgbnMgPSB1bmRlZmluZWQ7XG4gICAgZm9yY2UgPSB0cnVlO1xuICB9XG4gIGlmIChpc0RlZih2bm9kZS5jaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoY2hpbGQudGFnKSAmJiAoXG4gICAgICAgIGlzVW5kZWYoY2hpbGQubnMpIHx8IChpc1RydWUoZm9yY2UpICYmIGNoaWxkLnRhZyAhPT0gJ3N2ZycpKSkge1xuICAgICAgICBhcHBseU5TKGNoaWxkLCBucywgZm9yY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyByZWYgIzUzMThcbi8vIG5lY2Vzc2FyeSB0byBlbnN1cmUgcGFyZW50IHJlLXJlbmRlciB3aGVuIGRlZXAgYmluZGluZ3MgbGlrZSA6c3R5bGUgYW5kXG4vLyA6Y2xhc3MgYXJlIHVzZWQgb24gc2xvdCBub2Rlc1xuZnVuY3Rpb24gcmVnaXN0ZXJEZWVwQmluZGluZ3MgKGRhdGEpIHtcbiAgaWYgKGlzT2JqZWN0KGRhdGEuc3R5bGUpKSB7XG4gICAgdHJhdmVyc2UoZGF0YS5zdHlsZSk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KGRhdGEuY2xhc3MpKSB7XG4gICAgdHJhdmVyc2UoZGF0YS5jbGFzcyk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRSZW5kZXIgKHZtKSB7XG4gIHZtLl92bm9kZSA9IG51bGw7IC8vIHRoZSByb290IG9mIHRoZSBjaGlsZCB0cmVlXG4gIHZtLl9zdGF0aWNUcmVlcyA9IG51bGw7IC8vIHYtb25jZSBjYWNoZWQgdHJlZXNcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgdmFyIHBhcmVudFZub2RlID0gdm0uJHZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7IC8vIHRoZSBwbGFjZWhvbGRlciBub2RlIGluIHBhcmVudCB0cmVlXG4gIHZhciByZW5kZXJDb250ZXh0ID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuY29udGV4dDtcbiAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLCByZW5kZXJDb250ZXh0KTtcbiAgdm0uJHNjb3BlZFNsb3RzID0gZW1wdHlPYmplY3Q7XG4gIC8vIGJpbmQgdGhlIGNyZWF0ZUVsZW1lbnQgZm4gdG8gdGhpcyBpbnN0YW5jZVxuICAvLyBzbyB0aGF0IHdlIGdldCBwcm9wZXIgcmVuZGVyIGNvbnRleHQgaW5zaWRlIGl0LlxuICAvLyBhcmdzIG9yZGVyOiB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSwgYWx3YXlzTm9ybWFsaXplXG4gIC8vIGludGVybmFsIHZlcnNpb24gaXMgdXNlZCBieSByZW5kZXIgZnVuY3Rpb25zIGNvbXBpbGVkIGZyb20gdGVtcGxhdGVzXG4gIHZtLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIGZhbHNlKTsgfTtcbiAgLy8gbm9ybWFsaXphdGlvbiBpcyBhbHdheXMgYXBwbGllZCBmb3IgdGhlIHB1YmxpYyB2ZXJzaW9uLCB1c2VkIGluXG4gIC8vIHVzZXItd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zLlxuICB2bS4kY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCB0cnVlKTsgfTtcblxuICAvLyAkYXR0cnMgJiAkbGlzdGVuZXJzIGFyZSBleHBvc2VkIGZvciBlYXNpZXIgSE9DIGNyZWF0aW9uLlxuICAvLyB0aGV5IG5lZWQgdG8gYmUgcmVhY3RpdmUgc28gdGhhdCBIT0NzIHVzaW5nIHRoZW0gYXJlIGFsd2F5cyB1cGRhdGVkXG4gIHZhciBwYXJlbnREYXRhID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuZGF0YTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkYXR0cnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRsaXN0ZW5lcnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgfVxufVxuXG52YXIgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICBpZiAoX3BhcmVudFZub2RlKSB7XG4gICAgICB2bS4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHZtLiRzbG90cyxcbiAgICAgICAgdm0uJHNjb3BlZFNsb3RzXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHNldCBwYXJlbnQgdm5vZGUuIHRoaXMgYWxsb3dzIHJlbmRlciBmdW5jdGlvbnMgdG8gaGF2ZSBhY2Nlc3NcbiAgICAvLyB0byB0aGUgZGF0YSBvbiB0aGUgcGxhY2Vob2xkZXIgbm9kZS5cbiAgICB2bS4kdm5vZGUgPSBfcGFyZW50Vm5vZGU7XG4gICAgLy8gcmVuZGVyIHNlbGZcbiAgICB2YXIgdm5vZGU7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBtYWludGFpbiBhIHN0YWNrIGJlY2F1c2UgYWxsIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gc2VwYXJhdGVseSBmcm9tIG9uZSBhbm90aGVyLiBOZXN0ZWQgY29tcG9uZW50J3MgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyB3aGVuIHBhcmVudCBjb21wb25lbnQgaXMgcGF0Y2hlZC5cbiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IHZtO1xuICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJcIik7XG4gICAgICAvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCxcbiAgICAgIC8vIG9yIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2bm9kZSA9IHZtLiRvcHRpb25zLnJlbmRlckVycm9yLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCwgZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJFcnJvclwiKTtcbiAgICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuICAgIC8vIGlmIHRoZSByZXR1cm5lZCBhcnJheSBjb250YWlucyBvbmx5IGEgc2luZ2xlIG5vZGUsIGFsbG93IGl0XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpICYmIHZub2RlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdm5vZGUgPSB2bm9kZVswXTtcbiAgICB9XG4gICAgLy8gcmV0dXJuIGVtcHR5IHZub2RlIGluIGNhc2UgdGhlIHJlbmRlciBmdW5jdGlvbiBlcnJvcmVkIG91dFxuICAgIGlmICghKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdNdWx0aXBsZSByb290IG5vZGVzIHJldHVybmVkIGZyb20gcmVuZGVyIGZ1bmN0aW9uLiBSZW5kZXIgZnVuY3Rpb24gJyArXG4gICAgICAgICAgJ3Nob3VsZCByZXR1cm4gYSBzaW5nbGUgcm9vdCBub2RlLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICAgIH1cbiAgICAvLyBzZXQgcGFyZW50XG4gICAgdm5vZGUucGFyZW50ID0gX3BhcmVudFZub2RlO1xuICAgIHJldHVybiB2bm9kZVxuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW5zdXJlQ3RvciAoY29tcCwgYmFzZSkge1xuICBpZiAoXG4gICAgY29tcC5fX2VzTW9kdWxlIHx8XG4gICAgKGhhc1N5bWJvbCAmJiBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxuICApIHtcbiAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICB9XG4gIHJldHVybiBpc09iamVjdChjb21wKVxuICAgID8gYmFzZS5leHRlbmQoY29tcClcbiAgICA6IGNvbXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlciAoXG4gIGZhY3RvcnksXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICB2YXIgbm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgbm9kZS5hc3luY0ZhY3RvcnkgPSBmYWN0b3J5O1xuICBub2RlLmFzeW5jTWV0YSA9IHsgZGF0YTogZGF0YSwgY29udGV4dDogY29udGV4dCwgY2hpbGRyZW46IGNoaWxkcmVuLCB0YWc6IHRhZyB9O1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICBmYWN0b3J5LFxuICBiYXNlQ3RvclxuKSB7XG4gIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZXJyb3JDb21wXG4gIH1cblxuICBpZiAoaXNEZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5yZXNvbHZlZFxuICB9XG5cbiAgdmFyIG93bmVyID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuICBpZiAob3duZXIgJiYgaXNEZWYoZmFjdG9yeS5vd25lcnMpICYmIGZhY3Rvcnkub3duZXJzLmluZGV4T2Yob3duZXIpID09PSAtMSkge1xuICAgIC8vIGFscmVhZHkgcGVuZGluZ1xuICAgIGZhY3Rvcnkub3duZXJzLnB1c2gob3duZXIpO1xuICB9XG5cbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgfVxuXG4gIGlmIChvd25lciAmJiAhaXNEZWYoZmFjdG9yeS5vd25lcnMpKSB7XG4gICAgdmFyIG93bmVycyA9IGZhY3Rvcnkub3duZXJzID0gW293bmVyXTtcbiAgICB2YXIgc3luYyA9IHRydWU7XG4gICAgdmFyIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgdmFyIHRpbWVyVGltZW91dCA9IG51bGxcblxuICAgIDsob3duZXIpLiRvbignaG9vazpkZXN0cm95ZWQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmUob3duZXJzLCBvd25lcik7IH0pO1xuXG4gICAgdmFyIGZvcmNlUmVuZGVyID0gZnVuY3Rpb24gKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvd25lcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIChvd25lcnNbaV0pLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgICBpZiAodGltZXJMb2FkaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyTG9hZGluZyk7XG4gICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZXJUaW1lb3V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyVGltZW91dCk7XG4gICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVzb2x2ZSA9IG9uY2UoZnVuY3Rpb24gKHJlcykge1xuICAgICAgLy8gY2FjaGUgcmVzb2x2ZWRcbiAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpO1xuICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZXMgPSBmYWN0b3J5KHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICBpZiAoaXNPYmplY3QocmVzKSkge1xuICAgICAgaWYgKGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZShyZXMuY29tcG9uZW50KSkge1xuICAgICAgICByZXMuY29tcG9uZW50LnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgICAgICBpZiAoaXNEZWYocmVzLmVycm9yKSkge1xuICAgICAgICAgIGZhY3RvcnkuZXJyb3JDb21wID0gZW5zdXJlQ3RvcihyZXMuZXJyb3IsIGJhc2VDdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMubG9hZGluZykpIHtcbiAgICAgICAgICBmYWN0b3J5LmxvYWRpbmdDb21wID0gZW5zdXJlQ3RvcihyZXMubG9hZGluZywgYmFzZUN0b3IpO1xuICAgICAgICAgIGlmIChyZXMuZGVsYXkgPT09IDApIHtcbiAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSAmJiBpc1VuZGVmKGZhY3RvcnkuZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3JjZVJlbmRlcihmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlcy5kZWxheSB8fCAyMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMudGltZW91dCkpIHtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgICAgICAgICAgICAgICAgPyAoXCJ0aW1lb3V0IChcIiArIChyZXMudGltZW91dCkgKyBcIm1zKVwiKVxuICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgcmVzLnRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3luYyA9IGZhbHNlO1xuICAgIC8vIHJldHVybiBpbiBjYXNlIHJlc29sdmVkIHN5bmNocm9ub3VzbHlcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nXG4gICAgICA/IGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgICAgIDogZmFjdG9yeS5yZXNvbHZlZFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0FzeW5jUGxhY2Vob2xkZXIgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuaXNDb21tZW50ICYmIG5vZGUuYXN5bmNGYWN0b3J5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZXRGaXJzdENvbXBvbmVudENoaWxkIChjaGlsZHJlbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIChpc0RlZihjLmNvbXBvbmVudE9wdGlvbnMpIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKSkpIHtcbiAgICAgICAgcmV0dXJuIGNcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXZlbnRzICh2bSkge1xuICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlO1xuICAvLyBpbml0IHBhcmVudCBhdHRhY2hlZCBldmVudHNcbiAgdmFyIGxpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGlmIChsaXN0ZW5lcnMpIHtcbiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycyk7XG4gIH1cbn1cblxudmFyIHRhcmdldDtcblxuZnVuY3Rpb24gYWRkIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMSAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb2ZmKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyIChldmVudCwgZm4pIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQ7XG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgX3RhcmdldC4kb2ZmKGV2ZW50LCBvbmNlSGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyAoXG4gIHZtLFxuICBsaXN0ZW5lcnMsXG4gIG9sZExpc3RlbmVyc1xuKSB7XG4gIHRhcmdldCA9IHZtO1xuICB1cGRhdGVMaXN0ZW5lcnMobGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMgfHwge30sIGFkZCwgcmVtb3ZlJDEsIGNyZWF0ZU9uY2VIYW5kbGVyLCB2bSk7XG4gIHRhcmdldCA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXZlbnRzTWl4aW4gKFZ1ZSkge1xuICB2YXIgaG9va1JFID0gL15ob29rOi87XG4gIFZ1ZS5wcm90b3R5cGUuJG9uID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2bS4kb24oZXZlbnRbaV0sIGZuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHZtLl9ldmVudHNbZXZlbnRdIHx8ICh2bS5fZXZlbnRzW2V2ZW50XSA9IFtdKSkucHVzaChmbik7XG4gICAgICAvLyBvcHRpbWl6ZSBob29rOmV2ZW50IGNvc3QgYnkgdXNpbmcgYSBib29sZWFuIGZsYWcgbWFya2VkIGF0IHJlZ2lzdHJhdGlvblxuICAgICAgLy8gaW5zdGVhZCBvZiBhIGhhc2ggbG9va3VwXG4gICAgICBpZiAoaG9va1JFLnRlc3QoZXZlbnQpKSB7XG4gICAgICAgIHZtLl9oYXNIb29rRXZlbnQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgZnVuY3Rpb24gb24gKCkge1xuICAgICAgdm0uJG9mZihldmVudCwgb24pO1xuICAgICAgZm4uYXBwbHkodm0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIG9uLmZuID0gZm47XG4gICAgdm0uJG9uKGV2ZW50LCBvbik7XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBhcnJheSBvZiBldmVudHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkkMSA8IGw7IGkkMSsrKSB7XG4gICAgICAgIHZtLiRvZmYoZXZlbnRbaSQxXSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGV2ZW50XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmICghY2JzKSB7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKCFmbikge1xuICAgICAgdm0uX2V2ZW50c1tldmVudF0gPSBudWxsO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGhhbmRsZXJcbiAgICB2YXIgY2I7XG4gICAgdmFyIGkgPSBjYnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNiID0gY2JzW2ldO1xuICAgICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgICAgY2JzLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBsb3dlckNhc2VFdmVudCA9IGV2ZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAobG93ZXJDYXNlRXZlbnQgIT09IGV2ZW50ICYmIHZtLl9ldmVudHNbbG93ZXJDYXNlRXZlbnRdKSB7XG4gICAgICAgIHRpcChcbiAgICAgICAgICBcIkV2ZW50IFxcXCJcIiArIGxvd2VyQ2FzZUV2ZW50ICsgXCJcXFwiIGlzIGVtaXR0ZWQgaW4gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIgYnV0IHRoZSBoYW5kbGVyIGlzIHJlZ2lzdGVyZWQgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSBcIiArXG4gICAgICAgICAgXCJ2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gXCIgK1xuICAgICAgICAgIFwiWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgKGh5cGhlbmF0ZShldmVudCkpICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmIChjYnMpIHtcbiAgICAgIGNicyA9IGNicy5sZW5ndGggPiAxID8gdG9BcnJheShjYnMpIDogY2JzO1xuICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgICB2YXIgaW5mbyA9IFwiZXZlbnQgaGFuZGxlciBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCJcIjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjYnNbaV0sIHZtLCBhcmdzLCB2bSwgaW5mbyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIGFjdGl2ZUluc3RhbmNlID0gbnVsbDtcbnZhciBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcblxuZnVuY3Rpb24gc2V0QWN0aXZlSW5zdGFuY2Uodm0pIHtcbiAgdmFyIHByZXZBY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlO1xuICBhY3RpdmVJbnN0YW5jZSA9IHZtO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGFjdGl2ZUluc3RhbmNlID0gcHJldkFjdGl2ZUluc3RhbmNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRMaWZlY3ljbGUgKHZtKSB7XG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cbiAgLy8gbG9jYXRlIGZpcnN0IG5vbi1hYnN0cmFjdCBwYXJlbnRcbiAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBpZiAocGFyZW50ICYmICFvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgd2hpbGUgKHBhcmVudC4kb3B0aW9ucy5hYnN0cmFjdCAmJiBwYXJlbnQuJHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIHBhcmVudC4kY2hpbGRyZW4ucHVzaCh2bSk7XG4gIH1cblxuICB2bS4kcGFyZW50ID0gcGFyZW50O1xuICB2bS4kcm9vdCA9IHBhcmVudCA/IHBhcmVudC4kcm9vdCA6IHZtO1xuXG4gIHZtLiRjaGlsZHJlbiA9IFtdO1xuICB2bS4kcmVmcyA9IHt9O1xuXG4gIHZtLl93YXRjaGVyID0gbnVsbDtcbiAgdm0uX2luYWN0aXZlID0gbnVsbDtcbiAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gIHZtLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciBwcmV2RWwgPSB2bS4kZWw7XG4gICAgdmFyIHByZXZWbm9kZSA9IHZtLl92bm9kZTtcbiAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2Uodm0pO1xuICAgIHZtLl92bm9kZSA9IHZub2RlO1xuICAgIC8vIFZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fIGlzIGluamVjdGVkIGluIGVudHJ5IHBvaW50c1xuICAgIC8vIGJhc2VkIG9uIHRoZSByZW5kZXJpbmcgYmFja2VuZCB1c2VkLlxuICAgIGlmICghcHJldlZub2RlKSB7XG4gICAgICAvLyBpbml0aWFsIHJlbmRlclxuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UgLyogcmVtb3ZlT25seSAqLyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVwZGF0ZXNcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyhwcmV2Vm5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgLy8gdXBkYXRlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHByZXZFbCkge1xuICAgICAgcHJldkVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IHZtO1xuICAgIH1cbiAgICAvLyBpZiBwYXJlbnQgaXMgYW4gSE9DLCB1cGRhdGUgaXRzICRlbCBhcyB3ZWxsXG4gICAgaWYgKHZtLiR2bm9kZSAmJiB2bS4kcGFyZW50ICYmIHZtLiR2bm9kZSA9PT0gdm0uJHBhcmVudC5fdm5vZGUpIHtcbiAgICAgIHZtLiRwYXJlbnQuJGVsID0gdm0uJGVsO1xuICAgIH1cbiAgICAvLyB1cGRhdGVkIGhvb2sgaXMgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIgdG8gZW5zdXJlIHRoYXQgY2hpbGRyZW4gYXJlXG4gICAgLy8gdXBkYXRlZCBpbiBhIHBhcmVudCdzIHVwZGF0ZWQgaG9vay5cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRmb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZURlc3Ryb3knKTtcbiAgICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSBwYXJlbnRcbiAgICB2YXIgcGFyZW50ID0gdm0uJHBhcmVudDtcbiAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuX2lzQmVpbmdEZXN0cm95ZWQgJiYgIXZtLiRvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgICByZW1vdmUocGFyZW50LiRjaGlsZHJlbiwgdm0pO1xuICAgIH1cbiAgICAvLyB0ZWFyZG93biB3YXRjaGVyc1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gICAgdmFyIGkgPSB2bS5fd2F0Y2hlcnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZtLl93YXRjaGVyc1tpXS50ZWFyZG93bigpO1xuICAgIH1cbiAgICAvLyByZW1vdmUgcmVmZXJlbmNlIGZyb20gZGF0YSBvYlxuICAgIC8vIGZyb3plbiBvYmplY3QgbWF5IG5vdCBoYXZlIG9ic2VydmVyLlxuICAgIGlmICh2bS5fZGF0YS5fX29iX18pIHtcbiAgICAgIHZtLl9kYXRhLl9fb2JfXy52bUNvdW50LS07XG4gICAgfVxuICAgIC8vIGNhbGwgdGhlIGxhc3QgaG9vay4uLlxuICAgIHZtLl9pc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gaW52b2tlIGRlc3Ryb3kgaG9va3Mgb24gY3VycmVudCByZW5kZXJlZCB0cmVlXG4gICAgdm0uX19wYXRjaF9fKHZtLl92bm9kZSwgbnVsbCk7XG4gICAgLy8gZmlyZSBkZXN0cm95ZWQgaG9va1xuICAgIGNhbGxIb29rKHZtLCAnZGVzdHJveWVkJyk7XG4gICAgLy8gdHVybiBvZmYgYWxsIGluc3RhbmNlIGxpc3RlbmVycy5cbiAgICB2bS4kb2ZmKCk7XG4gICAgLy8gcmVtb3ZlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICAvLyByZWxlYXNlIGNpcmN1bGFyIHJlZmVyZW5jZSAoIzY3NTkpXG4gICAgaWYgKHZtLiR2bm9kZSkge1xuICAgICAgdm0uJHZub2RlLnBhcmVudCA9IG51bGw7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBtb3VudENvbXBvbmVudCAoXG4gIHZtLFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgdm0uJGVsID0gZWw7XG4gIGlmICghdm0uJG9wdGlvbnMucmVuZGVyKSB7XG4gICAgdm0uJG9wdGlvbnMucmVuZGVyID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoKHZtLiRvcHRpb25zLnRlbXBsYXRlICYmIHZtLiRvcHRpb25zLnRlbXBsYXRlLmNoYXJBdCgwKSAhPT0gJyMnKSB8fFxuICAgICAgICB2bS4kb3B0aW9ucy5lbCB8fCBlbCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgYXJlIHVzaW5nIHRoZSBydW50aW1lLW9ubHkgYnVpbGQgb2YgVnVlIHdoZXJlIHRoZSB0ZW1wbGF0ZSAnICtcbiAgICAgICAgICAnY29tcGlsZXIgaXMgbm90IGF2YWlsYWJsZS4gRWl0aGVyIHByZS1jb21waWxlIHRoZSB0ZW1wbGF0ZXMgaW50byAnICtcbiAgICAgICAgICAncmVuZGVyIGZ1bmN0aW9ucywgb3IgdXNlIHRoZSBjb21waWxlci1pbmNsdWRlZCBidWlsZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdGYWlsZWQgdG8gbW91bnQgY29tcG9uZW50OiB0ZW1wbGF0ZSBvciByZW5kZXIgZnVuY3Rpb24gbm90IGRlZmluZWQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjYWxsSG9vayh2bSwgJ2JlZm9yZU1vdW50Jyk7XG5cbiAgdmFyIHVwZGF0ZUNvbXBvbmVudDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG5hbWUgPSB2bS5fbmFtZTtcbiAgICAgIHZhciBpZCA9IHZtLl91aWQ7XG4gICAgICB2YXIgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgaWQ7XG4gICAgICB2YXIgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyBpZDtcblxuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICB2YXIgdm5vZGUgPSB2bS5fcmVuZGVyKCk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArIG5hbWUgKyBcIiByZW5kZXJcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZtLl91cGRhdGUodm5vZGUsIGh5ZHJhdGluZyk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArIG5hbWUgKyBcIiBwYXRjaFwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2bS5fdXBkYXRlKHZtLl9yZW5kZXIoKSwgaHlkcmF0aW5nKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gd2Ugc2V0IHRoaXMgdG8gdm0uX3dhdGNoZXIgaW5zaWRlIHRoZSB3YXRjaGVyJ3MgY29uc3RydWN0b3JcbiAgLy8gc2luY2UgdGhlIHdhdGNoZXIncyBpbml0aWFsIHBhdGNoIG1heSBjYWxsICRmb3JjZVVwZGF0ZSAoZS5nLiBpbnNpZGUgY2hpbGRcbiAgLy8gY29tcG9uZW50J3MgbW91bnRlZCBob29rKSwgd2hpY2ggcmVsaWVzIG9uIHZtLl93YXRjaGVyIGJlaW5nIGFscmVhZHkgZGVmaW5lZFxuICBuZXcgV2F0Y2hlcih2bSwgdXBkYXRlQ29tcG9uZW50LCBub29wLCB7XG4gICAgYmVmb3JlOiBmdW5jdGlvbiBiZWZvcmUgKCkge1xuICAgICAgaWYgKHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZVVwZGF0ZScpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgdHJ1ZSAvKiBpc1JlbmRlcldhdGNoZXIgKi8pO1xuICBoeWRyYXRpbmcgPSBmYWxzZTtcblxuICAvLyBtYW51YWxseSBtb3VudGVkIGluc3RhbmNlLCBjYWxsIG1vdW50ZWQgb24gc2VsZlxuICAvLyBtb3VudGVkIGlzIGNhbGxlZCBmb3IgcmVuZGVyLWNyZWF0ZWQgY2hpbGQgY29tcG9uZW50cyBpbiBpdHMgaW5zZXJ0ZWQgaG9va1xuICBpZiAodm0uJHZub2RlID09IG51bGwpIHtcbiAgICB2bS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICBjYWxsSG9vayh2bSwgJ21vdW50ZWQnKTtcbiAgfVxuICByZXR1cm4gdm1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ2hpbGRDb21wb25lbnQgKFxuICB2bSxcbiAgcHJvcHNEYXRhLFxuICBsaXN0ZW5lcnMsXG4gIHBhcmVudFZub2RlLFxuICByZW5kZXJDaGlsZHJlblxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGRldGVybWluZSB3aGV0aGVyIGNvbXBvbmVudCBoYXMgc2xvdCBjaGlsZHJlblxuICAvLyB3ZSBuZWVkIHRvIGRvIHRoaXMgYmVmb3JlIG92ZXJ3cml0aW5nICRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbi5cblxuICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgZHluYW1pYyBzY29wZWRTbG90cyAoaGFuZC13cml0dGVuIG9yIGNvbXBpbGVkIGJ1dCB3aXRoXG4gIC8vIGR5bmFtaWMgc2xvdCBuYW1lcykuIFN0YXRpYyBzY29wZWQgc2xvdHMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZSBoYXMgdGhlXG4gIC8vIFwiJHN0YWJsZVwiIG1hcmtlci5cbiAgdmFyIG5ld1Njb3BlZFNsb3RzID0gcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cztcbiAgdmFyIG9sZFNjb3BlZFNsb3RzID0gdm0uJHNjb3BlZFNsb3RzO1xuICB2YXIgaGFzRHluYW1pY1Njb3BlZFNsb3QgPSAhIShcbiAgICAobmV3U2NvcGVkU2xvdHMgJiYgIW5ld1Njb3BlZFNsb3RzLiRzdGFibGUpIHx8XG4gICAgKG9sZFNjb3BlZFNsb3RzICE9PSBlbXB0eU9iamVjdCAmJiAhb2xkU2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAobmV3U2NvcGVkU2xvdHMgJiYgdm0uJHNjb3BlZFNsb3RzLiRrZXkgIT09IG5ld1Njb3BlZFNsb3RzLiRrZXkpXG4gICk7XG5cbiAgLy8gQW55IHN0YXRpYyBzbG90IGNoaWxkcmVuIGZyb20gdGhlIHBhcmVudCBtYXkgaGF2ZSBjaGFuZ2VkIGR1cmluZyBwYXJlbnQnc1xuICAvLyB1cGRhdGUuIER5bmFtaWMgc2NvcGVkIHNsb3RzIG1heSBhbHNvIGhhdmUgY2hhbmdlZC4gSW4gc3VjaCBjYXNlcywgYSBmb3JjZWRcbiAgLy8gdXBkYXRlIGlzIG5lY2Vzc2FyeSB0byBlbnN1cmUgY29ycmVjdG5lc3MuXG4gIHZhciBuZWVkc0ZvcmNlVXBkYXRlID0gISEoXG4gICAgcmVuZGVyQ2hpbGRyZW4gfHwgICAgICAgICAgICAgICAvLyBoYXMgbmV3IHN0YXRpYyBzbG90c1xuICAgIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiB8fCAgLy8gaGFzIG9sZCBzdGF0aWMgc2xvdHNcbiAgICBoYXNEeW5hbWljU2NvcGVkU2xvdFxuICApO1xuXG4gIHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuICB2bS4kdm5vZGUgPSBwYXJlbnRWbm9kZTsgLy8gdXBkYXRlIHZtJ3MgcGxhY2Vob2xkZXIgbm9kZSB3aXRob3V0IHJlLXJlbmRlclxuXG4gIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcbiAgICB2bS5fdm5vZGUucGFyZW50ID0gcGFyZW50Vm5vZGU7XG4gIH1cbiAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cbiAgLy8gdXBkYXRlICRhdHRycyBhbmQgJGxpc3RlbmVycyBoYXNoXG4gIC8vIHRoZXNlIGFyZSBhbHNvIHJlYWN0aXZlIHNvIHRoZXkgbWF5IHRyaWdnZXIgY2hpbGQgdXBkYXRlIGlmIHRoZSBjaGlsZFxuICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxuICB2bS4kYXR0cnMgPSBwYXJlbnRWbm9kZS5kYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0O1xuICB2bS4kbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuXG4gIC8vIHVwZGF0ZSBwcm9wc1xuICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICB2YXIgcHJvcHMgPSB2bS5fcHJvcHM7XG4gICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgIHZhciBwcm9wT3B0aW9ucyA9IHZtLiRvcHRpb25zLnByb3BzOyAvLyB3dGYgZmxvdz9cbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgfVxuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICB9XG5cbiAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZhciBvbGRMaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcblxuICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuICBpZiAobmVlZHNGb3JjZVVwZGF0ZSkge1xuICAgIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhyZW5kZXJDaGlsZHJlbiwgcGFyZW50Vm5vZGUuY29udGV4dCk7XG4gICAgdm0uJGZvcmNlVXBkYXRlKCk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzSW5JbmFjdGl2ZVRyZWUgKHZtKSB7XG4gIHdoaWxlICh2bSAmJiAodm0gPSB2bS4kcGFyZW50KSkge1xuICAgIGlmICh2bS5faW5hY3RpdmUpIHsgcmV0dXJuIHRydWUgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfSBlbHNlIGlmICh2bS5fZGlyZWN0SW5hY3RpdmUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodm0uX2luYWN0aXZlIHx8IHZtLl9pbmFjdGl2ZSA9PT0gbnVsbCkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSB0cnVlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG4gIGlmICghdm0uX2luYWN0aXZlKSB7XG4gICAgdm0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnZGVhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayAodm0sIGhvb2spIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGxpZmVjeWNsZSBob29rc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHZhciBoYW5kbGVycyA9IHZtLiRvcHRpb25zW2hvb2tdO1xuICB2YXIgaW5mbyA9IGhvb2sgKyBcIiBob29rXCI7XG4gIGlmIChoYW5kbGVycykge1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhoYW5kbGVyc1tpXSwgdm0sIG51bGwsIHZtLCBpbmZvKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZtLl9oYXNIb29rRXZlbnQpIHtcbiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gIH1cbiAgcG9wVGFyZ2V0KCk7XG59XG5cbi8qICAqL1xuXG52YXIgTUFYX1VQREFURV9DT1VOVCA9IDEwMDtcblxudmFyIHF1ZXVlID0gW107XG52YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTtcbnZhciBoYXMgPSB7fTtcbnZhciBjaXJjdWxhciA9IHt9O1xudmFyIHdhaXRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIGluZGV4ID0gMDtcblxuLyoqXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUgKCkge1xuICBpbmRleCA9IHF1ZXVlLmxlbmd0aCA9IGFjdGl2YXRlZENoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIGhhcyA9IHt9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNpcmN1bGFyID0ge307XG4gIH1cbiAgd2FpdGluZyA9IGZsdXNoaW5nID0gZmFsc2U7XG59XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSAjNjU2NiByZXF1aXJlcyBzYXZpbmcgdGhlIHRpbWVzdGFtcCB3aGVuIGV2ZW50IGxpc3RlbmVycyBhcmVcbi8vIGF0dGFjaGVkLiBIb3dldmVyLCBjYWxsaW5nIHBlcmZvcm1hbmNlLm5vdygpIGhhcyBhIHBlcmYgb3ZlcmhlYWQgZXNwZWNpYWxseVxuLy8gaWYgdGhlIHBhZ2UgaGFzIHRob3VzYW5kcyBvZiBldmVudCBsaXN0ZW5lcnMuIEluc3RlYWQsIHdlIHRha2UgYSB0aW1lc3RhbXBcbi8vIGV2ZXJ5IHRpbWUgdGhlIHNjaGVkdWxlciBmbHVzaGVzIGFuZCB1c2UgdGhhdCBmb3IgYWxsIGV2ZW50IGxpc3RlbmVyc1xuLy8gYXR0YWNoZWQgZHVyaW5nIHRoYXQgZmx1c2guXG52YXIgY3VycmVudEZsdXNoVGltZXN0YW1wID0gMDtcblxuLy8gQXN5bmMgZWRnZSBjYXNlIGZpeCByZXF1aXJlcyBzdG9yaW5nIGFuIGV2ZW50IGxpc3RlbmVyJ3MgYXR0YWNoIHRpbWVzdGFtcC5cbnZhciBnZXROb3cgPSBEYXRlLm5vdztcblxuLy8gRGV0ZXJtaW5lIHdoYXQgZXZlbnQgdGltZXN0YW1wIHRoZSBicm93c2VyIGlzIHVzaW5nLiBBbm5veWluZ2x5LCB0aGVcbi8vIHRpbWVzdGFtcCBjYW4gZWl0aGVyIGJlIGhpLXJlcyAocmVsYXRpdmUgdG8gcGFnZSBsb2FkKSBvciBsb3ctcmVzXG4vLyAocmVsYXRpdmUgdG8gVU5JWCBlcG9jaCksIHNvIGluIG9yZGVyIHRvIGNvbXBhcmUgdGltZSB3ZSBoYXZlIHRvIHVzZSB0aGVcbi8vIHNhbWUgdGltZXN0YW1wIHR5cGUgd2hlbiBzYXZpbmcgdGhlIGZsdXNoIHRpbWVzdGFtcC5cbi8vIEFsbCBJRSB2ZXJzaW9ucyB1c2UgbG93LXJlcyBldmVudCB0aW1lc3RhbXBzLCBhbmQgaGF2ZSBwcm9ibGVtYXRpYyBjbG9ja1xuLy8gaW1wbGVtZW50YXRpb25zICgjOTYzMilcbmlmIChpbkJyb3dzZXIgJiYgIWlzSUUpIHtcbiAgdmFyIHBlcmZvcm1hbmNlID0gd2luZG93LnBlcmZvcm1hbmNlO1xuICBpZiAoXG4gICAgcGVyZm9ybWFuY2UgJiZcbiAgICB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nICYmXG4gICAgZ2V0Tm93KCkgPiBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKS50aW1lU3RhbXBcbiAgKSB7XG4gICAgLy8gaWYgdGhlIGV2ZW50IHRpbWVzdGFtcCwgYWx0aG91Z2ggZXZhbHVhdGVkIEFGVEVSIHRoZSBEYXRlLm5vdygpLCBpc1xuICAgIC8vIHNtYWxsZXIgdGhhbiBpdCwgaXQgbWVhbnMgdGhlIGV2ZW50IGlzIHVzaW5nIGEgaGktcmVzIHRpbWVzdGFtcCxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byB1c2UgdGhlIGhpLXJlcyB2ZXJzaW9uIGZvciBldmVudCBsaXN0ZW5lciB0aW1lc3RhbXBzIGFzXG4gICAgLy8gd2VsbC5cbiAgICBnZXROb3cgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTsgfTtcbiAgfVxufVxuXG4vKipcbiAqIEZsdXNoIGJvdGggcXVldWVzIGFuZCBydW4gdGhlIHdhdGNoZXJzLlxuICovXG5mdW5jdGlvbiBmbHVzaFNjaGVkdWxlclF1ZXVlICgpIHtcbiAgY3VycmVudEZsdXNoVGltZXN0YW1wID0gZ2V0Tm93KCk7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcbiAgdmFyIHdhdGNoZXIsIGlkO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWYgKHdhdGNoZXIuYmVmb3JlKSB7XG4gICAgICB3YXRjaGVyLmJlZm9yZSgpO1xuICAgIH1cbiAgICBpZCA9IHdhdGNoZXIuaWQ7XG4gICAgaGFzW2lkXSA9IG51bGw7XG4gICAgd2F0Y2hlci5ydW4oKTtcbiAgICAvLyBpbiBkZXYgYnVpbGQsIGNoZWNrIGFuZCBzdG9wIGNpcmN1bGFyIHVwZGF0ZXMuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaGFzW2lkXSAhPSBudWxsKSB7XG4gICAgICBjaXJjdWxhcltpZF0gPSAoY2lyY3VsYXJbaWRdIHx8IDApICsgMTtcbiAgICAgIGlmIChjaXJjdWxhcltpZF0gPiBNQVhfVVBEQVRFX0NPVU5UKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBtYXkgaGF2ZSBhbiBpbmZpbml0ZSB1cGRhdGUgbG9vcCAnICsgKFxuICAgICAgICAgICAgd2F0Y2hlci51c2VyXG4gICAgICAgICAgICAgID8gKFwiaW4gd2F0Y2hlciB3aXRoIGV4cHJlc3Npb24gXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIilcbiAgICAgICAgICAgICAgOiBcImluIGEgY29tcG9uZW50IHJlbmRlciBmdW5jdGlvbi5cIlxuICAgICAgICAgICksXG4gICAgICAgICAgd2F0Y2hlci52bVxuICAgICAgICApO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGtlZXAgY29waWVzIG9mIHBvc3QgcXVldWVzIGJlZm9yZSByZXNldHRpbmcgc3RhdGVcbiAgdmFyIGFjdGl2YXRlZFF1ZXVlID0gYWN0aXZhdGVkQ2hpbGRyZW4uc2xpY2UoKTtcbiAgdmFyIHVwZGF0ZWRRdWV1ZSA9IHF1ZXVlLnNsaWNlKCk7XG5cbiAgcmVzZXRTY2hlZHVsZXJTdGF0ZSgpO1xuXG4gIC8vIGNhbGwgY29tcG9uZW50IHVwZGF0ZWQgYW5kIGFjdGl2YXRlZCBob29rc1xuICBjYWxsQWN0aXZhdGVkSG9va3MoYWN0aXZhdGVkUXVldWUpO1xuICBjYWxsVXBkYXRlZEhvb2tzKHVwZGF0ZWRRdWV1ZSk7XG5cbiAgLy8gZGV2dG9vbCBob29rXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZGV2dG9vbHMgJiYgY29uZmlnLmRldnRvb2xzKSB7XG4gICAgZGV2dG9vbHMuZW1pdCgnZmx1c2gnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsVXBkYXRlZEhvb2tzIChxdWV1ZSkge1xuICB2YXIgaSA9IHF1ZXVlLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciB3YXRjaGVyID0gcXVldWVbaV07XG4gICAgdmFyIHZtID0gd2F0Y2hlci52bTtcbiAgICBpZiAodm0uX3dhdGNoZXIgPT09IHdhdGNoZXIgJiYgdm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXG4gKiBUaGUgcXVldWUgd2lsbCBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIGVudGlyZSB0cmVlIGhhcyBiZWVuIHBhdGNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50ICh2bSkge1xuICAvLyBzZXR0aW5nIF9pbmFjdGl2ZSB0byBmYWxzZSBoZXJlIHNvIHRoYXQgYSByZW5kZXIgZnVuY3Rpb24gY2FuXG4gIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpXG4gIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTtcbn1cblxuZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVldWVbaV0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pO1xuICB9XG59XG5cbi8qKlxuICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS5cbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7XG4gICAgaGFzW2lkXSA9IHRydWU7XG4gICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID4gaW5kZXggJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgd2F0Y2hlcik7XG4gICAgfVxuICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgIGlmICghd2FpdGluZykge1xuICAgICAgd2FpdGluZyA9IHRydWU7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAgICAgZmx1c2hTY2hlZHVsZXJRdWV1ZSgpO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbnZhciB1aWQkMiA9IDA7XG5cbi8qKlxuICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsXG4gKiBhbmQgZmlyZXMgY2FsbGJhY2sgd2hlbiB0aGUgZXhwcmVzc2lvbiB2YWx1ZSBjaGFuZ2VzLlxuICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuXG4gKi9cbnZhciBXYXRjaGVyID0gZnVuY3Rpb24gV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBjYixcbiAgb3B0aW9ucyxcbiAgaXNSZW5kZXJXYXRjaGVyXG4pIHtcbiAgdGhpcy52bSA9IHZtO1xuICBpZiAoaXNSZW5kZXJXYXRjaGVyKSB7XG4gICAgdm0uX3dhdGNoZXIgPSB0aGlzO1xuICB9XG4gIHZtLl93YXRjaGVycy5wdXNoKHRoaXMpO1xuICAvLyBvcHRpb25zXG4gIGlmIChvcHRpb25zKSB7XG4gICAgdGhpcy5kZWVwID0gISFvcHRpb25zLmRlZXA7XG4gICAgdGhpcy51c2VyID0gISFvcHRpb25zLnVzZXI7XG4gICAgdGhpcy5sYXp5ID0gISFvcHRpb25zLmxhenk7XG4gICAgdGhpcy5zeW5jID0gISFvcHRpb25zLnN5bmM7XG4gICAgdGhpcy5iZWZvcmUgPSBvcHRpb25zLmJlZm9yZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgfVxuICB0aGlzLmNiID0gY2I7XG4gIHRoaXMuaWQgPSArK3VpZCQyOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgdGhpcy5kZXBzID0gW107XG4gIHRoaXMubmV3RGVwcyA9IFtdO1xuICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5leHByZXNzaW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgID8gZXhwT3JGbi50b1N0cmluZygpXG4gICAgOiAnJztcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IG5vb3A7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHdhdGNoaW5nIHBhdGg6IFxcXCJcIiArIGV4cE9yRm4gKyBcIlxcXCIgXCIgK1xuICAgICAgICAnV2F0Y2hlciBvbmx5IGFjY2VwdHMgc2ltcGxlIGRvdC1kZWxpbWl0ZWQgcGF0aHMuICcgK1xuICAgICAgICAnRm9yIGZ1bGwgY29udHJvbCwgdXNlIGEgZnVuY3Rpb24gaW5zdGVhZC4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgdGhpcy52YWx1ZSA9IHRoaXMubGF6eVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiB0aGlzLmdldCgpO1xufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgZ2V0dGVyLCBhbmQgcmUtY29sbGVjdCBkZXBlbmRlbmNpZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoKSB7XG4gIHB1c2hUYXJnZXQodGhpcyk7XG4gIHZhciB2YWx1ZTtcbiAgdmFyIHZtID0gdGhpcy52bTtcbiAgdHJ5IHtcbiAgICB2YWx1ZSA9IHRoaXMuZ2V0dGVyLmNhbGwodm0sIHZtKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoXCJnZXR0ZXIgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlXG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIC8vIFwidG91Y2hcIiBldmVyeSBwcm9wZXJ0eSBzbyB0aGV5IGFyZSBhbGwgdHJhY2tlZCBhc1xuICAgIC8vIGRlcGVuZGVuY2llcyBmb3IgZGVlcCB3YXRjaGluZ1xuICAgIGlmICh0aGlzLmRlZXApIHtcbiAgICAgIHRyYXZlcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgcG9wVGFyZ2V0KCk7XG4gICAgdGhpcy5jbGVhbnVwRGVwcygpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufTtcblxuLyoqXG4gKiBBZGQgYSBkZXBlbmRlbmN5IHRvIHRoaXMgZGlyZWN0aXZlLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5hZGREZXAgPSBmdW5jdGlvbiBhZGREZXAgKGRlcCkge1xuICB2YXIgaWQgPSBkZXAuaWQ7XG4gIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGlkKSkge1xuICAgIHRoaXMubmV3RGVwSWRzLmFkZChpZCk7XG4gICAgdGhpcy5uZXdEZXBzLnB1c2goZGVwKTtcbiAgICBpZiAoIXRoaXMuZGVwSWRzLmhhcyhpZCkpIHtcbiAgICAgIGRlcC5hZGRTdWIodGhpcyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENsZWFuIHVwIGZvciBkZXBlbmRlbmN5IGNvbGxlY3Rpb24uXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmNsZWFudXBEZXBzID0gZnVuY3Rpb24gY2xlYW51cERlcHMgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgZGVwID0gdGhpcy5kZXBzW2ldO1xuICAgIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGRlcC5pZCkpIHtcbiAgICAgIGRlcC5yZW1vdmVTdWIodGhpcyk7XG4gICAgfVxuICB9XG4gIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgdGhpcy5uZXdEZXBJZHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gIHRtcCA9IHRoaXMuZGVwcztcbiAgdGhpcy5kZXBzID0gdGhpcy5uZXdEZXBzO1xuICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkZXBlbmRlbmN5IGNoYW5nZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0aGlzLmxhenkpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHtcbiAgICB0aGlzLnJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgaXNPYmplY3QodmFsdWUpIHx8XG4gICAgICB0aGlzLmRlZXBcbiAgICApIHtcbiAgICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB0aGlzLnZtLCAoXCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgdmFsdWUgb2YgdGhlIHdhdGNoZXIuXG4gKiBUaGlzIG9ubHkgZ2V0cyBjYWxsZWQgZm9yIGxhenkgd2F0Y2hlcnMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUgKCkge1xuICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBEZXBlbmQgb24gYWxsIGRlcHMgY29sbGVjdGVkIGJ5IHRoaXMgd2F0Y2hlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdGhpcy5kZXBzW2ldLmRlcGVuZCgpO1xuICB9XG59O1xuXG4vKipcbiAqIFJlbW92ZSBzZWxmIGZyb20gYWxsIGRlcGVuZGVuY2llcycgc3Vic2NyaWJlciBsaXN0LlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS50ZWFyZG93biA9IGZ1bmN0aW9uIHRlYXJkb3duICgpIHtcbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSB2bSdzIHdhdGNoZXIgbGlzdFxuICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXRcbiAgICAvLyBpZiB0aGUgdm0gaXMgYmVpbmcgZGVzdHJveWVkLlxuICAgIGlmICghdGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmVtb3ZlKHRoaXMudm0uX3dhdGNoZXJzLCB0aGlzKTtcbiAgICB9XG4gICAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMuZGVwc1tpXS5yZW1vdmVTdWIodGhpcyk7XG4gICAgfVxuICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gIH1cbn07XG5cbi8qICAqL1xuXG52YXIgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uID0ge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogbm9vcCxcbiAgc2V0OiBub29wXG59O1xuXG5mdW5jdGlvbiBwcm94eSAodGFyZ2V0LCBzb3VyY2VLZXksIGtleSkge1xuICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gZnVuY3Rpb24gcHJveHlHZXR0ZXIgKCkge1xuICAgIHJldHVybiB0aGlzW3NvdXJjZUtleV1ba2V5XVxuICB9O1xuICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gZnVuY3Rpb24gcHJveHlTZXR0ZXIgKHZhbCkge1xuICAgIHRoaXNbc291cmNlS2V5XVtrZXldID0gdmFsO1xuICB9O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbik7XG59XG5cbmZ1bmN0aW9uIGluaXRTdGF0ZSAodm0pIHtcbiAgdm0uX3dhdGNoZXJzID0gW107XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnM7XG4gIGlmIChvcHRzLnByb3BzKSB7IGluaXRQcm9wcyh2bSwgb3B0cy5wcm9wcyk7IH1cbiAgaWYgKG9wdHMubWV0aG9kcykgeyBpbml0TWV0aG9kcyh2bSwgb3B0cy5tZXRob2RzKTsgfVxuICBpZiAob3B0cy5kYXRhKSB7XG4gICAgaW5pdERhdGEodm0pO1xuICB9IGVsc2Uge1xuICAgIG9ic2VydmUodm0uX2RhdGEgPSB7fSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbiAgfVxuICBpZiAob3B0cy5jb21wdXRlZCkgeyBpbml0Q29tcHV0ZWQodm0sIG9wdHMuY29tcHV0ZWQpOyB9XG4gIGlmIChvcHRzLndhdGNoICYmIG9wdHMud2F0Y2ggIT09IG5hdGl2ZVdhdGNoKSB7XG4gICAgaW5pdFdhdGNoKHZtLCBvcHRzLndhdGNoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMgKHZtLCBwcm9wc09wdGlvbnMpIHtcbiAgdmFyIHByb3BzRGF0YSA9IHZtLiRvcHRpb25zLnByb3BzRGF0YSB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm0uX3Byb3BzID0ge307XG4gIC8vIGNhY2hlIHByb3Aga2V5cyBzbyB0aGF0IGZ1dHVyZSBwcm9wcyB1cGRhdGVzIGNhbiBpdGVyYXRlIHVzaW5nIEFycmF5XG4gIC8vIGluc3RlYWQgb2YgZHluYW1pYyBvYmplY3Qga2V5IGVudW1lcmF0aW9uLlxuICB2YXIga2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyA9IFtdO1xuICB2YXIgaXNSb290ID0gIXZtLiRwYXJlbnQ7XG4gIC8vIHJvb3QgaW5zdGFuY2UgcHJvcHMgc2hvdWxkIGJlIGNvbnZlcnRlZFxuICBpZiAoIWlzUm9vdCkge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gIH1cbiAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB2YXIgdmFsdWUgPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wc09wdGlvbnMsIHByb3BzRGF0YSwgdm0pO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBpZiAoaXNSZXNlcnZlZEF0dHJpYnV0ZShoeXBoZW5hdGVkS2V5KSB8fFxuICAgICAgICAgIGNvbmZpZy5pc1Jlc2VydmVkQXR0cihoeXBoZW5hdGVkS2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIlxcXCJcIiArIGh5cGhlbmF0ZWRLZXkgKyBcIlxcXCIgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUgYW5kIGNhbm5vdCBiZSB1c2VkIGFzIGNvbXBvbmVudCBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc1Jvb3QgJiYgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGEgcHJvcCBkaXJlY3RseSBzaW5jZSB0aGUgdmFsdWUgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwYXJlbnQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiSW5zdGVhZCwgdXNlIGEgZGF0YSBvciBjb21wdXRlZCBwcm9wZXJ0eSBiYXNlZCBvbiB0aGUgcHJvcCdzIFwiICtcbiAgICAgICAgICAgIFwidmFsdWUuIFByb3AgYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIC8vIHN0YXRpYyBwcm9wcyBhcmUgYWxyZWFkeSBwcm94aWVkIG9uIHRoZSBjb21wb25lbnQncyBwcm90b3R5cGVcbiAgICAvLyBkdXJpbmcgVnVlLmV4dGVuZCgpLiBXZSBvbmx5IG5lZWQgdG8gcHJveHkgcHJvcHMgZGVmaW5lZCBhdFxuICAgIC8vIGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBwcm94eSh2bSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzT3B0aW9ucykgbG9vcCgga2V5ICk7XG4gIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbn1cblxuZnVuY3Rpb24gaW5pdERhdGEgKHZtKSB7XG4gIHZhciBkYXRhID0gdm0uJG9wdGlvbnMuZGF0YTtcbiAgZGF0YSA9IHZtLl9kYXRhID0gdHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbidcbiAgICA/IGdldERhdGEoZGF0YSwgdm0pXG4gICAgOiBkYXRhIHx8IHt9O1xuICBpZiAoIWlzUGxhaW5PYmplY3QoZGF0YSkpIHtcbiAgICBkYXRhID0ge307XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ2RhdGEgZnVuY3Rpb25zIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0OlxcbicgK1xuICAgICAgJ2h0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL2NvbXBvbmVudHMuaHRtbCNkYXRhLU11c3QtQmUtYS1GdW5jdGlvbicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gcHJveHkgZGF0YSBvbiBpbnN0YW5jZVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgdmFyIG1ldGhvZHMgPSB2bS4kb3B0aW9ucy5tZXRob2RzO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChtZXRob2RzICYmIGhhc093bihtZXRob2RzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBkYXRhIHByb3BlcnR5LlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiVGhlIGRhdGEgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVjbGFyZWQgYXMgYSBwcm9wLiBcIiArXG4gICAgICAgIFwiVXNlIHByb3AgZGVmYXVsdCB2YWx1ZSBpbnN0ZWFkLlwiLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCFpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9kYXRhXCIsIGtleSk7XG4gICAgfVxuICB9XG4gIC8vIG9ic2VydmUgZGF0YVxuICBvYnNlcnZlKGRhdGEsIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG59XG5cbmZ1bmN0aW9uIGdldERhdGEgKGRhdGEsIHZtKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBkYXRhIGdldHRlcnNcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIHJldHVybiBkYXRhLmNhbGwodm0sIHZtKVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwiZGF0YSgpXCIpO1xuICAgIHJldHVybiB7fVxuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbnZhciBjb21wdXRlZFdhdGNoZXJPcHRpb25zID0geyBsYXp5OiB0cnVlIH07XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCAodm0sIGNvbXB1dGVkKSB7XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICB2YXIgd2F0Y2hlcnMgPSB2bS5fY29tcHV0ZWRXYXRjaGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGp1c3QgZ2V0dGVycyBkdXJpbmcgU1NSXG4gIHZhciBpc1NTUiA9IGlzU2VydmVyUmVuZGVyaW5nKCk7XG5cbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgdmFyIHVzZXJEZWYgPSBjb21wdXRlZFtrZXldO1xuICAgIHZhciBnZXR0ZXIgPSB0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJyA/IHVzZXJEZWYgOiB1c2VyRGVmLmdldDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBnZXR0ZXIgPT0gbnVsbCkge1xuICAgICAgd2FybihcbiAgICAgICAgKFwiR2V0dGVyIGlzIG1pc3NpbmcgZm9yIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIi5cIiksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghaXNTU1IpIHtcbiAgICAgIC8vIGNyZWF0ZSBpbnRlcm5hbCB3YXRjaGVyIGZvciB0aGUgY29tcHV0ZWQgcHJvcGVydHkuXG4gICAgICB3YXRjaGVyc1trZXldID0gbmV3IFdhdGNoZXIoXG4gICAgICAgIHZtLFxuICAgICAgICBnZXR0ZXIgfHwgbm9vcCxcbiAgICAgICAgbm9vcCxcbiAgICAgICAgY29tcHV0ZWRXYXRjaGVyT3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBjb21wb25lbnQtZGVmaW5lZCBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBhbHJlYWR5IGRlZmluZWQgb24gdGhlXG4gICAgLy8gY29tcG9uZW50IHByb3RvdHlwZS4gV2Ugb25seSBuZWVkIHRvIGRlZmluZSBjb21wdXRlZCBwcm9wZXJ0aWVzIGRlZmluZWRcbiAgICAvLyBhdCBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgZGVmaW5lQ29tcHV0ZWQodm0sIGtleSwgdXNlckRlZik7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoa2V5IGluIHZtLiRkYXRhKSB7XG4gICAgICAgIHdhcm4oKFwiVGhlIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlZmluZWQgaW4gZGF0YS5cIiksIHZtKTtcbiAgICAgIH0gZWxzZSBpZiAodm0uJG9wdGlvbnMucHJvcHMgJiYga2V5IGluIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgICAgIHdhcm4oKFwiVGhlIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlZmluZWQgYXMgYSBwcm9wLlwiKSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZpbmVDb21wdXRlZCAoXG4gIHRhcmdldCxcbiAga2V5LFxuICB1c2VyRGVmXG4pIHtcbiAgdmFyIHNob3VsZENhY2hlID0gIWlzU2VydmVyUmVuZGVyaW5nKCk7XG4gIGlmICh0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBzaG91bGRDYWNoZVxuICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZik7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IG5vb3A7XG4gIH0gZWxzZSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHVzZXJEZWYuZ2V0XG4gICAgICA/IHNob3VsZENhY2hlICYmIHVzZXJEZWYuY2FjaGUgIT09IGZhbHNlXG4gICAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZi5nZXQpXG4gICAgICA6IG5vb3A7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IHVzZXJEZWYuc2V0IHx8IG5vb3A7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPT09IG5vb3ApIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgKFwiQ29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBhc3NpZ25lZCB0byBidXQgaXQgaGFzIG5vIHNldHRlci5cIiksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGVkR2V0dGVyIChrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICB2YXIgd2F0Y2hlciA9IHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnMgJiYgdGhpcy5fY29tcHV0ZWRXYXRjaGVyc1trZXldO1xuICAgIGlmICh3YXRjaGVyKSB7XG4gICAgICBpZiAod2F0Y2hlci5kaXJ0eSkge1xuICAgICAgICB3YXRjaGVyLmV2YWx1YXRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICB3YXRjaGVyLmRlcGVuZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdhdGNoZXIudmFsdWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlR2V0dGVySW52b2tlcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIHRoaXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdE1ldGhvZHMgKHZtLCBtZXRob2RzKSB7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgdHlwZSBcXFwiXCIgKyAodHlwZW9mIG1ldGhvZHNba2V5XSkgKyBcIlxcXCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgICAgXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKChrZXkgaW4gdm0pICYmIGlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBjb25mbGljdHMgd2l0aCBhbiBleGlzdGluZyBWdWUgaW5zdGFuY2UgbWV0aG9kLiBcIiArXG4gICAgICAgICAgXCJBdm9pZCBkZWZpbmluZyBjb21wb25lbnQgbWV0aG9kcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZtW2tleV0gPSB0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nID8gbm9vcCA6IGJpbmQobWV0aG9kc1trZXldLCB2bSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFdhdGNoICh2bSwgd2F0Y2gpIHtcbiAgZm9yICh2YXIga2V5IGluIHdhdGNoKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBoYW5kbGVyLFxuICBvcHRpb25zXG4pIHtcbiAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICBvcHRpb25zID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gaGFuZGxlci5oYW5kbGVyO1xuICB9XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcbiAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XG4gIH1cbiAgcmV0dXJuIHZtLiR3YXRjaChleHBPckZuLCBoYW5kbGVyLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0XG4gIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxuICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gIHZhciBkYXRhRGVmID0ge307XG4gIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YSB9O1xuICB2YXIgcHJvcHNEZWYgPSB7fTtcbiAgcHJvcHNEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJvcHMgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgICBwcm9wc0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcHJvcHMnLCBwcm9wc0RlZik7XG5cbiAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0O1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbCh2bSwgd2F0Y2hlci52YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnJvciwgdm0sIChcImNhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiB1bndhdGNoRm4gKCkge1xuICAgICAgd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQkMyA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkJDMrKztcblxuICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArICh2bS5fdWlkKTtcbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgIH1cblxuICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG4gICAgdm0uX2lzVnVlID0gdHJ1ZTtcbiAgICAvLyBtZXJnZSBvcHRpb25zXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5faXNDb21wb25lbnQpIHtcbiAgICAgIC8vIG9wdGltaXplIGludGVybmFsIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uXG4gICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlXG4gICAgICAvLyBpbnRlcm5hbCBjb21wb25lbnQgb3B0aW9ucyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudC5cbiAgICAgIGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKHZtLmNvbnN0cnVjdG9yKSxcbiAgICAgICAgb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgICAvLyBleHBvc2UgcmVhbCBzZWxmXG4gICAgdm0uX3NlbGYgPSB2bTtcbiAgICBpbml0TGlmZWN5Y2xlKHZtKTtcbiAgICBpbml0RXZlbnRzKHZtKTtcbiAgICBpbml0UmVuZGVyKHZtKTtcbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZUNyZWF0ZScpO1xuICAgIGluaXRJbmplY3Rpb25zKHZtKTsgLy8gcmVzb2x2ZSBpbmplY3Rpb25zIGJlZm9yZSBkYXRhL3Byb3BzXG4gICAgaW5pdFN0YXRlKHZtKTtcbiAgICBpbml0UHJvdmlkZSh2bSk7IC8vIHJlc29sdmUgcHJvdmlkZSBhZnRlciBkYXRhL3Byb3BzXG4gICAgY2FsbEhvb2sodm0sICdjcmVhdGVkJyk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgdm0uX25hbWUgPSBmb3JtYXRDb21wb25lbnROYW1lKHZtLCBmYWxzZSk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh2bS5fbmFtZSkgKyBcIiBpbml0XCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9XG5cbiAgICBpZiAodm0uJG9wdGlvbnMuZWwpIHtcbiAgICAgIHZtLiRtb3VudCh2bS4kb3B0aW9ucy5lbCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQgKHZtLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuICAvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxuICB2YXIgcGFyZW50Vm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTtcbiAgb3B0cy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgb3B0cy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcblxuICB2YXIgdm5vZGVDb21wb25lbnRPcHRpb25zID0gcGFyZW50Vm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgb3B0cy5wcm9wc0RhdGEgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhO1xuICBvcHRzLl9wYXJlbnRMaXN0ZW5lcnMgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzO1xuICBvcHRzLl9yZW5kZXJDaGlsZHJlbiA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5jaGlsZHJlbjtcbiAgb3B0cy5fY29tcG9uZW50VGFnID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnRhZztcblxuICBpZiAob3B0aW9ucy5yZW5kZXIpIHtcbiAgICBvcHRzLnJlbmRlciA9IG9wdGlvbnMucmVuZGVyO1xuICAgIG9wdHMuc3RhdGljUmVuZGVyRm5zID0gb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyAoQ3Rvcikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgaWYgKEN0b3Iuc3VwZXIpIHtcbiAgICB2YXIgc3VwZXJPcHRpb25zID0gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yLnN1cGVyKTtcbiAgICB2YXIgY2FjaGVkU3VwZXJPcHRpb25zID0gQ3Rvci5zdXBlck9wdGlvbnM7XG4gICAgaWYgKHN1cGVyT3B0aW9ucyAhPT0gY2FjaGVkU3VwZXJPcHRpb25zKSB7XG4gICAgICAvLyBzdXBlciBvcHRpb24gY2hhbmdlZCxcbiAgICAgIC8vIG5lZWQgdG8gcmVzb2x2ZSBuZXcgb3B0aW9ucy5cbiAgICAgIEN0b3Iuc3VwZXJPcHRpb25zID0gc3VwZXJPcHRpb25zO1xuICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGFueSBsYXRlLW1vZGlmaWVkL2F0dGFjaGVkIG9wdGlvbnMgKCM0OTc2KVxuICAgICAgdmFyIG1vZGlmaWVkT3B0aW9ucyA9IHJlc29sdmVNb2RpZmllZE9wdGlvbnMoQ3Rvcik7XG4gICAgICAvLyB1cGRhdGUgYmFzZSBleHRlbmQgb3B0aW9uc1xuICAgICAgaWYgKG1vZGlmaWVkT3B0aW9ucykge1xuICAgICAgICBleHRlbmQoQ3Rvci5leHRlbmRPcHRpb25zLCBtb2RpZmllZE9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhzdXBlck9wdGlvbnMsIEN0b3IuZXh0ZW5kT3B0aW9ucyk7XG4gICAgICBpZiAob3B0aW9ucy5uYW1lKSB7XG4gICAgICAgIG9wdGlvbnMuY29tcG9uZW50c1tvcHRpb25zLm5hbWVdID0gQ3RvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyAoQ3Rvcikge1xuICB2YXIgbW9kaWZpZWQ7XG4gIHZhciBsYXRlc3QgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBzZWFsZWQgPSBDdG9yLnNlYWxlZE9wdGlvbnM7XG4gIGZvciAodmFyIGtleSBpbiBsYXRlc3QpIHtcbiAgICBpZiAobGF0ZXN0W2tleV0gIT09IHNlYWxlZFtrZXldKSB7XG4gICAgICBpZiAoIW1vZGlmaWVkKSB7IG1vZGlmaWVkID0ge307IH1cbiAgICAgIG1vZGlmaWVkW2tleV0gPSBsYXRlc3Rba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkXG59XG5cbmZ1bmN0aW9uIFZ1ZSAob3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICEodGhpcyBpbnN0YW5jZW9mIFZ1ZSlcbiAgKSB7XG4gICAgd2FybignVnVlIGlzIGEgY29uc3RydWN0b3IgYW5kIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYG5ld2Aga2V5d29yZCcpO1xuICB9XG4gIHRoaXMuX2luaXQob3B0aW9ucyk7XG59XG5cbmluaXRNaXhpbihWdWUpO1xuc3RhdGVNaXhpbihWdWUpO1xuZXZlbnRzTWl4aW4oVnVlKTtcbmxpZmVjeWNsZU1peGluKFZ1ZSk7XG5yZW5kZXJNaXhpbihWdWUpO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFVzZSAoVnVlKSB7XG4gIFZ1ZS51c2UgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgdmFyIGluc3RhbGxlZFBsdWdpbnMgPSAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyB8fCAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyA9IFtdKSk7XG4gICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID4gLTEpIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXJzXG4gICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5pbnN0YWxsLmFwcGx5KHBsdWdpbiwgYXJncyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGx1Z2luID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICAgIGluc3RhbGxlZFBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0TWl4aW4kMSAoVnVlKSB7XG4gIFZ1ZS5taXhpbiA9IGZ1bmN0aW9uIChtaXhpbikge1xuICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsIG1peGluKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV4dGVuZCAoVnVlKSB7XG4gIC8qKlxuICAgKiBFYWNoIGluc3RhbmNlIGNvbnN0cnVjdG9yLCBpbmNsdWRpbmcgVnVlLCBoYXMgYSB1bmlxdWVcbiAgICogY2lkLiBUaGlzIGVuYWJsZXMgdXMgdG8gY3JlYXRlIHdyYXBwZWQgXCJjaGlsZFxuICAgKiBjb25zdHJ1Y3RvcnNcIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS5cbiAgICovXG4gIFZ1ZS5jaWQgPSAwO1xuICB2YXIgY2lkID0gMTtcblxuICAvKipcbiAgICogQ2xhc3MgaW5oZXJpdGFuY2VcbiAgICovXG4gIFZ1ZS5leHRlbmQgPSBmdW5jdGlvbiAoZXh0ZW5kT3B0aW9ucykge1xuICAgIGV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zIHx8IHt9O1xuICAgIHZhciBTdXBlciA9IHRoaXM7XG4gICAgdmFyIFN1cGVySWQgPSBTdXBlci5jaWQ7XG4gICAgdmFyIGNhY2hlZEN0b3JzID0gZXh0ZW5kT3B0aW9ucy5fQ3RvciB8fCAoZXh0ZW5kT3B0aW9ucy5fQ3RvciA9IHt9KTtcbiAgICBpZiAoY2FjaGVkQ3RvcnNbU3VwZXJJZF0pIHtcbiAgICAgIHJldHVybiBjYWNoZWRDdG9yc1tTdXBlcklkXVxuICAgIH1cblxuICAgIHZhciBuYW1lID0gZXh0ZW5kT3B0aW9ucy5uYW1lIHx8IFN1cGVyLm9wdGlvbnMubmFtZTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lKSB7XG4gICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgICB9O1xuICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICBTdXBlci5vcHRpb25zLFxuICAgICAgZXh0ZW5kT3B0aW9uc1xuICAgICk7XG4gICAgU3ViWydzdXBlciddID0gU3VwZXI7XG5cbiAgICAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvblxuICAgIC8vIHRoZSBWdWUgaW5zdGFuY2VzIGF0IGV4dGVuc2lvbiB0aW1lLCBvbiB0aGUgZXh0ZW5kZWQgcHJvdG90eXBlLiBUaGlzXG4gICAgLy8gYXZvaWRzIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxscyBmb3IgZWFjaCBpbnN0YW5jZSBjcmVhdGVkLlxuICAgIGlmIChTdWIub3B0aW9ucy5wcm9wcykge1xuICAgICAgaW5pdFByb3BzJDEoU3ViKTtcbiAgICB9XG4gICAgaWYgKFN1Yi5vcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICBpbml0Q29tcHV0ZWQkMShTdWIpO1xuICAgIH1cblxuICAgIC8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gICAgU3ViLm1peGluID0gU3VwZXIubWl4aW47XG4gICAgU3ViLnVzZSA9IFN1cGVyLnVzZTtcblxuICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbiAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG4gICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cblxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHN1cGVyIG9wdGlvbnMgYXQgZXh0ZW5zaW9uIHRpbWUuXG4gICAgLy8gbGF0ZXIgYXQgaW5zdGFudGlhdGlvbiB3ZSBjYW4gY2hlY2sgaWYgU3VwZXIncyBvcHRpb25zIGhhdmVcbiAgICAvLyBiZWVuIHVwZGF0ZWQuXG4gICAgU3ViLnN1cGVyT3B0aW9ucyA9IFN1cGVyLm9wdGlvbnM7XG4gICAgU3ViLmV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zO1xuICAgIFN1Yi5zZWFsZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBTdWIub3B0aW9ucyk7XG5cbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzJDEgKENvbXApIHtcbiAgdmFyIHByb3BzID0gQ29tcC5vcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBwcm94eShDb21wLnByb3RvdHlwZSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQkMSAoQ29tcCkge1xuICB2YXIgY29tcHV0ZWQgPSBDb21wLm9wdGlvbnMuY29tcHV0ZWQ7XG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIGRlZmluZUNvbXB1dGVkKENvbXAucHJvdG90eXBlLCBrZXksIGNvbXB1dGVkW2tleV0pO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkge1xuICAvKipcbiAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuICAgKi9cbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgIGlkLFxuICAgICAgZGVmaW5pdGlvblxuICAgICkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZSA9PT0gJ2NvbXBvbmVudCcpIHtcbiAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoaWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBpc1BsYWluT2JqZWN0KGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbi5uYW1lID0gZGVmaW5pdGlvbi5uYW1lIHx8IGlkO1xuICAgICAgICAgIGRlZmluaXRpb24gPSB0aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKGRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnZGlyZWN0aXZlJyAmJiB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGRlZmluaXRpb24gPSB7IGJpbmQ6IGRlZmluaXRpb24sIHVwZGF0ZTogZGVmaW5pdGlvbiB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF0gPSBkZWZpbml0aW9uO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblxuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUgKG9wdHMpIHtcbiAgcmV0dXJuIG9wdHMgJiYgKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcpXG59XG5cbmZ1bmN0aW9uIG1hdGNoZXMgKHBhdHRlcm4sIG5hbWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKGlzUmVnRXhwKHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4udGVzdChuYW1lKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlIChrZWVwQWxpdmVJbnN0YW5jZSwgZmlsdGVyKSB7XG4gIHZhciBjYWNoZSA9IGtlZXBBbGl2ZUluc3RhbmNlLmNhY2hlO1xuICB2YXIga2V5cyA9IGtlZXBBbGl2ZUluc3RhbmNlLmtleXM7XG4gIHZhciBfdm5vZGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5fdm5vZGU7XG4gIGZvciAodmFyIGtleSBpbiBjYWNoZSkge1xuICAgIHZhciBjYWNoZWROb2RlID0gY2FjaGVba2V5XTtcbiAgICBpZiAoY2FjaGVkTm9kZSkge1xuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNhY2hlZE5vZGUuY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICBpZiAobmFtZSAmJiAhZmlsdGVyKG5hbWUpKSB7XG4gICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5LCBrZXlzLCBfdm5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlRW50cnkgKFxuICBjYWNoZSxcbiAga2V5LFxuICBrZXlzLFxuICBjdXJyZW50XG4pIHtcbiAgdmFyIGNhY2hlZCQkMSA9IGNhY2hlW2tleV07XG4gIGlmIChjYWNoZWQkJDEgJiYgKCFjdXJyZW50IHx8IGNhY2hlZCQkMS50YWcgIT09IGN1cnJlbnQudGFnKSkge1xuICAgIGNhY2hlZCQkMS5jb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICB9XG4gIGNhY2hlW2tleV0gPSBudWxsO1xuICByZW1vdmUoa2V5cywga2V5KTtcbn1cblxudmFyIHBhdHRlcm5UeXBlcyA9IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldO1xuXG52YXIgS2VlcEFsaXZlID0ge1xuICBuYW1lOiAna2VlcC1hbGl2ZScsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHByb3BzOiB7XG4gICAgaW5jbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIGV4Y2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBtYXg6IFtTdHJpbmcsIE51bWJlcl1cbiAgfSxcblxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkICgpIHtcbiAgICB0aGlzLmNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmtleXMgPSBbXTtcbiAgfSxcblxuICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCAoKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuY2FjaGUpIHtcbiAgICAgIHBydW5lQ2FjaGVFbnRyeSh0aGlzLmNhY2hlLCBrZXksIHRoaXMua2V5cyk7XG4gICAgfVxuICB9LFxuXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdGhpcy4kd2F0Y2goJ2luY2x1ZGUnLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBwcnVuZUNhY2hlKHRoaXMkMSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIG1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gICAgdGhpcy4kd2F0Y2goJ2V4Y2x1ZGUnLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBwcnVuZUNhY2hlKHRoaXMkMSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuICFtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyICgpIHtcbiAgICB2YXIgc2xvdCA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgdmFyIHZub2RlID0gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChzbG90KTtcbiAgICB2YXIgY29tcG9uZW50T3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgaWYgKGNvbXBvbmVudE9wdGlvbnMpIHtcbiAgICAgIC8vIGNoZWNrIHBhdHRlcm5cbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnRPcHRpb25zKTtcbiAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgdmFyIGluY2x1ZGUgPSByZWYuaW5jbHVkZTtcbiAgICAgIHZhciBleGNsdWRlID0gcmVmLmV4Y2x1ZGU7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vdCBpbmNsdWRlZFxuICAgICAgICAoaW5jbHVkZSAmJiAoIW5hbWUgfHwgIW1hdGNoZXMoaW5jbHVkZSwgbmFtZSkpKSB8fFxuICAgICAgICAvLyBleGNsdWRlZFxuICAgICAgICAoZXhjbHVkZSAmJiBuYW1lICYmIG1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHZub2RlXG4gICAgICB9XG5cbiAgICAgIHZhciByZWYkMSA9IHRoaXM7XG4gICAgICB2YXIgY2FjaGUgPSByZWYkMS5jYWNoZTtcbiAgICAgIHZhciBrZXlzID0gcmVmJDEua2V5cztcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbFxuICAgICAgICAvLyBzYW1lIGNvbnN0cnVjdG9yIG1heSBnZXQgcmVnaXN0ZXJlZCBhcyBkaWZmZXJlbnQgbG9jYWwgY29tcG9uZW50c1xuICAgICAgICAvLyBzbyBjaWQgYWxvbmUgaXMgbm90IGVub3VnaCAoIzMyNjkpXG4gICAgICAgID8gY29tcG9uZW50T3B0aW9ucy5DdG9yLmNpZCArIChjb21wb25lbnRPcHRpb25zLnRhZyA/IChcIjo6XCIgKyAoY29tcG9uZW50T3B0aW9ucy50YWcpKSA6ICcnKVxuICAgICAgICA6IHZub2RlLmtleTtcbiAgICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY2FjaGVba2V5XS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgICAgLy8gbWFrZSBjdXJyZW50IGtleSBmcmVzaGVzdFxuICAgICAgICByZW1vdmUoa2V5cywga2V5KTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWNoZVtrZXldID0gdm5vZGU7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAvLyBwcnVuZSBvbGRlc3QgZW50cnlcbiAgICAgICAgaWYgKHRoaXMubWF4ICYmIGtleXMubGVuZ3RoID4gcGFyc2VJbnQodGhpcy5tYXgpKSB7XG4gICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXlzWzBdLCBrZXlzLCB0aGlzLl92bm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmUgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGUgfHwgKHNsb3QgJiYgc2xvdFswXSlcbiAgfVxufTtcblxudmFyIGJ1aWx0SW5Db21wb25lbnRzID0ge1xuICBLZWVwQWxpdmU6IEtlZXBBbGl2ZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRHbG9iYWxBUEkgKFZ1ZSkge1xuICAvLyBjb25maWdcbiAgdmFyIGNvbmZpZ0RlZiA9IHt9O1xuICBjb25maWdEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZmlnOyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbmZpZ0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnRG8gbm90IHJlcGxhY2UgdGhlIFZ1ZS5jb25maWcgb2JqZWN0LCBzZXQgaW5kaXZpZHVhbCBmaWVsZHMgaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ2NvbmZpZycsIGNvbmZpZ0RlZik7XG5cbiAgLy8gZXhwb3NlZCB1dGlsIG1ldGhvZHMuXG4gIC8vIE5PVEU6IHRoZXNlIGFyZSBub3QgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJIC0gYXZvaWQgcmVseWluZyBvblxuICAvLyB0aGVtIHVubGVzcyB5b3UgYXJlIGF3YXJlIG9mIHRoZSByaXNrLlxuICBWdWUudXRpbCA9IHtcbiAgICB3YXJuOiB3YXJuLFxuICAgIGV4dGVuZDogZXh0ZW5kLFxuICAgIG1lcmdlT3B0aW9uczogbWVyZ2VPcHRpb25zLFxuICAgIGRlZmluZVJlYWN0aXZlOiBkZWZpbmVSZWFjdGl2ZSQkMVxuICB9O1xuXG4gIFZ1ZS5zZXQgPSBzZXQ7XG4gIFZ1ZS5kZWxldGUgPSBkZWw7XG4gIFZ1ZS5uZXh0VGljayA9IG5leHRUaWNrO1xuXG4gIC8vIDIuNiBleHBsaWNpdCBvYnNlcnZhYmxlIEFQSVxuICBWdWUub2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICBvYnNlcnZlKG9iaik7XG4gICAgcmV0dXJuIG9ialxuICB9O1xuXG4gIFZ1ZS5vcHRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZS5vcHRpb25zW3R5cGUgKyAncyddID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfSk7XG5cbiAgLy8gdGhpcyBpcyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBcImJhc2VcIiBjb25zdHJ1Y3RvciB0byBleHRlbmQgYWxsIHBsYWluLW9iamVjdFxuICAvLyBjb21wb25lbnRzIHdpdGggaW4gV2VleCdzIG11bHRpLWluc3RhbmNlIHNjZW5hcmlvcy5cbiAgVnVlLm9wdGlvbnMuX2Jhc2UgPSBWdWU7XG5cbiAgZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIGJ1aWx0SW5Db21wb25lbnRzKTtcblxuICBpbml0VXNlKFZ1ZSk7XG4gIGluaXRNaXhpbiQxKFZ1ZSk7XG4gIGluaXRFeHRlbmQoVnVlKTtcbiAgaW5pdEFzc2V0UmVnaXN0ZXJzKFZ1ZSk7XG59XG5cbmluaXRHbG9iYWxBUEkoVnVlKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckaXNTZXJ2ZXInLCB7XG4gIGdldDogaXNTZXJ2ZXJSZW5kZXJpbmdcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRzc3JDb250ZXh0Jywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gdGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dFxuICB9XG59KTtcblxuLy8gZXhwb3NlIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IGZvciBzc3IgcnVudGltZSBoZWxwZXIgaW5zdGFsbGF0aW9uXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnRnVuY3Rpb25hbFJlbmRlckNvbnRleHQnLCB7XG4gIHZhbHVlOiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dFxufSk7XG5cblZ1ZS52ZXJzaW9uID0gJzIuNi4xMic7XG5cbi8qICAqL1xuXG4vLyB0aGVzZSBhcmUgcmVzZXJ2ZWQgZm9yIHdlYiBiZWNhdXNlIHRoZXkgYXJlIGRpcmVjdGx5IGNvbXBpbGVkIGF3YXlcbi8vIGR1cmluZyB0ZW1wbGF0ZSBjb21waWxhdGlvblxudmFyIGlzUmVzZXJ2ZWRBdHRyID0gbWFrZU1hcCgnc3R5bGUsY2xhc3MnKTtcblxuLy8gYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSB1c2luZyBwcm9wcyBmb3IgYmluZGluZ1xudmFyIGFjY2VwdFZhbHVlID0gbWFrZU1hcCgnaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCxwcm9ncmVzcycpO1xudmFyIG11c3RVc2VQcm9wID0gZnVuY3Rpb24gKHRhZywgdHlwZSwgYXR0cikge1xuICByZXR1cm4gKFxuICAgIChhdHRyID09PSAndmFsdWUnICYmIGFjY2VwdFZhbHVlKHRhZykpICYmIHR5cGUgIT09ICdidXR0b24nIHx8XG4gICAgKGF0dHIgPT09ICdzZWxlY3RlZCcgJiYgdGFnID09PSAnb3B0aW9uJykgfHxcbiAgICAoYXR0ciA9PT0gJ2NoZWNrZWQnICYmIHRhZyA9PT0gJ2lucHV0JykgfHxcbiAgICAoYXR0ciA9PT0gJ211dGVkJyAmJiB0YWcgPT09ICd2aWRlbycpXG4gIClcbn07XG5cbnZhciBpc0VudW1lcmF0ZWRBdHRyID0gbWFrZU1hcCgnY29udGVudGVkaXRhYmxlLGRyYWdnYWJsZSxzcGVsbGNoZWNrJyk7XG5cbnZhciBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUgPSBtYWtlTWFwKCdldmVudHMsY2FyZXQsdHlwaW5nLHBsYWludGV4dC1vbmx5Jyk7XG5cbnZhciBjb252ZXJ0RW51bWVyYXRlZFZhbHVlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpIHx8IHZhbHVlID09PSAnZmFsc2UnXG4gICAgPyAnZmFsc2UnXG4gICAgLy8gYWxsb3cgYXJiaXRyYXJ5IHN0cmluZyB2YWx1ZSBmb3IgY29udGVudGVkaXRhYmxlXG4gICAgOiBrZXkgPT09ICdjb250ZW50ZWRpdGFibGUnICYmIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSh2YWx1ZSlcbiAgICAgID8gdmFsdWVcbiAgICAgIDogJ3RydWUnXG59O1xuXG52YXIgaXNCb29sZWFuQXR0ciA9IG1ha2VNYXAoXG4gICdhbGxvd2Z1bGxzY3JlZW4sYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNoZWNrZWQsY29tcGFjdCxjb250cm9scyxkZWNsYXJlLCcgK1xuICAnZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLCcgK1xuICAnZW5hYmxlZCxmb3Jtbm92YWxpZGF0ZSxoaWRkZW4saW5kZXRlcm1pbmF0ZSxpbmVydCxpc21hcCxpdGVtc2NvcGUsbG9vcCxtdWx0aXBsZSwnICtcbiAgJ211dGVkLG5vaHJlZixub3Jlc2l6ZSxub3NoYWRlLG5vdmFsaWRhdGUsbm93cmFwLG9wZW4scGF1c2VvbmV4aXQscmVhZG9ubHksJyArXG4gICdyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLCcgK1xuICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSdcbik7XG5cbnZhciB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuXG52YXIgaXNYbGluayA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBuYW1lLmNoYXJBdCg1KSA9PT0gJzonICYmIG5hbWUuc2xpY2UoMCwgNSkgPT09ICd4bGluaydcbn07XG5cbnZhciBnZXRYbGlua1Byb3AgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gaXNYbGluayhuYW1lKSA/IG5hbWUuc2xpY2UoNiwgbmFtZS5sZW5ndGgpIDogJydcbn07XG5cbnZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGwgfHwgdmFsID09PSBmYWxzZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUgKHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICB3aGlsZSAoaXNEZWYoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGlzRGVmKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShkYXRhLCBwYXJlbnROb2RlLmRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyQ2xhc3MoZGF0YS5zdGF0aWNDbGFzcywgZGF0YS5jbGFzcylcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0aWNDbGFzczogY29uY2F0KGNoaWxkLnN0YXRpY0NsYXNzLCBwYXJlbnQuc3RhdGljQ2xhc3MpLFxuICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcylcbiAgICAgID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdXG4gICAgICA6IHBhcmVudC5jbGFzc1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNsYXNzIChcbiAgc3RhdGljQ2xhc3MsXG4gIGR5bmFtaWNDbGFzc1xuKSB7XG4gIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xuICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICByZXR1cm4gYSA/IGIgPyAoYSArICcgJyArIGIpIDogYSA6IChiIHx8ICcnKVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeUFycmF5KHZhbHVlKVxuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5T2JqZWN0KHZhbHVlKVxuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFycmF5ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBzdHJpbmdpZmllZDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoaXNEZWYoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpICYmIHN0cmluZ2lmaWVkICE9PSAnJykge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0gc3RyaW5naWZpZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBuYW1lc3BhY2VNYXAgPSB7XG4gIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXG59O1xuXG52YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLCcgK1xuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgK1xuICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXG4gICdhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnksJyArXG4gICdzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnICtcbiAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xuICAnY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsJyArXG4gICdidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcgK1xuICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSwnICtcbiAgJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnXG4pO1xuXG4vLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcbi8vIGNvbnRhaW4gY2hpbGQgZWxlbWVudHMuXG52YXIgaXNTVkcgPSBtYWtlTWFwKFxuICAnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLCcgK1xuICAnZm9yZWlnbk9iamVjdCxnLGdseXBoLGltYWdlLGxpbmUsbWFya2VyLG1hc2ssbWlzc2luZy1nbHlwaCxwYXRoLHBhdHRlcm4sJyArXG4gICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgdHJ1ZVxuKTtcblxudmFyIGlzUHJlVGFnID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gdGFnID09PSAncHJlJzsgfTtcblxudmFyIGlzUmVzZXJ2ZWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHJldHVybiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWRyh0YWcpXG59O1xuXG5mdW5jdGlvbiBnZXRUYWdOYW1lc3BhY2UgKHRhZykge1xuICBpZiAoaXNTVkcodGFnKSkge1xuICAgIHJldHVybiAnc3ZnJ1xuICB9XG4gIC8vIGJhc2ljIHN1cHBvcnQgZm9yIE1hdGhNTFxuICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG4gIGlmICh0YWcgPT09ICdtYXRoJykge1xuICAgIHJldHVybiAnbWF0aCdcbiAgfVxufVxuXG52YXIgdW5rbm93bkVsZW1lbnRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHtcbiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddXG4gIH1cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAodGFnLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gKFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnQgfHxcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcbiAgICApKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcbiAgfVxufVxuXG52YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuLyogICovXG5cbi8qKlxuICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5IChlbCkge1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ0Nhbm5vdCBmaW5kIGVsZW1lbnQ6ICcgKyBlbFxuICAgICAgKTtcbiAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0ZWRcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZWxcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCQxICh0YWdOYW1lLCB2bm9kZSkge1xuICB2YXIgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgaWYgKHRhZ05hbWUgIT09ICdzZWxlY3QnKSB7XG4gICAgcmV0dXJuIGVsbVxuICB9XG4gIC8vIGZhbHNlIG9yIG51bGwgd2lsbCByZW1vdmUgdGhlIGF0dHJpYnV0ZSBidXQgdW5kZWZpbmVkIHdpbGwgbm90XG4gIGlmICh2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEuYXR0cnMgJiYgdm5vZGUuZGF0YS5hdHRycy5tdWx0aXBsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZWxtLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcbiAgfVxuICByZXR1cm4gZWxtXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyAobmFtZXNwYWNlLCB0YWdOYW1lKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlTWFwW25hbWVzcGFjZV0sIHRhZ05hbWUpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tZW50ICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRleHQpXG59XG5cbmZ1bmN0aW9uIGluc2VydEJlZm9yZSAocGFyZW50Tm9kZSwgbmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCByZWZlcmVuY2VOb2RlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5hcHBlbmRDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIHBhcmVudE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZVxufVxuXG5mdW5jdGlvbiBuZXh0U2libGluZyAobm9kZSkge1xuICByZXR1cm4gbm9kZS5uZXh0U2libGluZ1xufVxuXG5mdW5jdGlvbiB0YWdOYW1lIChub2RlKSB7XG4gIHJldHVybiBub2RlLnRhZ05hbWVcbn1cblxuZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQgKG5vZGUsIHRleHQpIHtcbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlU2NvcGUgKG5vZGUsIHNjb3BlSWQpIHtcbiAgbm9kZS5zZXRBdHRyaWJ1dGUoc2NvcGVJZCwgJycpO1xufVxuXG52YXIgbm9kZU9wcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCQxLFxuICBjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcbiAgY3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuICBjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuICBpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcbiAgcmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuICBhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG4gIHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG4gIG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcbiAgdGFnTmFtZTogdGFnTmFtZSxcbiAgc2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuICBzZXRTdHlsZVNjb3BlOiBzZXRTdHlsZVNjb3BlXG59KTtcblxuLyogICovXG5cbnZhciByZWYgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlIChfLCB2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiByZWdpc3RlclJlZiAodm5vZGUsIGlzUmVtb3ZhbCkge1xuICB2YXIga2V5ID0gdm5vZGUuZGF0YS5yZWY7XG4gIGlmICghaXNEZWYoa2V5KSkgeyByZXR1cm4gfVxuXG4gIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7XG4gIHZhciByZWYgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5lbG07XG4gIHZhciByZWZzID0gdm0uJHJlZnM7XG4gIGlmIChpc1JlbW92YWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICByZW1vdmUocmVmc1trZXldLCByZWYpO1xuICAgIH0gZWxzZSBpZiAocmVmc1trZXldID09PSByZWYpIHtcbiAgICAgIHJlZnNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZub2RlLmRhdGEucmVmSW5Gb3IpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICAgIHJlZnNba2V5XSA9IFtyZWZdO1xuICAgICAgfSBlbHNlIGlmIChyZWZzW2tleV0uaW5kZXhPZihyZWYpIDwgMCkge1xuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgcmVmc1trZXldLnB1c2gocmVmKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVmc1trZXldID0gcmVmO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFZpcnR1YWwgRE9NIHBhdGNoaW5nIGFsZ29yaXRobSBiYXNlZCBvbiBTbmFiYmRvbSBieVxuICogU2ltb24gRnJpaXMgVmluZHVtIChAcGFsZGVwaW5kKVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGFsZGVwaW5kL3NuYWJiZG9tL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBtb2RpZmllZCBieSBFdmFuIFlvdSAoQHl5eDk5MDgwMylcbiAqXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGJlY2F1c2UgdGhpcyBmaWxlIGlzIHBlcmYtY3JpdGljYWwgYW5kIHRoZSBjb3N0XG4gKiBvZiBtYWtpbmcgZmxvdyB1bmRlcnN0YW5kIGl0IGlzIG5vdCB3b3J0aCBpdC5cbiAqL1xuXG52YXIgZW1wdHlOb2RlID0gbmV3IFZOb2RlKCcnLCB7fSwgW10pO1xuXG52YXIgaG9va3MgPSBbJ2NyZWF0ZScsICdhY3RpdmF0ZScsICd1cGRhdGUnLCAncmVtb3ZlJywgJ2Rlc3Ryb3knXTtcblxuZnVuY3Rpb24gc2FtZVZub2RlIChhLCBiKSB7XG4gIHJldHVybiAoXG4gICAgYS5rZXkgPT09IGIua2V5ICYmIChcbiAgICAgIChcbiAgICAgICAgYS50YWcgPT09IGIudGFnICYmXG4gICAgICAgIGEuaXNDb21tZW50ID09PSBiLmlzQ29tbWVudCAmJlxuICAgICAgICBpc0RlZihhLmRhdGEpID09PSBpc0RlZihiLmRhdGEpICYmXG4gICAgICAgIHNhbWVJbnB1dFR5cGUoYSwgYilcbiAgICAgICkgfHwgKFxuICAgICAgICBpc1RydWUoYS5pc0FzeW5jUGxhY2Vob2xkZXIpICYmXG4gICAgICAgIGEuYXN5bmNGYWN0b3J5ID09PSBiLmFzeW5jRmFjdG9yeSAmJlxuICAgICAgICBpc1VuZGVmKGIuYXN5bmNGYWN0b3J5LmVycm9yKVxuICAgICAgKVxuICAgIClcbiAgKVxufVxuXG5mdW5jdGlvbiBzYW1lSW5wdXRUeXBlIChhLCBiKSB7XG4gIGlmIChhLnRhZyAhPT0gJ2lucHV0JykgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpO1xuICB2YXIgdHlwZUEgPSBpc0RlZihpID0gYS5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICB2YXIgdHlwZUIgPSBpc0RlZihpID0gYi5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICByZXR1cm4gdHlwZUEgPT09IHR5cGVCIHx8IGlzVGV4dElucHV0VHlwZSh0eXBlQSkgJiYgaXNUZXh0SW5wdXRUeXBlKHR5cGVCKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXlUb09sZElkeCAoY2hpbGRyZW4sIGJlZ2luSWR4LCBlbmRJZHgpIHtcbiAgdmFyIGksIGtleTtcbiAgdmFyIG1hcCA9IHt9O1xuICBmb3IgKGkgPSBiZWdpbklkeDsgaSA8PSBlbmRJZHg7ICsraSkge1xuICAgIGtleSA9IGNoaWxkcmVuW2ldLmtleTtcbiAgICBpZiAoaXNEZWYoa2V5KSkgeyBtYXBba2V5XSA9IGk7IH1cbiAgfVxuICByZXR1cm4gbWFwXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdGNoRnVuY3Rpb24gKGJhY2tlbmQpIHtcbiAgdmFyIGksIGo7XG4gIHZhciBjYnMgPSB7fTtcblxuICB2YXIgbW9kdWxlcyA9IGJhY2tlbmQubW9kdWxlcztcbiAgdmFyIG5vZGVPcHMgPSBiYWNrZW5kLm5vZGVPcHM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgKytpKSB7XG4gICAgY2JzW2hvb2tzW2ldXSA9IFtdO1xuICAgIGZvciAoaiA9IDA7IGogPCBtb2R1bGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICBpZiAoaXNEZWYobW9kdWxlc1tqXVtob29rc1tpXV0pKSB7XG4gICAgICAgIGNic1tob29rc1tpXV0ucHVzaChtb2R1bGVzW2pdW2hvb2tzW2ldXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1wdHlOb2RlQXQgKGVsbSkge1xuICAgIHJldHVybiBuZXcgVk5vZGUobm9kZU9wcy50YWdOYW1lKGVsbSkudG9Mb3dlckNhc2UoKSwge30sIFtdLCB1bmRlZmluZWQsIGVsbSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJtQ2IgKGNoaWxkRWxtLCBsaXN0ZW5lcnMpIHtcbiAgICBmdW5jdGlvbiByZW1vdmUkJDEgKCkge1xuICAgICAgaWYgKC0tcmVtb3ZlJCQxLmxpc3RlbmVycyA9PT0gMCkge1xuICAgICAgICByZW1vdmVOb2RlKGNoaWxkRWxtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlJCQxLmxpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgICByZXR1cm4gcmVtb3ZlJCQxXG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVOb2RlIChlbCkge1xuICAgIHZhciBwYXJlbnQgPSBub2RlT3BzLnBhcmVudE5vZGUoZWwpO1xuICAgIC8vIGVsZW1lbnQgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIHJlbW92ZWQgZHVlIHRvIHYtaHRtbCAvIHYtdGV4dFxuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBub2RlT3BzLnJlbW92ZUNoaWxkKHBhcmVudCwgZWwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQkJDEgKHZub2RlLCBpblZQcmUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgIWluVlByZSAmJlxuICAgICAgIXZub2RlLm5zICYmXG4gICAgICAhKFxuICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLmxlbmd0aCAmJlxuICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLnNvbWUoZnVuY3Rpb24gKGlnbm9yZSkge1xuICAgICAgICAgIHJldHVybiBpc1JlZ0V4cChpZ25vcmUpXG4gICAgICAgICAgICA/IGlnbm9yZS50ZXN0KHZub2RlLnRhZylcbiAgICAgICAgICAgIDogaWdub3JlID09PSB2bm9kZS50YWdcbiAgICAgICAgfSlcbiAgICAgICkgJiZcbiAgICAgIGNvbmZpZy5pc1Vua25vd25FbGVtZW50KHZub2RlLnRhZylcbiAgICApXG4gIH1cblxuICB2YXIgY3JlYXRpbmdFbG1JblZQcmUgPSAwO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsbSAoXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIHBhcmVudEVsbSxcbiAgICByZWZFbG0sXG4gICAgbmVzdGVkLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXhcbiAgKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLmVsbSkgJiYgaXNEZWYob3duZXJBcnJheSkpIHtcbiAgICAgIC8vIFRoaXMgdm5vZGUgd2FzIHVzZWQgaW4gYSBwcmV2aW91cyByZW5kZXIhXG4gICAgICAvLyBub3cgaXQncyB1c2VkIGFzIGEgbmV3IG5vZGUsIG92ZXJ3cml0aW5nIGl0cyBlbG0gd291bGQgY2F1c2VcbiAgICAgIC8vIHBvdGVudGlhbCBwYXRjaCBlcnJvcnMgZG93biB0aGUgcm9hZCB3aGVuIGl0J3MgdXNlZCBhcyBhbiBpbnNlcnRpb25cbiAgICAgIC8vIHJlZmVyZW5jZSBub2RlLiBJbnN0ZWFkLCB3ZSBjbG9uZSB0aGUgbm9kZSBvbi1kZW1hbmQgYmVmb3JlIGNyZWF0aW5nXG4gICAgICAvLyBhc3NvY2lhdGVkIERPTSBlbGVtZW50IGZvciBpdC5cbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2bm9kZS5pc1Jvb3RJbnNlcnQgPSAhbmVzdGVkOyAvLyBmb3IgdHJhbnNpdGlvbiBlbnRlciBjaGVja1xuICAgIGlmIChjcmVhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgICBjcmVhdGluZ0VsbUluVlByZSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBjcmVhdGluZ0VsbUluVlByZSkpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICsgdGFnICsgJz4gLSBkaWQgeW91ICcgK1xuICAgICAgICAgICAgJ3JlZ2lzdGVyIHRoZSBjb21wb25lbnQgY29ycmVjdGx5PyBGb3IgcmVjdXJzaXZlIGNvbXBvbmVudHMsICcgK1xuICAgICAgICAgICAgJ21ha2Ugc3VyZSB0byBwcm92aWRlIHRoZSBcIm5hbWVcIiBvcHRpb24uJyxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXG4gICAgICAgID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZylcbiAgICAgICAgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICBjcmVhdGluZ0VsbUluVlByZS0tO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkpIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlQ29tbWVudCh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGkgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgdmFyIGlzUmVhY3RpdmF0ZWQgPSBpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaS5rZWVwQWxpdmU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGkuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHtcbiAgICAgICAgaSh2bm9kZSwgZmFsc2UgLyogaHlkcmF0aW5nICovKTtcbiAgICAgIH1cbiAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG4gICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcbiAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLlxuICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cbiAgICAgIGlmIChpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgICBpZiAoaXNUcnVlKGlzUmVhY3RpdmF0ZWQpKSB7XG4gICAgICAgICAgcmVhY3RpdmF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0Q29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLmRhdGEucGVuZGluZ0luc2VydCkpIHtcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoLmFwcGx5KGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KTtcbiAgICAgIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCA9IG51bGw7XG4gICAgfVxuICAgIHZub2RlLmVsbSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRlbDtcbiAgICBpZiAoaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZW1wdHkgY29tcG9uZW50IHJvb3QuXG4gICAgICAvLyBza2lwIGFsbCBlbGVtZW50LXJlbGF0ZWQgbW9kdWxlcyBleGNlcHQgZm9yIHJlZiAoIzM0NTUpXG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgICAvLyBtYWtlIHN1cmUgdG8gaW52b2tlIHRoZSBpbnNlcnQgaG9va1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWN0aXZhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGk7XG4gICAgLy8gaGFjayBmb3IgIzQzMzk6IGEgcmVhY3RpdmF0ZWQgY29tcG9uZW50IHdpdGggaW5uZXIgdHJhbnNpdGlvblxuICAgIC8vIGRvZXMgbm90IHRyaWdnZXIgYmVjYXVzZSB0aGUgaW5uZXIgbm9kZSdzIGNyZWF0ZWQgaG9va3MgYXJlIG5vdCBjYWxsZWRcbiAgICAvLyBhZ2Fpbi4gSXQncyBub3QgaWRlYWwgdG8gaW52b2x2ZSBtb2R1bGUtc3BlY2lmaWMgbG9naWMgaW4gaGVyZSBidXRcbiAgICAvLyB0aGVyZSBkb2Vzbid0IHNlZW0gdG8gYmUgYSBiZXR0ZXIgd2F5IHRvIGRvIGl0LlxuICAgIHZhciBpbm5lck5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBpbm5lck5vZGUgPSBpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpbm5lck5vZGUuZGF0YSkgJiYgaXNEZWYoaSA9IGkudHJhbnNpdGlvbikpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5hY3RpdmF0ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGNicy5hY3RpdmF0ZVtpXShlbXB0eU5vZGUsIGlubmVyTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2goaW5uZXJOb2RlKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdW5saWtlIGEgbmV3bHkgY3JlYXRlZCBjb21wb25lbnQsXG4gICAgLy8gYSByZWFjdGl2YXRlZCBrZWVwLWFsaXZlIGNvbXBvbmVudCBkb2Vzbid0IGluc2VydCBpdHNlbGZcbiAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnQgKHBhcmVudCwgZWxtLCByZWYkJDEpIHtcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgaWYgKGlzRGVmKHJlZiQkMSkpIHtcbiAgICAgICAgaWYgKG5vZGVPcHMucGFyZW50Tm9kZShyZWYkJDEpID09PSBwYXJlbnQpIHtcbiAgICAgICAgICBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnQsIGVsbSwgcmVmJCQxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZChwYXJlbnQsIGVsbSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRyZW4gKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2hpbGRyZW4pO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjcmVhdGVFbG0oY2hpbGRyZW5baV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZWxtLCBudWxsLCB0cnVlLCBjaGlsZHJlbiwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZSh2bm9kZS50ZXh0KSkge1xuICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZCh2bm9kZS5lbG0sIG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKHZub2RlLnRleHQpKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNQYXRjaGFibGUgKHZub2RlKSB7XG4gICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmKHZub2RlLnRhZylcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIGkgPSB2bm9kZS5kYXRhLmhvb2s7IC8vIFJldXNlIHZhcmlhYmxlXG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICBpZiAoaXNEZWYoaS5jcmVhdGUpKSB7IGkuY3JlYXRlKGVtcHR5Tm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaS5pbnNlcnQpKSB7IGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBzY29wZSBpZCBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBDU1MuXG4gIC8vIHRoaXMgaXMgaW1wbGVtZW50ZWQgYXMgYSBzcGVjaWFsIGNhc2UgdG8gYXZvaWQgdGhlIG92ZXJoZWFkXG4gIC8vIG9mIGdvaW5nIHRocm91Z2ggdGhlIG5vcm1hbCBhdHRyaWJ1dGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAgZnVuY3Rpb24gc2V0U2NvcGUgKHZub2RlKSB7XG4gICAgdmFyIGk7XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5mblNjb3BlSWQpKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGU7XG4gICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgaWYgKGlzRGVmKGkgPSBhbmNlc3Rvci5jb250ZXh0KSAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcbiAgICAgICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICAgICAgfVxuICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZm9yIHNsb3QgY29udGVudCB0aGV5IHNob3VsZCBhbHNvIGdldCB0aGUgc2NvcGVJZCBmcm9tIHRoZSBob3N0IGluc3RhbmNlLlxuICAgIGlmIChpc0RlZihpID0gYWN0aXZlSW5zdGFuY2UpICYmXG4gICAgICBpICE9PSB2bm9kZS5jb250ZXh0ICYmXG4gICAgICBpICE9PSB2bm9kZS5mbkNvbnRleHQgJiZcbiAgICAgIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKVxuICAgICkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkVm5vZGVzIChwYXJlbnRFbG0sIHJlZkVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICBjcmVhdGVFbG0odm5vZGVzW3N0YXJ0SWR4XSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSwgZmFsc2UsIHZub2Rlcywgc3RhcnRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZURlc3Ryb3lIb29rICh2bm9kZSkge1xuICAgIHZhciBpLCBqO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSkgeyBpKHZub2RlKTsgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7IGNicy5kZXN0cm95W2ldKHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNoaWxkcmVuKSkge1xuICAgICAgZm9yIChqID0gMDsgaiA8IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGludm9rZURlc3Ryb3lIb29rKHZub2RlLmNoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVWbm9kZXMgKHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgICBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihjaC50YWcpKSB7XG4gICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICB9IGVsc2UgeyAvLyBUZXh0IG5vZGVcbiAgICAgICAgICByZW1vdmVOb2RlKGNoLmVsbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rICh2bm9kZSwgcm0pIHtcbiAgICBpZiAoaXNEZWYocm0pIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XG4gICAgICBpZiAoaXNEZWYocm0pKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xuICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbGlzdGVuZXJzIGNvdW50XG4gICAgICAgIHJtLmxpc3RlbmVycyArPSBsaXN0ZW5lcnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkaXJlY3RseSByZW1vdmluZ1xuICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpO1xuICAgICAgfVxuICAgICAgLy8gcmVjdXJzaXZlbHkgaW52b2tlIGhvb2tzIG9uIGNoaWxkIGNvbXBvbmVudCByb290IG5vZGVcbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGlzRGVmKGkgPSBpLl92bm9kZSkgJiYgaXNEZWYoaS5kYXRhKSkge1xuICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucmVtb3ZlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5yZW1vdmUpKSB7XG4gICAgICAgIGkodm5vZGUsIHJtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJtKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZU5vZGUodm5vZGUuZWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbiAocGFyZW50RWxtLCBvbGRDaCwgbmV3Q2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG4gICAgdmFyIG5ld1N0YXJ0SWR4ID0gMDtcbiAgICB2YXIgb2xkRW5kSWR4ID0gb2xkQ2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07XG4gICAgdmFyIG5ld0VuZElkeCA9IG5ld0NoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdO1xuICAgIHZhciBvbGRLZXlUb0lkeCwgaWR4SW5PbGQsIHZub2RlVG9Nb3ZlLCByZWZFbG07XG5cbiAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zXG4gICAgLy8gZHVyaW5nIGxlYXZpbmcgdHJhbnNpdGlvbnNcbiAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhuZXdDaCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdFxuICAgICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZEVuZFZub2RlKSkge1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCByaWdodFxuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdFbmRJZHgpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRW5kVm5vZGUuZWxtKSk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgbGVmdFxuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRFbmRWbm9kZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1VuZGVmKG9sZEtleVRvSWR4KSkgeyBvbGRLZXlUb0lkeCA9IGNyZWF0ZUtleVRvT2xkSWR4KG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTsgfVxuICAgICAgICBpZHhJbk9sZCA9IGlzRGVmKG5ld1N0YXJ0Vm5vZGUua2V5KVxuICAgICAgICAgID8gb2xkS2V5VG9JZHhbbmV3U3RhcnRWbm9kZS5rZXldXG4gICAgICAgICAgOiBmaW5kSWR4SW5PbGQobmV3U3RhcnRWbm9kZSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgICAgICBpZiAoaXNVbmRlZihpZHhJbk9sZCkpIHsgLy8gTmV3IGVsZW1lbnRcbiAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2bm9kZVRvTW92ZSA9IG9sZENoW2lkeEluT2xkXTtcbiAgICAgICAgICBpZiAoc2FtZVZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICAgICAgcGF0Y2hWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIHZub2RlVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob2xkU3RhcnRJZHggPiBvbGRFbmRJZHgpIHtcbiAgICAgIHJlZkVsbSA9IGlzVW5kZWYobmV3Q2hbbmV3RW5kSWR4ICsgMV0pID8gbnVsbCA6IG5ld0NoW25ld0VuZElkeCArIDFdLmVsbTtcbiAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIGlmIChuZXdTdGFydElkeCA+IG5ld0VuZElkeCkge1xuICAgICAgcmVtb3ZlVm5vZGVzKG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZUtleXMgKGNoaWxkcmVuKSB7XG4gICAgdmFyIHNlZW5LZXlzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZub2RlID0gY2hpbGRyZW5baV07XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5O1xuICAgICAgaWYgKGlzRGVmKGtleSkpIHtcbiAgICAgICAgaWYgKHNlZW5LZXlzW2tleV0pIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgKFwiRHVwbGljYXRlIGtleXMgZGV0ZWN0ZWQ6ICdcIiArIGtleSArIFwiJy4gVGhpcyBtYXkgY2F1c2UgYW4gdXBkYXRlIGVycm9yLlwiKSxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZW5LZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZElkeEluT2xkIChub2RlLCBvbGRDaCwgc3RhcnQsIGVuZCkge1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG9sZENoW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIHNhbWVWbm9kZShub2RlLCBjKSkgeyByZXR1cm4gaSB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF0Y2hWbm9kZSAoXG4gICAgb2xkVm5vZGUsXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXgsXG4gICAgcmVtb3ZlT25seVxuICApIHtcbiAgICBpZiAob2xkVm5vZGUgPT09IHZub2RlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gY2xvbmUgcmV1c2VkIHZub2RlXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTtcblxuICAgIGlmIChpc1RydWUob2xkVm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyKSkge1xuICAgICAgaWYgKGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgaHlkcmF0ZShvbGRWbm9kZS5lbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHJldXNlIGVsZW1lbnQgZm9yIHN0YXRpYyB0cmVlcy5cbiAgICAvLyBub3RlIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIC1cbiAgICAvLyBpZiB0aGUgbmV3IG5vZGUgaXMgbm90IGNsb25lZCBpdCBtZWFucyB0aGUgcmVuZGVyIGZ1bmN0aW9ucyBoYXZlIGJlZW5cbiAgICAvLyByZXNldCBieSB0aGUgaG90LXJlbG9hZC1hcGkgYW5kIHdlIG5lZWQgdG8gZG8gYSBwcm9wZXIgcmUtcmVuZGVyLlxuICAgIGlmIChpc1RydWUodm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICBpc1RydWUob2xkVm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICB2bm9kZS5rZXkgPT09IG9sZFZub2RlLmtleSAmJlxuICAgICAgKGlzVHJ1ZSh2bm9kZS5pc0Nsb25lZCkgfHwgaXNUcnVlKHZub2RlLmlzT25jZSkpXG4gICAgKSB7XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHtcbiAgICAgIGkob2xkVm5vZGUsIHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgb2xkQ2ggPSBvbGRWbm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgY2ggPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnVwZGF0ZS5sZW5ndGg7ICsraSkgeyBjYnMudXBkYXRlW2ldKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS51cGRhdGUpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNVbmRlZih2bm9kZS50ZXh0KSkge1xuICAgICAgaWYgKGlzRGVmKG9sZENoKSAmJiBpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKG9sZENoICE9PSBjaCkgeyB1cGRhdGVDaGlsZHJlbihlbG0sIG9sZENoLCBjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTsgfVxuICAgICAgfSBlbHNlIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2gpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKG9sZENoLCAwLCBvbGRDaC5sZW5ndGggLSAxKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHtcbiAgICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9sZFZub2RlLnRleHQgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCB2bm9kZS50ZXh0KTtcbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucG9zdHBhdGNoKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VJbnNlcnRIb29rICh2bm9kZSwgcXVldWUsIGluaXRpYWwpIHtcbiAgICAvLyBkZWxheSBpbnNlcnQgaG9va3MgZm9yIGNvbXBvbmVudCByb290IG5vZGVzLCBpbnZva2UgdGhlbSBhZnRlciB0aGVcbiAgICAvLyBlbGVtZW50IGlzIHJlYWxseSBpbnNlcnRlZFxuICAgIGlmIChpc1RydWUoaW5pdGlhbCkgJiYgaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgdm5vZGUucGFyZW50LmRhdGEucGVuZGluZ0luc2VydCA9IHF1ZXVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHF1ZXVlW2ldLmRhdGEuaG9vay5pbnNlcnQocXVldWVbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBoeWRyYXRpb25CYWlsZWQgPSBmYWxzZTtcbiAgLy8gbGlzdCBvZiBtb2R1bGVzIHRoYXQgY2FuIHNraXAgY3JlYXRlIGhvb2sgZHVyaW5nIGh5ZHJhdGlvbiBiZWNhdXNlIHRoZXlcbiAgLy8gYXJlIGFscmVhZHkgcmVuZGVyZWQgb24gdGhlIGNsaWVudCBvciBoYXMgbm8gbmVlZCBmb3IgaW5pdGlhbGl6YXRpb25cbiAgLy8gTm90ZTogc3R5bGUgaXMgZXhjbHVkZWQgYmVjYXVzZSBpdCByZWxpZXMgb24gaW5pdGlhbCBjbG9uZSBmb3IgZnV0dXJlXG4gIC8vIGRlZXAgdXBkYXRlcyAoIzcwNjMpLlxuICB2YXIgaXNSZW5kZXJlZE1vZHVsZSA9IG1ha2VNYXAoJ2F0dHJzLGNsYXNzLHN0YXRpY0NsYXNzLHN0YXRpY1N0eWxlLGtleScpO1xuXG4gIC8vIE5vdGU6IHRoaXMgaXMgYSBicm93c2VyLW9ubHkgZnVuY3Rpb24gc28gd2UgY2FuIGFzc3VtZSBlbG1zIGFyZSBET00gbm9kZXMuXG4gIGZ1bmN0aW9uIGh5ZHJhdGUgKGVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaW5WUHJlID0gaW5WUHJlIHx8IChkYXRhICYmIGRhdGEucHJlKTtcbiAgICB2bm9kZS5lbG0gPSBlbG07XG5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkgJiYgaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5KSkge1xuICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIC8vIGFzc2VydCBub2RlIG1hdGNoXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghYXNzZXJ0Tm9kZU1hdGNoKGVsbSwgdm5vZGUsIGluVlByZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7IGkodm5vZGUsIHRydWUgLyogaHlkcmF0aW5nICovKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgLy8gY2hpbGQgY29tcG9uZW50LiBpdCBzaG91bGQgaGF2ZSBoeWRyYXRlZCBpdHMgb3duIHRyZWUuXG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAoaXNEZWYoY2hpbGRyZW4pKSB7XG4gICAgICAgIC8vIGVtcHR5IGVsZW1lbnQsIGFsbG93IGNsaWVudCB0byBwaWNrIHVwIGFuZCBwb3B1bGF0ZSBjaGlsZHJlblxuICAgICAgICBpZiAoIWVsbS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdi1odG1sIGFuZCBkb21Qcm9wczogaW5uZXJIVE1MXG4gICAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhKSAmJiBpc0RlZihpID0gaS5kb21Qcm9wcykgJiYgaXNEZWYoaSA9IGkuaW5uZXJIVE1MKSkge1xuICAgICAgICAgICAgaWYgKGkgIT09IGVsbS5pbm5lckhUTUwpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignc2VydmVyIGlubmVySFRNTDogJywgaSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdjbGllbnQgaW5uZXJIVE1MOiAnLCBlbG0uaW5uZXJIVE1MKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaXRlcmF0ZSBhbmQgY29tcGFyZSBjaGlsZHJlbiBsaXN0c1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgdmFyIGNoaWxkTm9kZSA9IGVsbS5maXJzdENoaWxkO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgICAgICBpZiAoIWNoaWxkTm9kZSB8fCAhaHlkcmF0ZShjaGlsZE5vZGUsIGNoaWxkcmVuW2kkMV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIGNoaWxkTm9kZSBpcyBub3QgbnVsbCwgaXQgbWVhbnMgdGhlIGFjdHVhbCBjaGlsZE5vZGVzIGxpc3QgaXNcbiAgICAgICAgICAgIC8vIGxvbmdlciB0aGFuIHRoZSB2aXJ0dWFsIGNoaWxkcmVuIGxpc3QuXG4gICAgICAgICAgICBpZiAoIWNoaWxkcmVuTWF0Y2ggfHwgY2hpbGROb2RlKSB7XG4gICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ01pc21hdGNoaW5nIGNoaWxkTm9kZXMgdnMuIFZOb2RlczogJywgZWxtLmNoaWxkTm9kZXMsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICB2YXIgZnVsbEludm9rZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgIGlmICghaXNSZW5kZXJlZE1vZHVsZShrZXkpKSB7XG4gICAgICAgICAgICBmdWxsSW52b2tlID0gdHJ1ZTtcbiAgICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmdWxsSW52b2tlICYmIGRhdGFbJ2NsYXNzJ10pIHtcbiAgICAgICAgICAvLyBlbnN1cmUgY29sbGVjdGluZyBkZXBzIGZvciBkZWVwIGNsYXNzIGJpbmRpbmdzIGZvciBmdXR1cmUgdXBkYXRlc1xuICAgICAgICAgIHRyYXZlcnNlKGRhdGFbJ2NsYXNzJ10pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbG0uZGF0YSAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgZWxtLmRhdGEgPSB2bm9kZS50ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0Tm9kZU1hdGNoIChub2RlLCB2bm9kZSwgaW5WUHJlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLnRhZykpIHtcbiAgICAgIHJldHVybiB2bm9kZS50YWcuaW5kZXhPZigndnVlLWNvbXBvbmVudCcpID09PSAwIHx8IChcbiAgICAgICAgIWlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGluVlByZSkgJiZcbiAgICAgICAgdm5vZGUudGFnLnRvTG93ZXJDYXNlKCkgPT09IChub2RlLnRhZ05hbWUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAodm5vZGUuaXNDb21tZW50ID8gOCA6IDMpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoIChvbGRWbm9kZSwgdm5vZGUsIGh5ZHJhdGluZywgcmVtb3ZlT25seSkge1xuICAgIGlmIChpc1VuZGVmKHZub2RlKSkge1xuICAgICAgaWYgKGlzRGVmKG9sZFZub2RlKSkgeyBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7IH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpc0luaXRpYWxQYXRjaCA9IGZhbHNlO1xuICAgIHZhciBpbnNlcnRlZFZub2RlUXVldWUgPSBbXTtcblxuICAgIGlmIChpc1VuZGVmKG9sZFZub2RlKSkge1xuICAgICAgLy8gZW1wdHkgbW91bnQgKGxpa2VseSBhcyBjb21wb25lbnQpLCBjcmVhdGUgbmV3IHJvb3QgZWxlbWVudFxuICAgICAgaXNJbml0aWFsUGF0Y2ggPSB0cnVlO1xuICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaXNSZWFsRWxlbWVudCA9IGlzRGVmKG9sZFZub2RlLm5vZGVUeXBlKTtcbiAgICAgIGlmICghaXNSZWFsRWxlbWVudCAmJiBzYW1lVm5vZGUob2xkVm5vZGUsIHZub2RlKSkge1xuICAgICAgICAvLyBwYXRjaCBleGlzdGluZyByb290IG5vZGVcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbnVsbCwgbnVsbCwgcmVtb3ZlT25seSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNSZWFsRWxlbWVudCkge1xuICAgICAgICAgIC8vIG1vdW50aW5nIHRvIGEgcmVhbCBlbGVtZW50XG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBzZXJ2ZXItcmVuZGVyZWQgY29udGVudCBhbmQgaWYgd2UgY2FuIHBlcmZvcm1cbiAgICAgICAgICAvLyBhIHN1Y2Nlc3NmdWwgaHlkcmF0aW9uLlxuICAgICAgICAgIGlmIChvbGRWbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBvbGRWbm9kZS5oYXNBdHRyaWJ1dGUoU1NSX0FUVFIpKSB7XG4gICAgICAgICAgICBvbGRWbm9kZS5yZW1vdmVBdHRyaWJ1dGUoU1NSX0FUVFIpO1xuICAgICAgICAgICAgaHlkcmF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzVHJ1ZShoeWRyYXRpbmcpKSB7XG4gICAgICAgICAgICBpZiAoaHlkcmF0ZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkpIHtcbiAgICAgICAgICAgICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG9sZFZub2RlXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAnVGhlIGNsaWVudC1zaWRlIHJlbmRlcmVkIHZpcnR1YWwgRE9NIHRyZWUgaXMgbm90IG1hdGNoaW5nICcgK1xuICAgICAgICAgICAgICAgICdzZXJ2ZXItcmVuZGVyZWQgY29udGVudC4gVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGluY29ycmVjdCAnICtcbiAgICAgICAgICAgICAgICAnSFRNTCBtYXJrdXAsIGZvciBleGFtcGxlIG5lc3RpbmcgYmxvY2stbGV2ZWwgZWxlbWVudHMgaW5zaWRlICcgK1xuICAgICAgICAgICAgICAgICc8cD4sIG9yIG1pc3NpbmcgPHRib2R5Pi4gQmFpbGluZyBoeWRyYXRpb24gYW5kIHBlcmZvcm1pbmcgJyArXG4gICAgICAgICAgICAgICAgJ2Z1bGwgY2xpZW50LXNpZGUgcmVuZGVyLidcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuXG4gICAgICAgICAgLy8gY3JlYXRlIGFuIGVtcHR5IG5vZGUgYW5kIHJlcGxhY2UgaXRcbiAgICAgICAgICBvbGRWbm9kZSA9IGVtcHR5Tm9kZUF0KG9sZFZub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlcGxhY2luZyBleGlzdGluZyBlbGVtZW50XG4gICAgICAgIHZhciBvbGRFbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgICAgIHZhciBwYXJlbnRFbG0gPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IG5vZGVcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSxcbiAgICAgICAgICBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVsbSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyB1cGRhdGUgcGFyZW50IHBsYWNlaG9sZGVyIG5vZGUgZWxlbWVudCwgcmVjdXJzaXZlbHlcbiAgICAgICAgaWYgKGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZS5wYXJlbnQ7XG4gICAgICAgICAgdmFyIHBhdGNoYWJsZSA9IGlzUGF0Y2hhYmxlKHZub2RlKTtcbiAgICAgICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgY2JzLmRlc3Ryb3lbaV0oYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IuZWxtID0gdm5vZGUuZWxtO1xuICAgICAgICAgICAgaWYgKHBhdGNoYWJsZSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgICAgICAgICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCBhbmNlc3Rvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gIzY1MTNcbiAgICAgICAgICAgICAgLy8gaW52b2tlIGluc2VydCBob29rcyB0aGF0IG1heSBoYXZlIGJlZW4gbWVyZ2VkIGJ5IGNyZWF0ZSBob29rcy5cbiAgICAgICAgICAgICAgLy8gZS5nLiBmb3IgZGlyZWN0aXZlcyB0aGF0IHVzZXMgdGhlIFwiaW5zZXJ0ZWRcIiBob29rLlxuICAgICAgICAgICAgICB2YXIgaW5zZXJ0ID0gYW5jZXN0b3IuZGF0YS5ob29rLmluc2VydDtcbiAgICAgICAgICAgICAgaWYgKGluc2VydC5tZXJnZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBzdGFydCBhdCBpbmRleCAxIHRvIGF2b2lkIHJlLWludm9raW5nIGNvbXBvbmVudCBtb3VudGVkIGhvb2tcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpJDIgPSAxOyBpJDIgPCBpbnNlcnQuZm5zLmxlbmd0aDsgaSQyKyspIHtcbiAgICAgICAgICAgICAgICAgIGluc2VydC5mbnNbaSQyXSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVnaXN0ZXJSZWYoYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVzdHJveSBvbGQgbm9kZVxuICAgICAgICBpZiAoaXNEZWYocGFyZW50RWxtKSkge1xuICAgICAgICAgIHJlbW92ZVZub2Rlcyhbb2xkVm5vZGVdLCAwLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50YWcpKSB7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpc0luaXRpYWxQYXRjaCk7XG4gICAgcmV0dXJuIHZub2RlLmVsbVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGlyZWN0aXZlcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICB1cGRhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXMgKHZub2RlKSB7XG4gICAgdXBkYXRlRGlyZWN0aXZlcyh2bm9kZSwgZW1wdHlOb2RlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlRGlyZWN0aXZlcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMgfHwgdm5vZGUuZGF0YS5kaXJlY3RpdmVzKSB7XG4gICAgX3VwZGF0ZShvbGRWbm9kZSwgdm5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgaXNDcmVhdGUgPSBvbGRWbm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgaXNEZXN0cm95ID0gdm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTtcbiAgdmFyIG5ld0RpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEodm5vZGUuZGF0YS5kaXJlY3RpdmVzLCB2bm9kZS5jb250ZXh0KTtcblxuICB2YXIgZGlyc1dpdGhJbnNlcnQgPSBbXTtcbiAgdmFyIGRpcnNXaXRoUG9zdHBhdGNoID0gW107XG5cbiAgdmFyIGtleSwgb2xkRGlyLCBkaXI7XG4gIGZvciAoa2V5IGluIG5ld0RpcnMpIHtcbiAgICBvbGREaXIgPSBvbGREaXJzW2tleV07XG4gICAgZGlyID0gbmV3RGlyc1trZXldO1xuICAgIGlmICghb2xkRGlyKSB7XG4gICAgICAvLyBuZXcgZGlyZWN0aXZlLCBiaW5kXG4gICAgICBjYWxsSG9vayQxKGRpciwgJ2JpbmQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5pbnNlcnRlZCkge1xuICAgICAgICBkaXJzV2l0aEluc2VydC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIGRpcmVjdGl2ZSwgdXBkYXRlXG4gICAgICBkaXIub2xkVmFsdWUgPSBvbGREaXIudmFsdWU7XG4gICAgICBkaXIub2xkQXJnID0gb2xkRGlyLmFyZztcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAndXBkYXRlJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuY29tcG9uZW50VXBkYXRlZCkge1xuICAgICAgICBkaXJzV2l0aFBvc3RwYXRjaC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aCkge1xuICAgIHZhciBjYWxsSW5zZXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aEluc2VydC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGlzQ3JlYXRlKSB7XG4gICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGNhbGxJbnNlcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsSW5zZXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkge1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIWlzQ3JlYXRlKSB7XG4gICAgZm9yIChrZXkgaW4gb2xkRGlycykge1xuICAgICAgaWYgKCFuZXdEaXJzW2tleV0pIHtcbiAgICAgICAgLy8gbm8gbG9uZ2VyIHByZXNlbnQsIHVuYmluZFxuICAgICAgICBjYWxsSG9vayQxKG9sZERpcnNba2V5XSwgJ3VuYmluZCcsIG9sZFZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGVtcHR5TW9kaWZpZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyQxIChcbiAgZGlycyxcbiAgdm1cbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKCFkaXJzKSB7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcmV0dXJuIHJlc1xuICB9XG4gIHZhciBpLCBkaXI7XG4gIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGlyID0gZGlyc1tpXTtcbiAgICBpZiAoIWRpci5tb2RpZmllcnMpIHtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZGlyLm1vZGlmaWVycyA9IGVtcHR5TW9kaWZpZXJzO1xuICAgIH1cbiAgICByZXNbZ2V0UmF3RGlyTmFtZShkaXIpXSA9IGRpcjtcbiAgICBkaXIuZGVmID0gcmVzb2x2ZUFzc2V0KHZtLiRvcHRpb25zLCAnZGlyZWN0aXZlcycsIGRpci5uYW1lLCB0cnVlKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnZXRSYXdEaXJOYW1lIChkaXIpIHtcbiAgcmV0dXJuIGRpci5yYXdOYW1lIHx8ICgoZGlyLm5hbWUpICsgXCIuXCIgKyAoT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVycyB8fCB7fSkuam9pbignLicpKSlcbn1cblxuZnVuY3Rpb24gY2FsbEhvb2skMSAoZGlyLCBob29rLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuICB2YXIgZm4gPSBkaXIuZGVmICYmIGRpci5kZWZbaG9va107XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBmbih2bm9kZS5lbG0sIGRpciwgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZub2RlLmNvbnRleHQsIChcImRpcmVjdGl2ZSBcIiArIChkaXIubmFtZSkgKyBcIiBcIiArIGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGJhc2VNb2R1bGVzID0gW1xuICByZWYsXG4gIGRpcmVjdGl2ZXNcbl07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVBdHRycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBvcHRzID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGlzRGVmKG9wdHMpICYmIG9wdHMuQ3Rvci5vcHRpb25zLmluaGVyaXRBdHRycyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmF0dHJzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuYXR0cnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyLCBvbGQ7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRBdHRycyA9IG9sZFZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIHZhciBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYoYXR0cnMuX19vYl9fKSkge1xuICAgIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYXR0cnMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICBjdXIgPSBhdHRyc1trZXldO1xuICAgIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgaWYgKG9sZCAhPT0gY3VyKSB7XG4gICAgICBzZXRBdHRyKGVsbSwga2V5LCBjdXIpO1xuICAgIH1cbiAgfVxuICAvLyAjNDM5MTogaW4gSUU5LCBzZXR0aW5nIHR5cGUgY2FuIHJlc2V0IHZhbHVlIGZvciBpbnB1dFt0eXBlPXJhZGlvXVxuICAvLyAjNjY2NjogSUUvRWRnZSBmb3JjZXMgcHJvZ3Jlc3MgdmFsdWUgZG93biB0byAxIGJlZm9yZSBzZXR0aW5nIGEgbWF4XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoKGlzSUUgfHwgaXNFZGdlKSAmJiBhdHRycy52YWx1ZSAhPT0gb2xkQXR0cnMudmFsdWUpIHtcbiAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpO1xuICB9XG4gIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgaWYgKGlzVW5kZWYoYXR0cnNba2V5XSkpIHtcbiAgICAgIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChlbC50YWdOYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgIC8vIHNldCBhdHRyaWJ1dGUgZm9yIGJsYW5rIHZhbHVlXG4gICAgLy8gZS5nLiA8b3B0aW9uIGRpc2FibGVkPlNlbGVjdCBvbmU8L29wdGlvbj5cbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0ZWNobmljYWxseSBhbGxvd2Z1bGxzY3JlZW4gaXMgYSBib29sZWFuIGF0dHJpYnV0ZSBmb3IgPGlmcmFtZT4sXG4gICAgICAvLyBidXQgRmxhc2ggZXhwZWN0cyBhIHZhbHVlIG9mIFwidHJ1ZVwiIHdoZW4gdXNlZCBvbiA8ZW1iZWQ+IHRhZ1xuICAgICAgdmFsdWUgPSBrZXkgPT09ICdhbGxvd2Z1bGxzY3JlZW4nICYmIGVsLnRhZ05hbWUgPT09ICdFTUJFRCdcbiAgICAgICAgPyAndHJ1ZSdcbiAgICAgICAgOiBrZXk7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUoa2V5LCB2YWx1ZSkpO1xuICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2VTZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyAjNzEzODogSUUxMCAmIDExIGZpcmVzIGlucHV0IGV2ZW50IHdoZW4gc2V0dGluZyBwbGFjZWhvbGRlciBvblxuICAgIC8vIDx0ZXh0YXJlYT4uLi4gYmxvY2sgdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFuZCByZW1vdmUgdGhlIGJsb2NrZXJcbiAgICAvLyBpbW1lZGlhdGVseS5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoXG4gICAgICBpc0lFICYmICFpc0lFOSAmJlxuICAgICAgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJlxuICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmIHZhbHVlICE9PSAnJyAmJiAhZWwuX19pZXBoXG4gICAgKSB7XG4gICAgICB2YXIgYmxvY2tlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICB9O1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZWwuX19pZXBoID0gdHJ1ZTsgLyogSUUgcGxhY2Vob2xkZXIgcGF0Y2hlZCAqL1xuICAgIH1cbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxudmFyIGF0dHJzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUF0dHJzLFxuICB1cGRhdGU6IHVwZGF0ZUF0dHJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQ2xhc3MgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuICBpZiAoXG4gICAgaXNVbmRlZihkYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgIGlzVW5kZWYoZGF0YS5jbGFzcykgJiYgKFxuICAgICAgaXNVbmRlZihvbGREYXRhKSB8fCAoXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLmNsYXNzKVxuICAgICAgKVxuICAgIClcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XG5cbiAgLy8gaGFuZGxlIHRyYW5zaXRpb24gY2xhc3Nlc1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzO1xuICBpZiAoaXNEZWYodHJhbnNpdGlvbkNsYXNzKSkge1xuICAgIGNscyA9IGNvbmNhdChjbHMsIHN0cmluZ2lmeUNsYXNzKHRyYW5zaXRpb25DbGFzcykpO1xuICB9XG5cbiAgLy8gc2V0IHRoZSBjbGFzc1xuICBpZiAoY2xzICE9PSBlbC5fcHJldkNsYXNzKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNscyk7XG4gICAgZWwuX3ByZXZDbGFzcyA9IGNscztcbiAgfVxufVxuXG52YXIga2xhc3MgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQ2xhc3MsXG4gIHVwZGF0ZTogdXBkYXRlQ2xhc3Ncbn07XG5cbi8qICAqL1xuXG52YXIgdmFsaWREaXZpc2lvbkNoYXJSRSA9IC9bXFx3KS4rXFwtXyRcXF1dLztcblxuZnVuY3Rpb24gcGFyc2VGaWx0ZXJzIChleHApIHtcbiAgdmFyIGluU2luZ2xlID0gZmFsc2U7XG4gIHZhciBpbkRvdWJsZSA9IGZhbHNlO1xuICB2YXIgaW5UZW1wbGF0ZVN0cmluZyA9IGZhbHNlO1xuICB2YXIgaW5SZWdleCA9IGZhbHNlO1xuICB2YXIgY3VybHkgPSAwO1xuICB2YXIgc3F1YXJlID0gMDtcbiAgdmFyIHBhcmVuID0gMDtcbiAgdmFyIGxhc3RGaWx0ZXJJbmRleCA9IDA7XG4gIHZhciBjLCBwcmV2LCBpLCBleHByZXNzaW9uLCBmaWx0ZXJzO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBleHAubGVuZ3RoOyBpKyspIHtcbiAgICBwcmV2ID0gYztcbiAgICBjID0gZXhwLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGluU2luZ2xlKSB7XG4gICAgICBpZiAoYyA9PT0gMHgyNyAmJiBwcmV2ICE9PSAweDVDKSB7IGluU2luZ2xlID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKGluRG91YmxlKSB7XG4gICAgICBpZiAoYyA9PT0gMHgyMiAmJiBwcmV2ICE9PSAweDVDKSB7IGluRG91YmxlID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKGluVGVtcGxhdGVTdHJpbmcpIHtcbiAgICAgIGlmIChjID09PSAweDYwICYmIHByZXYgIT09IDB4NUMpIHsgaW5UZW1wbGF0ZVN0cmluZyA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChpblJlZ2V4KSB7XG4gICAgICBpZiAoYyA9PT0gMHgyZiAmJiBwcmV2ICE9PSAweDVDKSB7IGluUmVnZXggPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBjID09PSAweDdDICYmIC8vIHBpcGVcbiAgICAgIGV4cC5jaGFyQ29kZUF0KGkgKyAxKSAhPT0gMHg3QyAmJlxuICAgICAgZXhwLmNoYXJDb2RlQXQoaSAtIDEpICE9PSAweDdDICYmXG4gICAgICAhY3VybHkgJiYgIXNxdWFyZSAmJiAhcGFyZW5cbiAgICApIHtcbiAgICAgIGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gZmlyc3QgZmlsdGVyLCBlbmQgb2YgZXhwcmVzc2lvblxuICAgICAgICBsYXN0RmlsdGVySW5kZXggPSBpICsgMTtcbiAgICAgICAgZXhwcmVzc2lvbiA9IGV4cC5zbGljZSgwLCBpKS50cmltKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoRmlsdGVyKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICBjYXNlIDB4MjI6IGluRG91YmxlID0gdHJ1ZTsgYnJlYWsgICAgICAgICAvLyBcIlxuICAgICAgICBjYXNlIDB4Mjc6IGluU2luZ2xlID0gdHJ1ZTsgYnJlYWsgICAgICAgICAvLyAnXG4gICAgICAgIGNhc2UgMHg2MDogaW5UZW1wbGF0ZVN0cmluZyA9IHRydWU7IGJyZWFrIC8vIGBcbiAgICAgICAgY2FzZSAweDI4OiBwYXJlbisrOyBicmVhayAgICAgICAgICAgICAgICAgLy8gKFxuICAgICAgICBjYXNlIDB4Mjk6IHBhcmVuLS07IGJyZWFrICAgICAgICAgICAgICAgICAvLyApXG4gICAgICAgIGNhc2UgMHg1Qjogc3F1YXJlKys7IGJyZWFrICAgICAgICAgICAgICAgIC8vIFtcbiAgICAgICAgY2FzZSAweDVEOiBzcXVhcmUtLTsgYnJlYWsgICAgICAgICAgICAgICAgLy8gXVxuICAgICAgICBjYXNlIDB4N0I6IGN1cmx5Kys7IGJyZWFrICAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgIGNhc2UgMHg3RDogY3VybHktLTsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgIH1cbiAgICAgIGlmIChjID09PSAweDJmKSB7IC8vIC9cbiAgICAgICAgdmFyIGogPSBpIC0gMTtcbiAgICAgICAgdmFyIHAgPSAodm9pZCAwKTtcbiAgICAgICAgLy8gZmluZCBmaXJzdCBub24td2hpdGVzcGFjZSBwcmV2IGNoYXJcbiAgICAgICAgZm9yICg7IGogPj0gMDsgai0tKSB7XG4gICAgICAgICAgcCA9IGV4cC5jaGFyQXQoaik7XG4gICAgICAgICAgaWYgKHAgIT09ICcgJykgeyBicmVhayB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwIHx8ICF2YWxpZERpdmlzaW9uQ2hhclJFLnRlc3QocCkpIHtcbiAgICAgICAgICBpblJlZ2V4ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICBleHByZXNzaW9uID0gZXhwLnNsaWNlKDAsIGkpLnRyaW0oKTtcbiAgfSBlbHNlIGlmIChsYXN0RmlsdGVySW5kZXggIT09IDApIHtcbiAgICBwdXNoRmlsdGVyKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoRmlsdGVyICgpIHtcbiAgICAoZmlsdGVycyB8fCAoZmlsdGVycyA9IFtdKSkucHVzaChleHAuc2xpY2UobGFzdEZpbHRlckluZGV4LCBpKS50cmltKCkpO1xuICAgIGxhc3RGaWx0ZXJJbmRleCA9IGkgKyAxO1xuICB9XG5cbiAgaWYgKGZpbHRlcnMpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgZmlsdGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgZXhwcmVzc2lvbiA9IHdyYXBGaWx0ZXIoZXhwcmVzc2lvbiwgZmlsdGVyc1tpXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV4cHJlc3Npb25cbn1cblxuZnVuY3Rpb24gd3JhcEZpbHRlciAoZXhwLCBmaWx0ZXIpIHtcbiAgdmFyIGkgPSBmaWx0ZXIuaW5kZXhPZignKCcpO1xuICBpZiAoaSA8IDApIHtcbiAgICAvLyBfZjogcmVzb2x2ZUZpbHRlclxuICAgIHJldHVybiAoXCJfZihcXFwiXCIgKyBmaWx0ZXIgKyBcIlxcXCIpKFwiICsgZXhwICsgXCIpXCIpXG4gIH0gZWxzZSB7XG4gICAgdmFyIG5hbWUgPSBmaWx0ZXIuc2xpY2UoMCwgaSk7XG4gICAgdmFyIGFyZ3MgPSBmaWx0ZXIuc2xpY2UoaSArIDEpO1xuICAgIHJldHVybiAoXCJfZihcXFwiXCIgKyBuYW1lICsgXCJcXFwiKShcIiArIGV4cCArIChhcmdzICE9PSAnKScgPyAnLCcgKyBhcmdzIDogYXJncykpXG4gIH1cbn1cblxuLyogICovXG5cblxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuZnVuY3Rpb24gYmFzZVdhcm4gKG1zZywgcmFuZ2UpIHtcbiAgY29uc29sZS5lcnJvcigoXCJbVnVlIGNvbXBpbGVyXTogXCIgKyBtc2cpKTtcbn1cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuZnVuY3Rpb24gcGx1Y2tNb2R1bGVGdW5jdGlvbiAoXG4gIG1vZHVsZXMsXG4gIGtleVxuKSB7XG4gIHJldHVybiBtb2R1bGVzXG4gICAgPyBtb2R1bGVzLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gbVtrZXldOyB9KS5maWx0ZXIoZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH0pXG4gICAgOiBbXVxufVxuXG5mdW5jdGlvbiBhZGRQcm9wIChlbCwgbmFtZSwgdmFsdWUsIHJhbmdlLCBkeW5hbWljKSB7XG4gIChlbC5wcm9wcyB8fCAoZWwucHJvcHMgPSBbXSkpLnB1c2gocmFuZ2VTZXRJdGVtKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlLCBkeW5hbWljOiBkeW5hbWljIH0sIHJhbmdlKSk7XG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHIgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UsIGR5bmFtaWMpIHtcbiAgdmFyIGF0dHJzID0gZHluYW1pY1xuICAgID8gKGVsLmR5bmFtaWNBdHRycyB8fCAoZWwuZHluYW1pY0F0dHJzID0gW10pKVxuICAgIDogKGVsLmF0dHJzIHx8IChlbC5hdHRycyA9IFtdKSk7XG4gIGF0dHJzLnB1c2gocmFuZ2VTZXRJdGVtKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlLCBkeW5hbWljOiBkeW5hbWljIH0sIHJhbmdlKSk7XG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbi8vIGFkZCBhIHJhdyBhdHRyICh1c2UgdGhpcyBpbiBwcmVUcmFuc2Zvcm1zKVxuZnVuY3Rpb24gYWRkUmF3QXR0ciAoZWwsIG5hbWUsIHZhbHVlLCByYW5nZSkge1xuICBlbC5hdHRyc01hcFtuYW1lXSA9IHZhbHVlO1xuICBlbC5hdHRyc0xpc3QucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUgfSwgcmFuZ2UpKTtcbn1cblxuZnVuY3Rpb24gYWRkRGlyZWN0aXZlIChcbiAgZWwsXG4gIG5hbWUsXG4gIHJhd05hbWUsXG4gIHZhbHVlLFxuICBhcmcsXG4gIGlzRHluYW1pY0FyZyxcbiAgbW9kaWZpZXJzLFxuICByYW5nZVxuKSB7XG4gIChlbC5kaXJlY3RpdmVzIHx8IChlbC5kaXJlY3RpdmVzID0gW10pKS5wdXNoKHJhbmdlU2V0SXRlbSh7XG4gICAgbmFtZTogbmFtZSxcbiAgICByYXdOYW1lOiByYXdOYW1lLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBhcmc6IGFyZyxcbiAgICBpc0R5bmFtaWNBcmc6IGlzRHluYW1pY0FyZyxcbiAgICBtb2RpZmllcnM6IG1vZGlmaWVyc1xuICB9LCByYW5nZSkpO1xuICBlbC5wbGFpbiA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBwcmVwZW5kTW9kaWZpZXJNYXJrZXIgKHN5bWJvbCwgbmFtZSwgZHluYW1pYykge1xuICByZXR1cm4gZHluYW1pY1xuICAgID8gKFwiX3AoXCIgKyBuYW1lICsgXCIsXFxcIlwiICsgc3ltYm9sICsgXCJcXFwiKVwiKVxuICAgIDogc3ltYm9sICsgbmFtZSAvLyBtYXJrIHRoZSBldmVudCBhcyBjYXB0dXJlZFxufVxuXG5mdW5jdGlvbiBhZGRIYW5kbGVyIChcbiAgZWwsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICBtb2RpZmllcnMsXG4gIGltcG9ydGFudCxcbiAgd2FybixcbiAgcmFuZ2UsXG4gIGR5bmFtaWNcbikge1xuICBtb2RpZmllcnMgPSBtb2RpZmllcnMgfHwgZW1wdHlPYmplY3Q7XG4gIC8vIHdhcm4gcHJldmVudCBhbmQgcGFzc2l2ZSBtb2RpZmllclxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybiAmJlxuICAgIG1vZGlmaWVycy5wcmV2ZW50ICYmIG1vZGlmaWVycy5wYXNzaXZlXG4gICkge1xuICAgIHdhcm4oXG4gICAgICAncGFzc2l2ZSBhbmQgcHJldmVudCBjYW5cXCd0IGJlIHVzZWQgdG9nZXRoZXIuICcgK1xuICAgICAgJ1Bhc3NpdmUgaGFuZGxlciBjYW5cXCd0IHByZXZlbnQgZGVmYXVsdCBldmVudC4nLFxuICAgICAgcmFuZ2VcbiAgICApO1xuICB9XG5cbiAgLy8gbm9ybWFsaXplIGNsaWNrLnJpZ2h0IGFuZCBjbGljay5taWRkbGUgc2luY2UgdGhleSBkb24ndCBhY3R1YWxseSBmaXJlXG4gIC8vIHRoaXMgaXMgdGVjaG5pY2FsbHkgYnJvd3Nlci1zcGVjaWZpYywgYnV0IGF0IGxlYXN0IGZvciBub3cgYnJvd3NlcnMgYXJlXG4gIC8vIHRoZSBvbmx5IHRhcmdldCBlbnZzIHRoYXQgaGF2ZSByaWdodC9taWRkbGUgY2xpY2tzLlxuICBpZiAobW9kaWZpZXJzLnJpZ2h0KSB7XG4gICAgaWYgKGR5bmFtaWMpIHtcbiAgICAgIG5hbWUgPSBcIihcIiArIG5hbWUgKyBcIik9PT0nY2xpY2snPydjb250ZXh0bWVudSc6KFwiICsgbmFtZSArIFwiKVwiO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ2NsaWNrJykge1xuICAgICAgbmFtZSA9ICdjb250ZXh0bWVudSc7XG4gICAgICBkZWxldGUgbW9kaWZpZXJzLnJpZ2h0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChtb2RpZmllcnMubWlkZGxlKSB7XG4gICAgaWYgKGR5bmFtaWMpIHtcbiAgICAgIG5hbWUgPSBcIihcIiArIG5hbWUgKyBcIik9PT0nY2xpY2snPydtb3VzZXVwJzooXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnY2xpY2snKSB7XG4gICAgICBuYW1lID0gJ21vdXNldXAnO1xuICAgIH1cbiAgfVxuXG4gIC8vIGNoZWNrIGNhcHR1cmUgbW9kaWZpZXJcbiAgaWYgKG1vZGlmaWVycy5jYXB0dXJlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5jYXB0dXJlO1xuICAgIG5hbWUgPSBwcmVwZW5kTW9kaWZpZXJNYXJrZXIoJyEnLCBuYW1lLCBkeW5hbWljKTtcbiAgfVxuICBpZiAobW9kaWZpZXJzLm9uY2UpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLm9uY2U7XG4gICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignficsIG5hbWUsIGR5bmFtaWMpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAobW9kaWZpZXJzLnBhc3NpdmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLnBhc3NpdmU7XG4gICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignJicsIG5hbWUsIGR5bmFtaWMpO1xuICB9XG5cbiAgdmFyIGV2ZW50cztcbiAgaWYgKG1vZGlmaWVycy5uYXRpdmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLm5hdGl2ZTtcbiAgICBldmVudHMgPSBlbC5uYXRpdmVFdmVudHMgfHwgKGVsLm5hdGl2ZUV2ZW50cyA9IHt9KTtcbiAgfSBlbHNlIHtcbiAgICBldmVudHMgPSBlbC5ldmVudHMgfHwgKGVsLmV2ZW50cyA9IHt9KTtcbiAgfVxuXG4gIHZhciBuZXdIYW5kbGVyID0gcmFuZ2VTZXRJdGVtKHsgdmFsdWU6IHZhbHVlLnRyaW0oKSwgZHluYW1pYzogZHluYW1pYyB9LCByYW5nZSk7XG4gIGlmIChtb2RpZmllcnMgIT09IGVtcHR5T2JqZWN0KSB7XG4gICAgbmV3SGFuZGxlci5tb2RpZmllcnMgPSBtb2RpZmllcnM7XG4gIH1cblxuICB2YXIgaGFuZGxlcnMgPSBldmVudHNbbmFtZV07XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVycykpIHtcbiAgICBpbXBvcnRhbnQgPyBoYW5kbGVycy51bnNoaWZ0KG5ld0hhbmRsZXIpIDogaGFuZGxlcnMucHVzaChuZXdIYW5kbGVyKTtcbiAgfSBlbHNlIGlmIChoYW5kbGVycykge1xuICAgIGV2ZW50c1tuYW1lXSA9IGltcG9ydGFudCA/IFtuZXdIYW5kbGVyLCBoYW5kbGVyc10gOiBbaGFuZGxlcnMsIG5ld0hhbmRsZXJdO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50c1tuYW1lXSA9IG5ld0hhbmRsZXI7XG4gIH1cblxuICBlbC5wbGFpbiA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRSYXdCaW5kaW5nQXR0ciAoXG4gIGVsLFxuICBuYW1lXG4pIHtcbiAgcmV0dXJuIGVsLnJhd0F0dHJzTWFwWyc6JyArIG5hbWVdIHx8XG4gICAgZWwucmF3QXR0cnNNYXBbJ3YtYmluZDonICsgbmFtZV0gfHxcbiAgICBlbC5yYXdBdHRyc01hcFtuYW1lXVxufVxuXG5mdW5jdGlvbiBnZXRCaW5kaW5nQXR0ciAoXG4gIGVsLFxuICBuYW1lLFxuICBnZXRTdGF0aWNcbikge1xuICB2YXIgZHluYW1pY1ZhbHVlID1cbiAgICBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnOicgKyBuYW1lKSB8fFxuICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWJpbmQ6JyArIG5hbWUpO1xuICBpZiAoZHluYW1pY1ZhbHVlICE9IG51bGwpIHtcbiAgICByZXR1cm4gcGFyc2VGaWx0ZXJzKGR5bmFtaWNWYWx1ZSlcbiAgfSBlbHNlIGlmIChnZXRTdGF0aWMgIT09IGZhbHNlKSB7XG4gICAgdmFyIHN0YXRpY1ZhbHVlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgbmFtZSk7XG4gICAgaWYgKHN0YXRpY1ZhbHVlICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdGF0aWNWYWx1ZSlcbiAgICB9XG4gIH1cbn1cblxuLy8gbm90ZTogdGhpcyBvbmx5IHJlbW92ZXMgdGhlIGF0dHIgZnJvbSB0aGUgQXJyYXkgKGF0dHJzTGlzdCkgc28gdGhhdCBpdFxuLy8gZG9lc24ndCBnZXQgcHJvY2Vzc2VkIGJ5IHByb2Nlc3NBdHRycy5cbi8vIEJ5IGRlZmF1bHQgaXQgZG9lcyBOT1QgcmVtb3ZlIGl0IGZyb20gdGhlIG1hcCAoYXR0cnNNYXApIGJlY2F1c2UgdGhlIG1hcCBpc1xuLy8gbmVlZGVkIGR1cmluZyBjb2RlZ2VuLlxuZnVuY3Rpb24gZ2V0QW5kUmVtb3ZlQXR0ciAoXG4gIGVsLFxuICBuYW1lLFxuICByZW1vdmVGcm9tTWFwXG4pIHtcbiAgdmFyIHZhbDtcbiAgaWYgKCh2YWwgPSBlbC5hdHRyc01hcFtuYW1lXSkgIT0gbnVsbCkge1xuICAgIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChsaXN0W2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgbGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChyZW1vdmVGcm9tTWFwKSB7XG4gICAgZGVsZXRlIGVsLmF0dHJzTWFwW25hbWVdO1xuICB9XG4gIHJldHVybiB2YWxcbn1cblxuZnVuY3Rpb24gZ2V0QW5kUmVtb3ZlQXR0ckJ5UmVnZXggKFxuICBlbCxcbiAgbmFtZVxuKSB7XG4gIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGF0dHIgPSBsaXN0W2ldO1xuICAgIGlmIChuYW1lLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgbGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICByZXR1cm4gYXR0clxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByYW5nZVNldEl0ZW0gKFxuICBpdGVtLFxuICByYW5nZVxuKSB7XG4gIGlmIChyYW5nZSkge1xuICAgIGlmIChyYW5nZS5zdGFydCAhPSBudWxsKSB7XG4gICAgICBpdGVtLnN0YXJ0ID0gcmFuZ2Uuc3RhcnQ7XG4gICAgfVxuICAgIGlmIChyYW5nZS5lbmQgIT0gbnVsbCkge1xuICAgICAgaXRlbS5lbmQgPSByYW5nZS5lbmQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBpdGVtXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIENyb3NzLXBsYXRmb3JtIGNvZGUgZ2VuZXJhdGlvbiBmb3IgY29tcG9uZW50IHYtbW9kZWxcbiAqL1xuZnVuY3Rpb24gZ2VuQ29tcG9uZW50TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciByZWYgPSBtb2RpZmllcnMgfHwge307XG4gIHZhciBudW1iZXIgPSByZWYubnVtYmVyO1xuICB2YXIgdHJpbSA9IHJlZi50cmltO1xuXG4gIHZhciBiYXNlVmFsdWVFeHByZXNzaW9uID0gJyQkdic7XG4gIHZhciB2YWx1ZUV4cHJlc3Npb24gPSBiYXNlVmFsdWVFeHByZXNzaW9uO1xuICBpZiAodHJpbSkge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9XG4gICAgICBcIih0eXBlb2YgXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIgPT09ICdzdHJpbmcnXCIgK1xuICAgICAgXCI/IFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiLnRyaW0oKVwiICtcbiAgICAgIFwiOiBcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIilcIjtcbiAgfVxuICBpZiAobnVtYmVyKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID0gXCJfbihcIiArIHZhbHVlRXhwcmVzc2lvbiArIFwiKVwiO1xuICB9XG4gIHZhciBhc3NpZ25tZW50ID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlRXhwcmVzc2lvbik7XG5cbiAgZWwubW9kZWwgPSB7XG4gICAgdmFsdWU6IChcIihcIiArIHZhbHVlICsgXCIpXCIpLFxuICAgIGV4cHJlc3Npb246IEpTT04uc3RyaW5naWZ5KHZhbHVlKSxcbiAgICBjYWxsYmFjazogKFwiZnVuY3Rpb24gKFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiKSB7XCIgKyBhc3NpZ25tZW50ICsgXCJ9XCIpXG4gIH07XG59XG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gY29kZWdlbiBoZWxwZXIgZm9yIGdlbmVyYXRpbmcgdi1tb2RlbCB2YWx1ZSBhc3NpZ25tZW50IGNvZGUuXG4gKi9cbmZ1bmN0aW9uIGdlbkFzc2lnbm1lbnRDb2RlIChcbiAgdmFsdWUsXG4gIGFzc2lnbm1lbnRcbikge1xuICB2YXIgcmVzID0gcGFyc2VNb2RlbCh2YWx1ZSk7XG4gIGlmIChyZXMua2V5ID09PSBudWxsKSB7XG4gICAgcmV0dXJuICh2YWx1ZSArIFwiPVwiICsgYXNzaWdubWVudClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiJHNldChcIiArIChyZXMuZXhwKSArIFwiLCBcIiArIChyZXMua2V5KSArIFwiLCBcIiArIGFzc2lnbm1lbnQgKyBcIilcIilcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGEgdi1tb2RlbCBleHByZXNzaW9uIGludG8gYSBiYXNlIHBhdGggYW5kIGEgZmluYWwga2V5IHNlZ21lbnQuXG4gKiBIYW5kbGVzIGJvdGggZG90LXBhdGggYW5kIHBvc3NpYmxlIHNxdWFyZSBicmFja2V0cy5cbiAqXG4gKiBQb3NzaWJsZSBjYXNlczpcbiAqXG4gKiAtIHRlc3RcbiAqIC0gdGVzdFtrZXldXG4gKiAtIHRlc3RbdGVzdDFba2V5XV1cbiAqIC0gdGVzdFtcImFcIl1ba2V5XVxuICogLSB4eHgudGVzdFthW2FdLnRlc3QxW2tleV1dXG4gKiAtIHRlc3QueHh4LmFbXCJhc2FcIl1bdGVzdDFba2V5XV1cbiAqXG4gKi9cblxudmFyIGxlbiwgc3RyLCBjaHIsIGluZGV4JDEsIGV4cHJlc3Npb25Qb3MsIGV4cHJlc3Npb25FbmRQb3M7XG5cblxuXG5mdW5jdGlvbiBwYXJzZU1vZGVsICh2YWwpIHtcbiAgLy8gRml4IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUvcHVsbC83NzMwXG4gIC8vIGFsbG93IHYtbW9kZWw9XCJvYmoudmFsIFwiICh0cmFpbGluZyB3aGl0ZXNwYWNlKVxuICB2YWwgPSB2YWwudHJpbSgpO1xuICBsZW4gPSB2YWwubGVuZ3RoO1xuXG4gIGlmICh2YWwuaW5kZXhPZignWycpIDwgMCB8fCB2YWwubGFzdEluZGV4T2YoJ10nKSA8IGxlbiAtIDEpIHtcbiAgICBpbmRleCQxID0gdmFsLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgaWYgKGluZGV4JDEgPiAtMSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXhwOiB2YWwuc2xpY2UoMCwgaW5kZXgkMSksXG4gICAgICAgIGtleTogJ1wiJyArIHZhbC5zbGljZShpbmRleCQxICsgMSkgKyAnXCInXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGV4cDogdmFsLFxuICAgICAgICBrZXk6IG51bGxcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdHIgPSB2YWw7XG4gIGluZGV4JDEgPSBleHByZXNzaW9uUG9zID0gZXhwcmVzc2lvbkVuZFBvcyA9IDA7XG5cbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNTdHJpbmdTdGFydChjaHIpKSB7XG4gICAgICBwYXJzZVN0cmluZyhjaHIpO1xuICAgIH0gZWxzZSBpZiAoY2hyID09PSAweDVCKSB7XG4gICAgICBwYXJzZUJyYWNrZXQoY2hyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cDogdmFsLnNsaWNlKDAsIGV4cHJlc3Npb25Qb3MpLFxuICAgIGtleTogdmFsLnNsaWNlKGV4cHJlc3Npb25Qb3MgKyAxLCBleHByZXNzaW9uRW5kUG9zKVxuICB9XG59XG5cbmZ1bmN0aW9uIG5leHQgKCkge1xuICByZXR1cm4gc3RyLmNoYXJDb2RlQXQoKytpbmRleCQxKVxufVxuXG5mdW5jdGlvbiBlb2YgKCkge1xuICByZXR1cm4gaW5kZXgkMSA+PSBsZW5cbn1cblxuZnVuY3Rpb24gaXNTdHJpbmdTdGFydCAoY2hyKSB7XG4gIHJldHVybiBjaHIgPT09IDB4MjIgfHwgY2hyID09PSAweDI3XG59XG5cbmZ1bmN0aW9uIHBhcnNlQnJhY2tldCAoY2hyKSB7XG4gIHZhciBpbkJyYWNrZXQgPSAxO1xuICBleHByZXNzaW9uUG9zID0gaW5kZXgkMTtcbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICBpZiAoaXNTdHJpbmdTdGFydChjaHIpKSB7XG4gICAgICBwYXJzZVN0cmluZyhjaHIpO1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKGNociA9PT0gMHg1QikgeyBpbkJyYWNrZXQrKzsgfVxuICAgIGlmIChjaHIgPT09IDB4NUQpIHsgaW5CcmFja2V0LS07IH1cbiAgICBpZiAoaW5CcmFja2V0ID09PSAwKSB7XG4gICAgICBleHByZXNzaW9uRW5kUG9zID0gaW5kZXgkMTtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nIChjaHIpIHtcbiAgdmFyIHN0cmluZ1F1b3RlID0gY2hyO1xuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIGlmIChjaHIgPT09IHN0cmluZ1F1b3RlKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHdhcm4kMTtcblxuLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZVxuLy8gc28gd2UgdXNlZCBzb21lIHJlc2VydmVkIHRva2VucyBkdXJpbmcgY29tcGlsZS5cbnZhciBSQU5HRV9UT0tFTiA9ICdfX3InO1xudmFyIENIRUNLQk9YX1JBRElPX1RPS0VOID0gJ19fYyc7XG5cbmZ1bmN0aW9uIG1vZGVsIChcbiAgZWwsXG4gIGRpcixcbiAgX3dhcm5cbikge1xuICB3YXJuJDEgPSBfd2FybjtcbiAgdmFyIHZhbHVlID0gZGlyLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gZGlyLm1vZGlmaWVycztcbiAgdmFyIHRhZyA9IGVsLnRhZztcbiAgdmFyIHR5cGUgPSBlbC5hdHRyc01hcC50eXBlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gaW5wdXRzIHdpdGggdHlwZT1cImZpbGVcIiBhcmUgcmVhZCBvbmx5IGFuZCBzZXR0aW5nIHRoZSBpbnB1dCdzXG4gICAgLy8gdmFsdWUgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICBpZiAodGFnID09PSAnaW5wdXQnICYmIHR5cGUgPT09ICdmaWxlJykge1xuICAgICAgd2FybiQxKFxuICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiB0eXBlPVxcXCJmaWxlXFxcIj46XFxuXCIgK1xuICAgICAgICBcIkZpbGUgaW5wdXRzIGFyZSByZWFkIG9ubHkuIFVzZSBhIHYtb246Y2hhbmdlIGxpc3RlbmVyIGluc3RlYWQuXCIsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW1vZGVsJ11cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgIGdlbkNvbXBvbmVudE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgICAvLyBjb21wb25lbnQgdi1tb2RlbCBkb2Vzbid0IG5lZWQgZXh0cmEgcnVudGltZVxuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICBnZW5TZWxlY3QoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiB0eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgZ2VuQ2hlY2tib3hNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnaW5wdXQnICYmIHR5cGUgPT09ICdyYWRpbycpIHtcbiAgICBnZW5SYWRpb01vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdpbnB1dCcgfHwgdGFnID09PSAndGV4dGFyZWEnKSB7XG4gICAgZ2VuRGVmYXVsdE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICghY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgIGdlbkNvbXBvbmVudE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgICAvLyBjb21wb25lbnQgdi1tb2RlbCBkb2Vzbid0IG5lZWQgZXh0cmEgcnVudGltZVxuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuJDEoXG4gICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIj46IFwiICtcbiAgICAgIFwidi1tb2RlbCBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgZWxlbWVudCB0eXBlLiBcIiArXG4gICAgICAnSWYgeW91IGFyZSB3b3JraW5nIHdpdGggY29udGVudGVkaXRhYmxlLCBpdFxcJ3MgcmVjb21tZW5kZWQgdG8gJyArXG4gICAgICAnd3JhcCBhIGxpYnJhcnkgZGVkaWNhdGVkIGZvciB0aGF0IHB1cnBvc2UgaW5zaWRlIGEgY3VzdG9tIGNvbXBvbmVudC4nLFxuICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtbW9kZWwnXVxuICAgICk7XG4gIH1cblxuICAvLyBlbnN1cmUgcnVudGltZSBkaXJlY3RpdmUgbWV0YWRhdGFcbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gZ2VuQ2hlY2tib3hNb2RlbCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICB2YXIgdmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd2YWx1ZScpIHx8ICdudWxsJztcbiAgdmFyIHRydWVWYWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3RydWUtdmFsdWUnKSB8fCAndHJ1ZSc7XG4gIHZhciBmYWxzZVZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnZmFsc2UtdmFsdWUnKSB8fCAnZmFsc2UnO1xuICBhZGRQcm9wKGVsLCAnY2hlY2tlZCcsXG4gICAgXCJBcnJheS5pc0FycmF5KFwiICsgdmFsdWUgKyBcIilcIiArXG4gICAgXCI/X2koXCIgKyB2YWx1ZSArIFwiLFwiICsgdmFsdWVCaW5kaW5nICsgXCIpPi0xXCIgKyAoXG4gICAgICB0cnVlVmFsdWVCaW5kaW5nID09PSAndHJ1ZSdcbiAgICAgICAgPyAoXCI6KFwiICsgdmFsdWUgKyBcIilcIilcbiAgICAgICAgOiAoXCI6X3EoXCIgKyB2YWx1ZSArIFwiLFwiICsgdHJ1ZVZhbHVlQmluZGluZyArIFwiKVwiKVxuICAgIClcbiAgKTtcbiAgYWRkSGFuZGxlcihlbCwgJ2NoYW5nZScsXG4gICAgXCJ2YXIgJCRhPVwiICsgdmFsdWUgKyBcIixcIiArXG4gICAgICAgICckJGVsPSRldmVudC50YXJnZXQsJyArXG4gICAgICAgIFwiJCRjPSQkZWwuY2hlY2tlZD8oXCIgKyB0cnVlVmFsdWVCaW5kaW5nICsgXCIpOihcIiArIGZhbHNlVmFsdWVCaW5kaW5nICsgXCIpO1wiICtcbiAgICAnaWYoQXJyYXkuaXNBcnJheSgkJGEpKXsnICtcbiAgICAgIFwidmFyICQkdj1cIiArIChudW1iZXIgPyAnX24oJyArIHZhbHVlQmluZGluZyArICcpJyA6IHZhbHVlQmluZGluZykgKyBcIixcIiArXG4gICAgICAgICAgJyQkaT1faSgkJGEsJCR2KTsnICtcbiAgICAgIFwiaWYoJCRlbC5jaGVja2VkKXskJGk8MCYmKFwiICsgKGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCAnJCRhLmNvbmNhdChbJCR2XSknKSkgKyBcIil9XCIgK1xuICAgICAgXCJlbHNleyQkaT4tMSYmKFwiICsgKGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCAnJCRhLnNsaWNlKDAsJCRpKS5jb25jYXQoJCRhLnNsaWNlKCQkaSsxKSknKSkgKyBcIil9XCIgK1xuICAgIFwifWVsc2V7XCIgKyAoZ2VuQXNzaWdubWVudENvZGUodmFsdWUsICckJGMnKSkgKyBcIn1cIixcbiAgICBudWxsLCB0cnVlXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdlblJhZGlvTW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciBudW1iZXIgPSBtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcjtcbiAgdmFyIHZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndmFsdWUnKSB8fCAnbnVsbCc7XG4gIHZhbHVlQmluZGluZyA9IG51bWJlciA/IChcIl9uKFwiICsgdmFsdWVCaW5kaW5nICsgXCIpXCIpIDogdmFsdWVCaW5kaW5nO1xuICBhZGRQcm9wKGVsLCAnY2hlY2tlZCcsIChcIl9xKFwiICsgdmFsdWUgKyBcIixcIiArIHZhbHVlQmluZGluZyArIFwiKVwiKSk7XG4gIGFkZEhhbmRsZXIoZWwsICdjaGFuZ2UnLCBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVCaW5kaW5nKSwgbnVsbCwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGdlblNlbGVjdCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICB2YXIgc2VsZWN0ZWRWYWwgPSBcIkFycmF5LnByb3RvdHlwZS5maWx0ZXJcIiArXG4gICAgXCIuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsZnVuY3Rpb24obyl7cmV0dXJuIG8uc2VsZWN0ZWR9KVwiICtcbiAgICBcIi5tYXAoZnVuY3Rpb24obyl7dmFyIHZhbCA9IFxcXCJfdmFsdWVcXFwiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWU7XCIgK1xuICAgIFwicmV0dXJuIFwiICsgKG51bWJlciA/ICdfbih2YWwpJyA6ICd2YWwnKSArIFwifSlcIjtcblxuICB2YXIgYXNzaWdubWVudCA9ICckZXZlbnQudGFyZ2V0Lm11bHRpcGxlID8gJCRzZWxlY3RlZFZhbCA6ICQkc2VsZWN0ZWRWYWxbMF0nO1xuICB2YXIgY29kZSA9IFwidmFyICQkc2VsZWN0ZWRWYWwgPSBcIiArIHNlbGVjdGVkVmFsICsgXCI7XCI7XG4gIGNvZGUgPSBjb2RlICsgXCIgXCIgKyAoZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIGFzc2lnbm1lbnQpKTtcbiAgYWRkSGFuZGxlcihlbCwgJ2NoYW5nZScsIGNvZGUsIG51bGwsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBnZW5EZWZhdWx0TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciB0eXBlID0gZWwuYXR0cnNNYXAudHlwZTtcblxuICAvLyB3YXJuIGlmIHYtYmluZDp2YWx1ZSBjb25mbGljdHMgd2l0aCB2LW1vZGVsXG4gIC8vIGV4Y2VwdCBmb3IgaW5wdXRzIHdpdGggdi1iaW5kOnR5cGVcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgdmFsdWUkMSA9IGVsLmF0dHJzTWFwWyd2LWJpbmQ6dmFsdWUnXSB8fCBlbC5hdHRyc01hcFsnOnZhbHVlJ107XG4gICAgdmFyIHR5cGVCaW5kaW5nID0gZWwuYXR0cnNNYXBbJ3YtYmluZDp0eXBlJ10gfHwgZWwuYXR0cnNNYXBbJzp0eXBlJ107XG4gICAgaWYgKHZhbHVlJDEgJiYgIXR5cGVCaW5kaW5nKSB7XG4gICAgICB2YXIgYmluZGluZyA9IGVsLmF0dHJzTWFwWyd2LWJpbmQ6dmFsdWUnXSA/ICd2LWJpbmQ6dmFsdWUnIDogJzp2YWx1ZSc7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIGJpbmRpbmcgKyBcIj1cXFwiXCIgKyB2YWx1ZSQxICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIHYtbW9kZWwgb24gdGhlIHNhbWUgZWxlbWVudCBcIiArXG4gICAgICAgICdiZWNhdXNlIHRoZSBsYXR0ZXIgYWxyZWFkeSBleHBhbmRzIHRvIGEgdmFsdWUgYmluZGluZyBpbnRlcm5hbGx5JyxcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbYmluZGluZ11cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlZiA9IG1vZGlmaWVycyB8fCB7fTtcbiAgdmFyIGxhenkgPSByZWYubGF6eTtcbiAgdmFyIG51bWJlciA9IHJlZi5udW1iZXI7XG4gIHZhciB0cmltID0gcmVmLnRyaW07XG4gIHZhciBuZWVkQ29tcG9zaXRpb25HdWFyZCA9ICFsYXp5ICYmIHR5cGUgIT09ICdyYW5nZSc7XG4gIHZhciBldmVudCA9IGxhenlcbiAgICA/ICdjaGFuZ2UnXG4gICAgOiB0eXBlID09PSAncmFuZ2UnXG4gICAgICA/IFJBTkdFX1RPS0VOXG4gICAgICA6ICdpbnB1dCc7XG5cbiAgdmFyIHZhbHVlRXhwcmVzc2lvbiA9ICckZXZlbnQudGFyZ2V0LnZhbHVlJztcbiAgaWYgKHRyaW0pIHtcbiAgICB2YWx1ZUV4cHJlc3Npb24gPSBcIiRldmVudC50YXJnZXQudmFsdWUudHJpbSgpXCI7XG4gIH1cbiAgaWYgKG51bWJlcikge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9IFwiX24oXCIgKyB2YWx1ZUV4cHJlc3Npb24gKyBcIilcIjtcbiAgfVxuXG4gIHZhciBjb2RlID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlRXhwcmVzc2lvbik7XG4gIGlmIChuZWVkQ29tcG9zaXRpb25HdWFyZCkge1xuICAgIGNvZGUgPSBcImlmKCRldmVudC50YXJnZXQuY29tcG9zaW5nKXJldHVybjtcIiArIGNvZGU7XG4gIH1cblxuICBhZGRQcm9wKGVsLCAndmFsdWUnLCAoXCIoXCIgKyB2YWx1ZSArIFwiKVwiKSk7XG4gIGFkZEhhbmRsZXIoZWwsIGV2ZW50LCBjb2RlLCBudWxsLCB0cnVlKTtcbiAgaWYgKHRyaW0gfHwgbnVtYmVyKSB7XG4gICAgYWRkSGFuZGxlcihlbCwgJ2JsdXInLCAnJGZvcmNlVXBkYXRlKCknKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gbm9ybWFsaXplIHYtbW9kZWwgZXZlbnQgdG9rZW5zIHRoYXQgY2FuIG9ubHkgYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lLlxuLy8gaXQncyBpbXBvcnRhbnQgdG8gcGxhY2UgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBpbiB0aGUgYXJyYXkgYmVjYXVzZVxuLy8gdGhlIHdob2xlIHBvaW50IGlzIGVuc3VyaW5nIHRoZSB2LW1vZGVsIGNhbGxiYWNrIGdldHMgY2FsbGVkIGJlZm9yZVxuLy8gdXNlci1hdHRhY2hlZCBoYW5kbGVycy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50cyAob24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltSQU5HRV9UT0tFTl0pKSB7XG4gICAgLy8gSUUgaW5wdXRbdHlwZT1yYW5nZV0gb25seSBzdXBwb3J0cyBgY2hhbmdlYCBldmVudFxuICAgIHZhciBldmVudCA9IGlzSUUgPyAnY2hhbmdlJyA6ICdpbnB1dCc7XG4gICAgb25bZXZlbnRdID0gW10uY29uY2F0KG9uW1JBTkdFX1RPS0VOXSwgb25bZXZlbnRdIHx8IFtdKTtcbiAgICBkZWxldGUgb25bUkFOR0VfVE9LRU5dO1xuICB9XG4gIC8vIFRoaXMgd2FzIG9yaWdpbmFsbHkgaW50ZW5kZWQgdG8gZml4ICM0NTIxIGJ1dCBubyBsb25nZXIgbmVjZXNzYXJ5XG4gIC8vIGFmdGVyIDIuNS4gS2VlcGluZyBpdCBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGdlbmVyYXRlZCBjb2RlIGZyb20gPCAyLjRcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltDSEVDS0JPWF9SQURJT19UT0tFTl0pKSB7XG4gICAgb24uY2hhbmdlID0gW10uY29uY2F0KG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSwgb24uY2hhbmdlIHx8IFtdKTtcbiAgICBkZWxldGUgb25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dO1xuICB9XG59XG5cbnZhciB0YXJnZXQkMTtcblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIkMSAoZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbi8vICM5NDQ2OiBGaXJlZm94IDw9IDUzIChpbiBwYXJ0aWN1bGFyLCBFU1IgNTIpIGhhcyBpbmNvcnJlY3QgRXZlbnQudGltZVN0YW1wXG4vLyBpbXBsZW1lbnRhdGlvbiBhbmQgZG9lcyBub3QgZmlyZSBtaWNyb3Rhc2tzIGluIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24sIHNvXG4vLyBzYWZlIHRvIGV4Y2x1ZGUuXG52YXIgdXNlTWljcm90YXNrRml4ID0gaXNVc2luZ01pY3JvVGFzayAmJiAhKGlzRkYgJiYgTnVtYmVyKGlzRkZbMV0pIDw9IDUzKTtcblxuZnVuY3Rpb24gYWRkJDEgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBwYXNzaXZlXG4pIHtcbiAgLy8gYXN5bmMgZWRnZSBjYXNlICM2NTY2OiBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxuICAvLyBhdHRhY2hlZCB0byBvdXRlciBlbGVtZW50IGR1cmluZyBwYXRjaCwgYW5kIHRyaWdnZXJlZCBhZ2Fpbi4gVGhpc1xuICAvLyBoYXBwZW5zIGJlY2F1c2UgYnJvd3NlcnMgZmlyZSBtaWNyb3Rhc2sgdGlja3MgYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbi5cbiAgLy8gdGhlIHNvbHV0aW9uIGlzIHNpbXBsZTogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxuICAvLyBhbmQgdGhlIGhhbmRsZXIgd291bGQgb25seSBmaXJlIGlmIHRoZSBldmVudCBwYXNzZWQgdG8gaXQgd2FzIGZpcmVkXG4gIC8vIEFGVEVSIGl0IHdhcyBhdHRhY2hlZC5cbiAgaWYgKHVzZU1pY3JvdGFza0ZpeCkge1xuICAgIHZhciBhdHRhY2hlZFRpbWVzdGFtcCA9IGN1cnJlbnRGbHVzaFRpbWVzdGFtcDtcbiAgICB2YXIgb3JpZ2luYWwgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBvcmlnaW5hbC5fd3JhcHBlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vIGJ1YmJsaW5nLCBzaG91bGQgYWx3YXlzIGZpcmUuXG4gICAgICAgIC8vIHRoaXMgaXMganVzdCBhIHNhZmV0eSBuZXQgaW4gY2FzZSBldmVudC50aW1lU3RhbXAgaXMgdW5yZWxpYWJsZSBpblxuICAgICAgICAvLyBjZXJ0YWluIHdlaXJkIGVudmlyb25tZW50cy4uLlxuICAgICAgICBlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0IHx8XG4gICAgICAgIC8vIGV2ZW50IGlzIGZpcmVkIGFmdGVyIGhhbmRsZXIgYXR0YWNobWVudFxuICAgICAgICBlLnRpbWVTdGFtcCA+PSBhdHRhY2hlZFRpbWVzdGFtcCB8fFxuICAgICAgICAvLyBiYWlsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBoYXZlIGJ1Z2d5IGV2ZW50LnRpbWVTdGFtcCBpbXBsZW1lbnRhdGlvbnNcbiAgICAgICAgLy8gIzk0NjIgaU9TIDkgYnVnOiBldmVudC50aW1lU3RhbXAgaXMgMCBhZnRlciBoaXN0b3J5LnB1c2hTdGF0ZVxuICAgICAgICAvLyAjOTY4MSBRdFdlYkVuZ2luZSBldmVudC50aW1lU3RhbXAgaXMgbmVnYXRpdmUgdmFsdWVcbiAgICAgICAgZS50aW1lU3RhbXAgPD0gMCB8fFxuICAgICAgICAvLyAjOTQ0OCBiYWlsIGlmIGV2ZW50IGlzIGZpcmVkIGluIGFub3RoZXIgZG9jdW1lbnQgaW4gYSBtdWx0aS1wYWdlXG4gICAgICAgIC8vIGVsZWN0cm9uL253LmpzIGFwcCwgc2luY2UgZXZlbnQudGltZVN0YW1wIHdpbGwgYmUgdXNpbmcgYSBkaWZmZXJlbnRcbiAgICAgICAgLy8gc3RhcnRpbmcgcmVmZXJlbmNlXG4gICAgICAgIGUudGFyZ2V0Lm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHRhcmdldCQxLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLFxuICAgIHN1cHBvcnRzUGFzc2l2ZVxuICAgICAgPyB7IGNhcHR1cmU6IGNhcHR1cmUsIHBhc3NpdmU6IHBhc3NpdmUgfVxuICAgICAgOiBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQyIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgX3RhcmdldFxuKSB7XG4gIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlci5fd3JhcHBlciB8fCBoYW5kbGVyLFxuICAgIGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRE9NTGlzdGVuZXJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5vbikgJiYgaXNVbmRlZih2bm9kZS5kYXRhLm9uKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvbiA9IHZub2RlLmRhdGEub24gfHwge307XG4gIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG4gIHRhcmdldCQxID0gdm5vZGUuZWxtO1xuICBub3JtYWxpemVFdmVudHMob24pO1xuICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMSwgcmVtb3ZlJDIsIGNyZWF0ZU9uY2VIYW5kbGVyJDEsIHZub2RlLmNvbnRleHQpO1xuICB0YXJnZXQkMSA9IHVuZGVmaW5lZDtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG59O1xuXG4vKiAgKi9cblxudmFyIHN2Z0NvbnRhaW5lcjtcblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkUHJvcHMgPSBvbGRWbm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKHByb3BzLl9fb2JfXykpIHtcbiAgICBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIG9sZFByb3BzKSB7XG4gICAgaWYgKCEoa2V5IGluIHByb3BzKSkge1xuICAgICAgZWxtW2tleV0gPSAnJztcbiAgICB9XG4gIH1cblxuICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgIGN1ciA9IHByb3BzW2tleV07XG4gICAgLy8gaWdub3JlIGNoaWxkcmVuIGlmIHRoZSBub2RlIGhhcyB0ZXh0Q29udGVudCBvciBpbm5lckhUTUwsXG4gICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuICAgIGlmIChrZXkgPT09ICd0ZXh0Q29udGVudCcgfHwga2V5ID09PSAnaW5uZXJIVE1MJykge1xuICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7IHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7IH1cbiAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsgY29udGludWUgfVxuICAgICAgLy8gIzY2MDEgd29yayBhcm91bmQgQ2hyb21lIHZlcnNpb24gPD0gNTUgYnVnIHdoZXJlIHNpbmdsZSB0ZXh0Tm9kZVxuICAgICAgLy8gcmVwbGFjZWQgYnkgaW5uZXJIVE1ML3RleHRDb250ZW50IHJldGFpbnMgaXRzIHBhcmVudE5vZGUgcHJvcGVydHlcbiAgICAgIGlmIChlbG0uY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmIGVsbS50YWdOYW1lICE9PSAnUFJPR1JFU1MnKSB7XG4gICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxuICAgICAgZWxtLl92YWx1ZSA9IGN1cjtcbiAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgdmFyIHN0ckN1ciA9IGlzVW5kZWYoY3VyKSA/ICcnIDogU3RyaW5nKGN1cik7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCBzdHJDdXIpKSB7XG4gICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgJiYgaXNTVkcoZWxtLnRhZ05hbWUpICYmIGlzVW5kZWYoZWxtLmlubmVySFRNTCkpIHtcbiAgICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lckhUTUwgZm9yIFNWRyBlbGVtZW50c1xuICAgICAgc3ZnQ29udGFpbmVyID0gc3ZnQ29udGFpbmVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc3ZnQ29udGFpbmVyLmlubmVySFRNTCA9IFwiPHN2Zz5cIiArIGN1ciArIFwiPC9zdmc+XCI7XG4gICAgICB2YXIgc3ZnID0gc3ZnQ29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICB3aGlsZSAoZWxtLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzdmcuZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0uYXBwZW5kQ2hpbGQoc3ZnLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAvLyBza2lwIHRoZSB1cGRhdGUgaWYgb2xkIGFuZCBuZXcgVkRPTSBzdGF0ZSBpcyB0aGUgc2FtZS5cbiAgICAgIC8vIGB2YWx1ZWAgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5IGJlY2F1c2UgdGhlIERPTSB2YWx1ZSBtYXkgYmUgdGVtcG9yYXJpbHlcbiAgICAgIC8vIG91dCBvZiBzeW5jIHdpdGggVkRPTSBzdGF0ZSBkdWUgdG8gZm9jdXMsIGNvbXBvc2l0aW9uIGFuZCBtb2RpZmllcnMuXG4gICAgICAvLyBUaGlzICAjNDUyMSBieSBza2lwcGluZyB0aGUgdW5uZWNlc3NhcnkgYGNoZWNrZWRgIHVwZGF0ZS5cbiAgICAgIGN1ciAhPT0gb2xkUHJvcHNba2V5XVxuICAgICkge1xuICAgICAgLy8gc29tZSBwcm9wZXJ0eSB1cGRhdGVzIGNhbiB0aHJvd1xuICAgICAgLy8gZS5nLiBgdmFsdWVgIG9uIDxwcm9ncmVzcz4gdy8gbm9uLWZpbml0ZSB2YWx1ZVxuICAgICAgdHJ5IHtcbiAgICAgICAgZWxtW2tleV0gPSBjdXI7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cbiAgfVxufVxuXG4vLyBjaGVjayBwbGF0Zm9ybXMvd2ViL3V0aWwvYXR0cnMuanMgYWNjZXB0VmFsdWVcblxuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVWYWx1ZSAoZWxtLCBjaGVja1ZhbCkge1xuICByZXR1cm4gKCFlbG0uY29tcG9zaW5nICYmIChcbiAgICBlbG0udGFnTmFtZSA9PT0gJ09QVElPTicgfHxcbiAgICBpc05vdEluRm9jdXNBbmREaXJ0eShlbG0sIGNoZWNrVmFsKSB8fFxuICAgIGlzRGlydHlXaXRoTW9kaWZpZXJzKGVsbSwgY2hlY2tWYWwpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzTm90SW5Gb2N1c0FuZERpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG4gIC8vIHJldHVybiB0cnVlIHdoZW4gdGV4dGJveCAoLm51bWJlciBhbmQgLnRyaW0pIGxvc2VzIGZvY3VzIGFuZCBpdHMgdmFsdWUgaXNcbiAgLy8gbm90IGVxdWFsIHRvIHRoZSB1cGRhdGVkIHZhbHVlXG4gIHZhciBub3RJbkZvY3VzID0gdHJ1ZTtcbiAgLy8gIzYxNTdcbiAgLy8gd29yayBhcm91bmQgSUUgYnVnIHdoZW4gYWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW4gYW4gaWZyYW1lXG4gIHRyeSB7IG5vdEluRm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbG07IH0gY2F0Y2ggKGUpIHt9XG4gIHJldHVybiBub3RJbkZvY3VzICYmIGVsbS52YWx1ZSAhPT0gY2hlY2tWYWxcbn1cblxuZnVuY3Rpb24gaXNEaXJ0eVdpdGhNb2RpZmllcnMgKGVsbSwgbmV3VmFsKSB7XG4gIHZhciB2YWx1ZSA9IGVsbS52YWx1ZTtcbiAgdmFyIG1vZGlmaWVycyA9IGVsbS5fdk1vZGlmaWVyczsgLy8gaW5qZWN0ZWQgYnkgdi1tb2RlbCBydW50aW1lXG4gIGlmIChpc0RlZihtb2RpZmllcnMpKSB7XG4gICAgaWYgKG1vZGlmaWVycy5udW1iZXIpIHtcbiAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSkgIT09IHRvTnVtYmVyKG5ld1ZhbClcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy50cmltKSB7XG4gICAgICByZXR1cm4gdmFsdWUudHJpbSgpICE9PSBuZXdWYWwudHJpbSgpXG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsXG59XG5cbnZhciBkb21Qcm9wcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01Qcm9wcyxcbiAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xufTtcblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKFxuICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiZcbiAgICAgICAgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpXG4gICAgICApIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShuYW1lKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICB9IGVsc2Uge1xuICAgIHZhciBub3JtYWxpemVkTmFtZSA9IG5vcm1hbGl6ZShuYW1lKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAvLyBTdXBwb3J0IHZhbHVlcyBhcnJheSBjcmVhdGVkIGJ5IGF1dG9wcmVmaXhlciwgZS5nLlxuICAgICAgLy8ge2Rpc3BsYXk6IFtcIi13ZWJraXQtYm94XCIsIFwiLW1zLWZsZXhib3hcIiwgXCJmbGV4XCJdfVxuICAgICAgLy8gU2V0IHRoZW0gb25lIGJ5IG9uZSwgYW5kIHRoZSBicm93c2VyIHdpbGwgb25seSBzZXQgdGhvc2UgaXQgY2FuIHJlY29nbml6ZVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWxbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB2ZW5kb3JOYW1lcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuXG52YXIgZW1wdHlTdHlsZTtcbnZhciBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHtcbiAgZW1wdHlTdHlsZSA9IGVtcHR5U3R5bGUgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHByb3AgPSBjYW1lbGl6ZShwcm9wKTtcbiAgaWYgKHByb3AgIT09ICdmaWx0ZXInICYmIChwcm9wIGluIGVtcHR5U3R5bGUpKSB7XG4gICAgcmV0dXJuIHByb3BcbiAgfVxuICB2YXIgY2FwTmFtZSA9IHByb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnNsaWNlKDEpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5hbWUgPSB2ZW5kb3JOYW1lc1tpXSArIGNhcE5hbWU7XG4gICAgaWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkge1xuICAgICAgcmV0dXJuIG5hbWVcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVTdHlsZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuXG4gIGlmIChpc1VuZGVmKGRhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYoZGF0YS5zdHlsZSkgJiZcbiAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYob2xkRGF0YS5zdHlsZSlcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3VyLCBuYW1lO1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZERhdGEuc3RhdGljU3R5bGU7XG4gIHZhciBvbGRTdHlsZUJpbmRpbmcgPSBvbGREYXRhLm5vcm1hbGl6ZWRTdHlsZSB8fCBvbGREYXRhLnN0eWxlIHx8IHt9O1xuXG4gIC8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhXG4gIHZhciBvbGRTdHlsZSA9IG9sZFN0YXRpY1N0eWxlIHx8IG9sZFN0eWxlQmluZGluZztcblxuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgLy8gc3RvcmUgbm9ybWFsaXplZCBzdHlsZSB1bmRlciBhIGRpZmZlcmVudCBrZXkgZm9yIG5leHQgZGlmZlxuICAvLyBtYWtlIHN1cmUgdG8gY2xvbmUgaXQgaWYgaXQncyByZWFjdGl2ZSwgc2luY2UgdGhlIHVzZXIgbGlrZWx5IHdhbnRzXG4gIC8vIHRvIG11dGF0ZSBpdC5cbiAgdm5vZGUuZGF0YS5ub3JtYWxpemVkU3R5bGUgPSBpc0RlZihzdHlsZS5fX29iX18pXG4gICAgPyBleHRlbmQoe30sIHN0eWxlKVxuICAgIDogc3R5bGU7XG5cbiAgdmFyIG5ld1N0eWxlID0gZ2V0U3R5bGUodm5vZGUsIHRydWUpO1xuXG4gIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgIGlmIChpc1VuZGVmKG5ld1N0eWxlW25hbWVdKSkge1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgJycpO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gbmV3U3R5bGUpIHtcbiAgICBjdXIgPSBuZXdTdHlsZVtuYW1lXTtcbiAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgLy8gaWU5IHNldHRpbmcgdG8gbnVsbCBoYXMgbm8gZWZmZWN0LCBtdXN0IHVzZSBlbXB0eSBzdHJpbmdcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsIGN1ciA9PSBudWxsID8gJycgOiBjdXIpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc3R5bGUgPSB7XG4gIGNyZWF0ZTogdXBkYXRlU3R5bGUsXG4gIHVwZGF0ZTogdXBkYXRlU3R5bGVcbn07XG5cbi8qICAqL1xuXG52YXIgd2hpdGVzcGFjZVJFID0gL1xccysvO1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYkJDEpIHtcbiAgaWYgKCFkZWYkJDEpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZiQkMS5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmJCQxKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG52YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcblxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xudmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XG52YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcbiAgfVxufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXJcbiAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICAgIDogc2V0VGltZW91dFxuICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XG4gICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcbiAgZWwsXG4gIGV4cGVjdGVkVHlwZSxcbiAgY2Jcbikge1xuICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gIHZhciB0aW1lb3V0ID0gcmVmLnRpbWVvdXQ7XG4gIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XG4gIHZhciBlbmRlZCA9IDA7XG4gIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIHZhciBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG52YXIgdHJhbnNmb3JtUkUgPSAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAvLyBKU0RPTSBtYXkgcmV0dXJuIHVuZGVmaW5lZCBmb3IgdHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gIHZhciB0cmFuc2l0aW9uRGVsYXlzID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uRHVyYXRpb25zID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xuXG4gIHZhciB0eXBlO1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHZhciBwcm9wQ291bnQgPSAwO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xuICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gQU5JTUFUSU9OO1xuICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpO1xuICAgIHR5cGUgPSB0aW1lb3V0ID4gMFxuICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcbiAgICAgICAgPyBUUkFOU0lUSU9OXG4gICAgICAgIDogQU5JTUFUSU9OXG4gICAgICA6IG51bGw7XG4gICAgcHJvcENvdW50ID0gdHlwZVxuICAgICAgPyB0eXBlID09PSBUUkFOU0lUSU9OXG4gICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICA6IDA7XG4gIH1cbiAgdmFyIGhhc1RyYW5zZm9ybSA9XG4gICAgdHlwZSA9PT0gVFJBTlNJVElPTiAmJlxuICAgIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdGltZW91dDogdGltZW91dCxcbiAgICBwcm9wQ291bnQ6IHByb3BDb3VudCxcbiAgICBoYXNUcmFuc2Zvcm06IGhhc1RyYW5zZm9ybVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRpbWVvdXQgKGRlbGF5cywgZHVyYXRpb25zKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xuICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBkdXJhdGlvbnMubWFwKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgcmV0dXJuIHRvTXMoZCkgKyB0b01zKGRlbGF5c1tpXSlcbiAgfSkpXG59XG5cbi8vIE9sZCB2ZXJzaW9ucyBvZiBDaHJvbWl1bSAoYmVsb3cgNjEuMC4zMTYzLjEwMCkgZm9ybWF0cyBmbG9hdGluZyBwb2ludGVyIG51bWJlcnNcbi8vIGluIGEgbG9jYWxlLWRlcGVuZGVudCB3YXksIHVzaW5nIGEgY29tbWEgaW5zdGVhZCBvZiBhIGRvdC5cbi8vIElmIGNvbW1hIGlzIG5vdCByZXBsYWNlZCB3aXRoIGEgZG90LCB0aGUgaW5wdXQgd2lsbCBiZSByb3VuZGVkIGRvd24gKGkuZS4gYWN0aW5nXG4vLyBhcyBhIGZsb29yIGZ1bmN0aW9uKSBjYXVzaW5nIHVuZXhwZWN0ZWQgYmVoYXZpb3JzXG5mdW5jdGlvbiB0b01zIChzKSB7XG4gIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkucmVwbGFjZSgnLCcsICcuJykpICogMTAwMFxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW50ZXIgKHZub2RlLCB0b2dnbGVEaXNwbGF5KSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgZWwuX2xlYXZlQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fbGVhdmVDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBlbnRlckNsYXNzID0gZGF0YS5lbnRlckNsYXNzO1xuICB2YXIgZW50ZXJUb0NsYXNzID0gZGF0YS5lbnRlclRvQ2xhc3M7XG4gIHZhciBlbnRlckFjdGl2ZUNsYXNzID0gZGF0YS5lbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgYXBwZWFyQ2xhc3MgPSBkYXRhLmFwcGVhckNsYXNzO1xuICB2YXIgYXBwZWFyVG9DbGFzcyA9IGRhdGEuYXBwZWFyVG9DbGFzcztcbiAgdmFyIGFwcGVhckFjdGl2ZUNsYXNzID0gZGF0YS5hcHBlYXJBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUVudGVyID0gZGF0YS5iZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVyID0gZGF0YS5lbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXIgPSBkYXRhLmFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZCA9IGRhdGEuZW50ZXJDYW5jZWxsZWQ7XG4gIHZhciBiZWZvcmVBcHBlYXIgPSBkYXRhLmJlZm9yZUFwcGVhcjtcbiAgdmFyIGFwcGVhciA9IGRhdGEuYXBwZWFyO1xuICB2YXIgYWZ0ZXJBcHBlYXIgPSBkYXRhLmFmdGVyQXBwZWFyO1xuICB2YXIgYXBwZWFyQ2FuY2VsbGVkID0gZGF0YS5hcHBlYXJDYW5jZWxsZWQ7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgLy8gYWN0aXZlSW5zdGFuY2Ugd2lsbCBhbHdheXMgYmUgdGhlIDx0cmFuc2l0aW9uPiBjb21wb25lbnQgbWFuYWdpbmcgdGhpc1xuICAvLyB0cmFuc2l0aW9uLiBPbmUgZWRnZSBjYXNlIHRvIGNoZWNrIGlzIHdoZW4gdGhlIDx0cmFuc2l0aW9uPiBpcyBwbGFjZWRcbiAgLy8gYXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNoaWxkIGNvbXBvbmVudC4gSW4gdGhhdCBjYXNlIHdlIG5lZWQgdG8gY2hlY2tcbiAgLy8gPHRyYW5zaXRpb24+J3MgcGFyZW50IGZvciBhcHBlYXIgY2hlY2suXG4gIHZhciBjb250ZXh0ID0gYWN0aXZlSW5zdGFuY2U7XG4gIHZhciB0cmFuc2l0aW9uTm9kZSA9IGFjdGl2ZUluc3RhbmNlLiR2bm9kZTtcbiAgd2hpbGUgKHRyYW5zaXRpb25Ob2RlICYmIHRyYW5zaXRpb25Ob2RlLnBhcmVudCkge1xuICAgIGNvbnRleHQgPSB0cmFuc2l0aW9uTm9kZS5jb250ZXh0O1xuICAgIHRyYW5zaXRpb25Ob2RlID0gdHJhbnNpdGlvbk5vZGUucGFyZW50O1xuICB9XG5cbiAgdmFyIGlzQXBwZWFyID0gIWNvbnRleHQuX2lzTW91bnRlZCB8fCAhdm5vZGUuaXNSb290SW5zZXJ0O1xuXG4gIGlmIChpc0FwcGVhciAmJiAhYXBwZWFyICYmIGFwcGVhciAhPT0gJycpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdGFydENsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQ2xhc3NcbiAgICA/IGFwcGVhckNsYXNzXG4gICAgOiBlbnRlckNsYXNzO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJBY3RpdmVDbGFzc1xuICAgID8gYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA6IGVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciB0b0NsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyVG9DbGFzc1xuICAgID8gYXBwZWFyVG9DbGFzc1xuICAgIDogZW50ZXJUb0NsYXNzO1xuXG4gIHZhciBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcilcbiAgICA6IGJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/ICh0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nID8gYXBwZWFyIDogZW50ZXIpXG4gICAgOiBlbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChhZnRlckFwcGVhciB8fCBhZnRlckVudGVyKVxuICAgIDogYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkSG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKVxuICAgIDogZW50ZXJDYW5jZWxsZWQ7XG5cbiAgdmFyIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5lbnRlclxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24sICdlbnRlcicsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChlbnRlckhvb2spO1xuXG4gIHZhciBjYiA9IGVsLl9lbnRlckNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIH1cbiAgICAgIGVudGVyQ2FuY2VsbGVkSG9vayAmJiBlbnRlckNhbmNlbGxlZEhvb2soZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlckVudGVySG9vayAmJiBhZnRlckVudGVySG9vayhlbCk7XG4gICAgfVxuICAgIGVsLl9lbnRlckNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9va1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICB2YXIgcGVuZGluZ05vZGUgPSBwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nICYmIHBhcmVudC5fcGVuZGluZ1t2bm9kZS5rZXldO1xuICAgICAgaWYgKHBlbmRpbmdOb2RlICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLnRhZyA9PT0gdm5vZGUudGFnICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYlxuICAgICAgKSB7XG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYigpO1xuICAgICAgfVxuICAgICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gc3RhcnQgZW50ZXIgdHJhbnNpdGlvblxuICBiZWZvcmVFbnRlckhvb2sgJiYgYmVmb3JlRW50ZXJIb29rKGVsKTtcbiAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24pKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdEVudGVyRHVyYXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICh2bm9kZS5kYXRhLnNob3cpIHtcbiAgICB0b2dnbGVEaXNwbGF5ICYmIHRvZ2dsZURpc3BsYXkoKTtcbiAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gIH1cblxuICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICBjYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxlYXZlICh2bm9kZSwgcm0pIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgZW50ZXIgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikpIHtcbiAgICBlbC5fZW50ZXJDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9lbnRlckNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIHJtKClcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgbGVhdmVDbGFzcyA9IGRhdGEubGVhdmVDbGFzcztcbiAgdmFyIGxlYXZlVG9DbGFzcyA9IGRhdGEubGVhdmVUb0NsYXNzO1xuICB2YXIgbGVhdmVBY3RpdmVDbGFzcyA9IGRhdGEubGVhdmVBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUxlYXZlID0gZGF0YS5iZWZvcmVMZWF2ZTtcbiAgdmFyIGxlYXZlID0gZGF0YS5sZWF2ZTtcbiAgdmFyIGFmdGVyTGVhdmUgPSBkYXRhLmFmdGVyTGVhdmU7XG4gIHZhciBsZWF2ZUNhbmNlbGxlZCA9IGRhdGEubGVhdmVDYW5jZWxsZWQ7XG4gIHZhciBkZWxheUxlYXZlID0gZGF0YS5kZWxheUxlYXZlO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChsZWF2ZSk7XG5cbiAgdmFyIGV4cGxpY2l0TGVhdmVEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5sZWF2ZVxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbiwgJ2xlYXZlJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGNiID0gZWwuX2xlYXZlQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLl9wZW5kaW5nKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLl9wZW5kaW5nW3Zub2RlLmtleV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGxlYXZlQ2FuY2VsbGVkICYmIGxlYXZlQ2FuY2VsbGVkKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZShlbCk7XG4gICAgfVxuICAgIGVsLl9sZWF2ZUNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICBkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7XG4gIH0gZWxzZSB7XG4gICAgcGVyZm9ybUxlYXZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUgKCkge1xuICAgIC8vIHRoZSBkZWxheWVkIGxlYXZlIG1heSBoYXZlIGFscmVhZHkgYmVlbiBjYW5jZWxsZWRcbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gcmVjb3JkIGxlYXZpbmcgZWxlbWVudFxuICAgIGlmICghdm5vZGUuZGF0YS5zaG93ICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICAgIChlbC5wYXJlbnROb2RlLl9wZW5kaW5nIHx8IChlbC5wYXJlbnROb2RlLl9wZW5kaW5nID0ge30pKVsodm5vZGUua2V5KV0gPSB2bm9kZTtcbiAgICB9XG4gICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0TGVhdmVEdXJhdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gb25seSB1c2VkIGluIGRldiBtb2RlXG5mdW5jdGlvbiBjaGVja0R1cmF0aW9uICh2YWwsIG5hbWUsIHZub2RlKSB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBcIiArXG4gICAgICBcImdvdCBcIiArIChKU09OLnN0cmluZ2lmeSh2YWwpKSArIFwiLlwiLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH0gZWxzZSBpZiAoaXNOYU4odmFsKSkge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBOYU4gLSBcIiArXG4gICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRHVyYXRpb24gKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbClcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSB0cmFuc2l0aW9uIGhvb2sncyBhcmd1bWVudCBsZW5ndGguIFRoZSBob29rIG1heSBiZTpcbiAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xuICogLSBhIHdyYXBwZWQgY29tcG9uZW50IG1ldGhvZCAoY2hlY2sgLl9sZW5ndGgpXG4gKiAtIGEgcGxhaW4gZnVuY3Rpb24gKC5sZW5ndGgpXG4gKi9cbmZ1bmN0aW9uIGdldEhvb2tBcmd1bWVudHNMZW5ndGggKGZuKSB7XG4gIGlmIChpc1VuZGVmKGZuKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHZhciBpbnZva2VyRm5zID0gZm4uZm5zO1xuICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcbiAgICAvLyBpbnZva2VyXG4gICAgcmV0dXJuIGdldEhvb2tBcmd1bWVudHNMZW5ndGgoXG4gICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpXG4gICAgICAgID8gaW52b2tlckZuc1swXVxuICAgICAgICA6IGludm9rZXJGbnNcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmbi5fbGVuZ3RoIHx8IGZuLmxlbmd0aCkgPiAxXG4gIH1cbn1cblxuZnVuY3Rpb24gX2VudGVyIChfLCB2bm9kZSkge1xuICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgZW50ZXIodm5vZGUpO1xuICB9XG59XG5cbnZhciB0cmFuc2l0aW9uID0gaW5Ccm93c2VyID8ge1xuICBjcmVhdGU6IF9lbnRlcixcbiAgYWN0aXZhdGU6IF9lbnRlcixcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUkJDEgKHZub2RlLCBybSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgICAgbGVhdmUodm5vZGUsIHJtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICB9XG4gIH1cbn0gOiB7fTtcblxudmFyIHBsYXRmb3JtTW9kdWxlcyA9IFtcbiAgYXR0cnMsXG4gIGtsYXNzLFxuICBldmVudHMsXG4gIGRvbVByb3BzLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvblxuXTtcblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChpc0lFOSkge1xuICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC9cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGVsICYmIGVsLnZtb2RlbCkge1xuICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRpcmVjdGl2ZSA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vICM2OTAzXG4gICAgICBpZiAob2xkVm5vZGUuZWxtICYmICFvbGRWbm9kZS5lbG0uX3ZPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRpcmVjdGl2ZS5jb21wb25lbnRVcGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGlzVGV4dElucHV0VHlwZShlbC50eXBlKSkge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zO1xuICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgIC8vIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGlmXG4gICAgICAgIC8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlXG4gICAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgID8gYmluZGluZy52YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiBoYXNOb01hdGNoaW5nT3B0aW9uKHYsIGN1ck9wdGlvbnMpOyB9KVxuICAgICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnMpO1xuICAgICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgICAgdHJpZ2dlcihlbCwgJ2NoYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0lFIHx8IGlzRWRnZSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICB2YXIgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xuICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIjxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD1cXFwiXCIgKyAoYmluZGluZy5leHByZXNzaW9uKSArIFwiXFxcIj4gXCIgK1xuICAgICAgXCJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCBcIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlbGVjdGVkLCBvcHRpb247XG4gIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvcHRpb24gPSBlbC5vcHRpb25zW2ldO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTtcbiAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHtcbiAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc011bHRpcGxlKSB7XG4gICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCB2YWx1ZSk7IH0pXG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlIChvcHRpb24pIHtcbiAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgID8gb3B0aW9uLl92YWx1ZVxuICAgIDogb3B0aW9uLnZhbHVlXG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7XG4gIC8vIHByZXZlbnQgdHJpZ2dlcmluZyBhbiBpbnB1dCBldmVudCBmb3Igbm8gcmVhc29uXG4gIGlmICghZS50YXJnZXQuY29tcG9zaW5nKSB7IHJldHVybiB9XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICB0cmlnZ2VyKGUudGFyZ2V0LCAnaW5wdXQnKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlciAoZWwsIHR5cGUpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgZWwuZGlzcGF0Y2hFdmVudChlKTtcbn1cblxuLyogICovXG5cbi8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgcG9zc2libGUgdHJhbnNpdGlvbiBkZWZpbmVkIGluc2lkZSB0aGUgY29tcG9uZW50IHJvb3RcbmZ1bmN0aW9uIGxvY2F0ZU5vZGUgKHZub2RlKSB7XG4gIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcbiAgICA/IGxvY2F0ZU5vZGUodm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKVxuICAgIDogdm5vZGVcbn1cblxudmFyIHNob3cgPSB7XG4gIGJpbmQ6IGZ1bmN0aW9uIGJpbmQgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xuICAgIGlmICh2YWx1ZSAmJiB0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBvcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgIGVsLFxuICAgIGJpbmRpbmcsXG4gICAgdm5vZGUsXG4gICAgb2xkVm5vZGUsXG4gICAgaXNEZXN0cm95XG4gICkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgIH1cbiAgfVxufTtcblxudmFyIHBsYXRmb3JtRGlyZWN0aXZlcyA9IHtcbiAgbW9kZWw6IGRpcmVjdGl2ZSxcbiAgc2hvdzogc2hvd1xufTtcblxuLyogICovXG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgYXBwZWFyOiBCb29sZWFuLFxuICBjc3M6IEJvb2xlYW4sXG4gIG1vZGU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBlbnRlckNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICBkdXJhdGlvbjogW051bWJlciwgU3RyaW5nLCBPYmplY3RdXG59O1xuXG4vLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cbi8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5mdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gIHZhciBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2bm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkge1xuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7XG4gIC8vIHByb3BzXG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcbiAgfVxuICAvLyBldmVudHMuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuICB2YXIgbGlzdGVuZXJzID0gb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyIChoLCByYXdDaGlsZCkge1xuICBpZiAoL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7XG4gICAgcmV0dXJuIGgoJ2tlZXAtYWxpdmUnLCB7XG4gICAgICBwcm9wczogcmF3Q2hpbGQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGFcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gIHdoaWxlICgodm5vZGUgPSB2bm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHZub2RlLmRhdGEudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lQ2hpbGQgKGNoaWxkLCBvbGRDaGlsZCkge1xuICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWdcbn1cblxudmFyIGlzTm90VGV4dE5vZGUgPSBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50YWcgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpOyB9O1xuXG52YXIgaXNWU2hvd0RpcmVjdGl2ZSA9IGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUgPT09ICdzaG93JzsgfTtcblxudmFyIFRyYW5zaXRpb24gPSB7XG4gIG5hbWU6ICd0cmFuc2l0aW9uJyxcbiAgcHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihpc05vdFRleHROb2RlKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZSA9IHRoaXMubW9kZTtcblxuICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG1vZGUgJiYgbW9kZSAhPT0gJ2luLW91dCcgJiYgbW9kZSAhPT0gJ291dC1pbidcbiAgICApIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAnICsgbW9kZSxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciByYXdDaGlsZCA9IGNoaWxkcmVuWzBdO1xuXG4gICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQnc1xuICAgIC8vIHBhcmVudCBjb250YWluZXIgbm9kZSBhbHNvIGhhcyB0cmFuc2l0aW9uLCBza2lwLlxuICAgIGlmIChoYXNQYXJlbnRUcmFuc2l0aW9uKHRoaXMuJHZub2RlKSkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgLy8gYXBwbHkgdHJhbnNpdGlvbiBkYXRhIHRvIGNoaWxkXG4gICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxuICAgIHZhciBjaGlsZCA9IGdldFJlYWxDaGlsZChyYXdDaGlsZCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xlYXZpbmcpIHtcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICB9XG5cbiAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvblxuICAgIC8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXNcbiAgICAvLyBkdXJpbmcgZW50ZXJpbmcuXG4gICAgdmFyIGlkID0gXCJfX3RyYW5zaXRpb24tXCIgKyAodGhpcy5fdWlkKSArIFwiLVwiO1xuICAgIGNoaWxkLmtleSA9IGNoaWxkLmtleSA9PSBudWxsXG4gICAgICA/IGNoaWxkLmlzQ29tbWVudFxuICAgICAgICA/IGlkICsgJ2NvbW1lbnQnXG4gICAgICAgIDogaWQgKyBjaGlsZC50YWdcbiAgICAgIDogaXNQcmltaXRpdmUoY2hpbGQua2V5KVxuICAgICAgICA/IChTdHJpbmcoY2hpbGQua2V5KS5pbmRleE9mKGlkKSA9PT0gMCA/IGNoaWxkLmtleSA6IGlkICsgY2hpbGQua2V5KVxuICAgICAgICA6IGNoaWxkLmtleTtcblxuICAgIHZhciBkYXRhID0gKGNoaWxkLmRhdGEgfHwgKGNoaWxkLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG4gICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XG4gICAgdmFyIG9sZENoaWxkID0gZ2V0UmVhbENoaWxkKG9sZFJhd0NoaWxkKTtcblxuICAgIC8vIG1hcmsgdi1zaG93XG4gICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG4gICAgaWYgKGNoaWxkLmRhdGEuZGlyZWN0aXZlcyAmJiBjaGlsZC5kYXRhLmRpcmVjdGl2ZXMuc29tZShpc1ZTaG93RGlyZWN0aXZlKSkge1xuICAgICAgY2hpbGQuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBvbGRDaGlsZCAmJlxuICAgICAgb2xkQ2hpbGQuZGF0YSAmJlxuICAgICAgIWlzU2FtZUNoaWxkKGNoaWxkLCBvbGRDaGlsZCkgJiZcbiAgICAgICFpc0FzeW5jUGxhY2Vob2xkZXIob2xkQ2hpbGQpICYmXG4gICAgICAvLyAjNjY4NyBjb21wb25lbnQgcm9vdCBpcyBhIGNvbW1lbnQgbm9kZVxuICAgICAgIShvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZSAmJiBvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUuaXNDb21tZW50KVxuICAgICkge1xuICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXG4gICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhXG4gICAgICB2YXIgb2xkRGF0YSA9IG9sZENoaWxkLmRhdGEudHJhbnNpdGlvbiA9IGV4dGVuZCh7fSwgZGF0YSk7XG4gICAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBtb2RlXG4gICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcbiAgICAgICAgLy8gcmV0dXJuIHBsYWNlaG9sZGVyIG5vZGUgYW5kIHF1ZXVlIHVwZGF0ZSB3aGVuIGxlYXZlIGZpbmlzaGVzXG4gICAgICAgIHRoaXMuX2xlYXZpbmcgPSB0cnVlO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnYWZ0ZXJMZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzJDEuX2xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzJDEuJGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdpbi1vdXQnKSB7XG4gICAgICAgIGlmIChpc0FzeW5jUGxhY2Vob2xkZXIoY2hpbGQpKSB7XG4gICAgICAgICAgcmV0dXJuIG9sZFJhd0NoaWxkXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGF5ZWRMZWF2ZTtcbiAgICAgICAgdmFyIHBlcmZvcm1MZWF2ZSA9IGZ1bmN0aW9uICgpIHsgZGVsYXllZExlYXZlKCk7IH07XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdhZnRlckVudGVyJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2VudGVyQ2FuY2VsbGVkJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2RlbGF5TGVhdmUnLCBmdW5jdGlvbiAobGVhdmUpIHsgZGVsYXllZExlYXZlID0gbGVhdmU7IH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByYXdDaGlsZFxuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHByb3BzID0gZXh0ZW5kKHtcbiAgdGFnOiBTdHJpbmcsXG4gIG1vdmVDbGFzczogU3RyaW5nXG59LCB0cmFuc2l0aW9uUHJvcHMpO1xuXG5kZWxldGUgcHJvcHMubW9kZTtcblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IHtcbiAgcHJvcHM6IHByb3BzLFxuXG4gIGJlZm9yZU1vdW50OiBmdW5jdGlvbiBiZWZvcmVNb3VudCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdXBkYXRlID0gdGhpcy5fdXBkYXRlO1xuICAgIHRoaXMuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2UodGhpcyQxKTtcbiAgICAgIC8vIGZvcmNlIHJlbW92aW5nIHBhc3NcbiAgICAgIHRoaXMkMS5fX3BhdGNoX18oXG4gICAgICAgIHRoaXMkMS5fdm5vZGUsXG4gICAgICAgIHRoaXMkMS5rZXB0LFxuICAgICAgICBmYWxzZSwgLy8gaHlkcmF0aW5nXG4gICAgICAgIHRydWUgLy8gcmVtb3ZlT25seSAoIWltcG9ydGFudCwgYXZvaWRzIHVubmVjZXNzYXJ5IG1vdmVzKVxuICAgICAgKTtcbiAgICAgIHRoaXMkMS5fdm5vZGUgPSB0aGlzJDEua2VwdDtcbiAgICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgICAgdXBkYXRlLmNhbGwodGhpcyQxLCB2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRhZyA9IHRoaXMudGFnIHx8IHRoaXMuJHZub2RlLmRhdGEudGFnIHx8ICdzcGFuJztcbiAgICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgIHZhciByYXdDaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgfHwgW107XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIHZhciB0cmFuc2l0aW9uRGF0YSA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gcmF3Q2hpbGRyZW5baV07XG4gICAgICBpZiAoYy50YWcpIHtcbiAgICAgICAgaWYgKGMua2V5ICE9IG51bGwgJiYgU3RyaW5nKGMua2V5KS5pbmRleE9mKCdfX3ZsaXN0JykgIT09IDApIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKGMpO1xuICAgICAgICAgIG1hcFtjLmtleV0gPSBjXG4gICAgICAgICAgOyhjLmRhdGEgfHwgKGMuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgb3B0cyA9IGMuY29tcG9uZW50T3B0aW9ucztcbiAgICAgICAgICB2YXIgbmFtZSA9IG9wdHMgPyAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZyB8fCAnJykgOiBjLnRhZztcbiAgICAgICAgICB3YXJuKChcIjx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkOiA8XCIgKyBuYW1lICsgXCI+XCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIHZhciBrZXB0ID0gW107XG4gICAgICB2YXIgcmVtb3ZlZCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgdmFyIGMkMSA9IHByZXZDaGlsZHJlbltpJDFdO1xuICAgICAgICBjJDEuZGF0YS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIGMkMS5kYXRhLnBvcyA9IGMkMS5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChtYXBbYyQxLmtleV0pIHtcbiAgICAgICAgICBrZXB0LnB1c2goYyQxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVkLnB1c2goYyQxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5rZXB0ID0gaCh0YWcsIG51bGwsIGtlcHQpO1xuICAgICAgdGhpcy5yZW1vdmVkID0gcmVtb3ZlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gaCh0YWcsIG51bGwsIGNoaWxkcmVuKVxuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cbiAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAvLyBhc3NpZ24gdG8gdGhpcyB0byBhdm9pZCBiZWluZyByZW1vdmVkIGluIHRyZWUtc2hha2luZ1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMuZGF0YS5tb3ZlZCkge1xuICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBlbCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgZWwuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZW1vdmVDbGFzcyhjbG9uZSwgY2xzKTsgfSk7XG4gICAgICB9XG4gICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMgKGMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fbW92ZUNiKSB7XG4gICAgYy5lbG0uX21vdmVDYigpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX2VudGVyQ2IpIHtcbiAgICBjLmVsbS5fZW50ZXJDYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uIChjKSB7XG4gIGMuZGF0YS5uZXdQb3MgPSBjLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbiAoYykge1xuICB2YXIgb2xkUG9zID0gYy5kYXRhLnBvcztcbiAgdmFyIG5ld1BvcyA9IGMuZGF0YS5uZXdQb3M7XG4gIHZhciBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XG4gIHZhciBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xuICBpZiAoZHggfHwgZHkpIHtcbiAgICBjLmRhdGEubW92ZWQgPSB0cnVlO1xuICAgIHZhciBzID0gYy5lbG0uc3R5bGU7XG4gICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgZHggKyBcInB4LFwiICsgZHkgKyBcInB4KVwiO1xuICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcbiAgfVxufVxuXG52YXIgcGxhdGZvcm1Db21wb25lbnRzID0ge1xuICBUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLFxuICBUcmFuc2l0aW9uR3JvdXA6IFRyYW5zaXRpb25Hcm91cFxufTtcblxuLyogICovXG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHNcblZ1ZS5jb25maWcubXVzdFVzZVByb3AgPSBtdXN0VXNlUHJvcDtcblZ1ZS5jb25maWcuaXNSZXNlcnZlZFRhZyA9IGlzUmVzZXJ2ZWRUYWc7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRBdHRyID0gaXNSZXNlcnZlZEF0dHI7XG5WdWUuY29uZmlnLmdldFRhZ05hbWVzcGFjZSA9IGdldFRhZ05hbWVzcGFjZTtcblZ1ZS5jb25maWcuaXNVbmtub3duRWxlbWVudCA9IGlzVW5rbm93bkVsZW1lbnQ7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcnVudGltZSBkaXJlY3RpdmVzICYgY29tcG9uZW50c1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmRpcmVjdGl2ZXMsIHBsYXRmb3JtRGlyZWN0aXZlcyk7XG5leHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgcGxhdGZvcm1Db21wb25lbnRzKTtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gPSBpbkJyb3dzZXIgPyBwYXRjaCA6IG5vb3A7XG5cbi8vIHB1YmxpYyBtb3VudCBtZXRob2RcblZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBpbkJyb3dzZXIgPyBxdWVyeShlbCkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBtb3VudENvbXBvbmVudCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxufTtcblxuLy8gZGV2dG9vbHMgZ2xvYmFsIGhvb2tcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAoaW5Ccm93c2VyKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChjb25maWcuZGV2dG9vbHMpIHtcbiAgICAgIGlmIChkZXZ0b29scykge1xuICAgICAgICBkZXZ0b29scy5lbWl0KCdpbml0JywgVnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0J1xuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICAgICdEb3dubG9hZCB0aGUgVnVlIERldnRvb2xzIGV4dGVuc2lvbiBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTpcXG4nICtcbiAgICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1kZXZ0b29scydcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgIGNvbmZpZy5wcm9kdWN0aW9uVGlwICE9PSBmYWxzZSAmJlxuICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgXCJZb3UgYXJlIHJ1bm5pbmcgVnVlIGluIGRldmVsb3BtZW50IG1vZGUuXFxuXCIgK1xuICAgICAgICBcIk1ha2Ugc3VyZSB0byB0dXJuIG9uIHByb2R1Y3Rpb24gbW9kZSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5cXG5cIiArXG4gICAgICAgIFwiU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWxcIlxuICAgICAgKTtcbiAgICB9XG4gIH0sIDApO1xufVxuXG4vKiAgKi9cblxudmFyIGRlZmF1bHRUYWdSRSA9IC9cXHtcXHsoKD86LnxcXHI/XFxuKSs/KVxcfVxcfS9nO1xudmFyIHJlZ2V4RXNjYXBlUkUgPSAvWy0uKis/XiR7fSgpfFtcXF1cXC9cXFxcXS9nO1xuXG52YXIgYnVpbGRSZWdleCA9IGNhY2hlZChmdW5jdGlvbiAoZGVsaW1pdGVycykge1xuICB2YXIgb3BlbiA9IGRlbGltaXRlcnNbMF0ucmVwbGFjZShyZWdleEVzY2FwZVJFLCAnXFxcXCQmJyk7XG4gIHZhciBjbG9zZSA9IGRlbGltaXRlcnNbMV0ucmVwbGFjZShyZWdleEVzY2FwZVJFLCAnXFxcXCQmJyk7XG4gIHJldHVybiBuZXcgUmVnRXhwKG9wZW4gKyAnKCg/Oi58XFxcXG4pKz8pJyArIGNsb3NlLCAnZycpXG59KTtcblxuXG5cbmZ1bmN0aW9uIHBhcnNlVGV4dCAoXG4gIHRleHQsXG4gIGRlbGltaXRlcnNcbikge1xuICB2YXIgdGFnUkUgPSBkZWxpbWl0ZXJzID8gYnVpbGRSZWdleChkZWxpbWl0ZXJzKSA6IGRlZmF1bHRUYWdSRTtcbiAgaWYgKCF0YWdSRS50ZXN0KHRleHQpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHRva2VucyA9IFtdO1xuICB2YXIgcmF3VG9rZW5zID0gW107XG4gIHZhciBsYXN0SW5kZXggPSB0YWdSRS5sYXN0SW5kZXggPSAwO1xuICB2YXIgbWF0Y2gsIGluZGV4LCB0b2tlblZhbHVlO1xuICB3aGlsZSAoKG1hdGNoID0gdGFnUkUuZXhlYyh0ZXh0KSkpIHtcbiAgICBpbmRleCA9IG1hdGNoLmluZGV4O1xuICAgIC8vIHB1c2ggdGV4dCB0b2tlblxuICAgIGlmIChpbmRleCA+IGxhc3RJbmRleCkge1xuICAgICAgcmF3VG9rZW5zLnB1c2godG9rZW5WYWx1ZSA9IHRleHQuc2xpY2UobGFzdEluZGV4LCBpbmRleCkpO1xuICAgICAgdG9rZW5zLnB1c2goSlNPTi5zdHJpbmdpZnkodG9rZW5WYWx1ZSkpO1xuICAgIH1cbiAgICAvLyB0YWcgdG9rZW5cbiAgICB2YXIgZXhwID0gcGFyc2VGaWx0ZXJzKG1hdGNoWzFdLnRyaW0oKSk7XG4gICAgdG9rZW5zLnB1c2goKFwiX3MoXCIgKyBleHAgKyBcIilcIikpO1xuICAgIHJhd1Rva2Vucy5wdXNoKHsgJ0BiaW5kaW5nJzogZXhwIH0pO1xuICAgIGxhc3RJbmRleCA9IGluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICB9XG4gIGlmIChsYXN0SW5kZXggPCB0ZXh0Lmxlbmd0aCkge1xuICAgIHJhd1Rva2Vucy5wdXNoKHRva2VuVmFsdWUgPSB0ZXh0LnNsaWNlKGxhc3RJbmRleCkpO1xuICAgIHRva2Vucy5wdXNoKEpTT04uc3RyaW5naWZ5KHRva2VuVmFsdWUpKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGV4cHJlc3Npb246IHRva2Vucy5qb2luKCcrJyksXG4gICAgdG9rZW5zOiByYXdUb2tlbnNcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gdHJhbnNmb3JtTm9kZSAoZWwsIG9wdGlvbnMpIHtcbiAgdmFyIHdhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHZhciBzdGF0aWNDbGFzcyA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdjbGFzcycpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdGF0aWNDbGFzcykge1xuICAgIHZhciByZXMgPSBwYXJzZVRleHQoc3RhdGljQ2xhc3MsIG9wdGlvbnMuZGVsaW1pdGVycyk7XG4gICAgaWYgKHJlcykge1xuICAgICAgd2FybihcbiAgICAgICAgXCJjbGFzcz1cXFwiXCIgKyBzdGF0aWNDbGFzcyArIFwiXFxcIjogXCIgK1xuICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgJ1VzZSB2LWJpbmQgb3IgdGhlIGNvbG9uIHNob3J0aGFuZCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgJyArXG4gICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgY2xhc3M9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDpjbGFzcz1cInZhbFwiPi4nLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsnY2xhc3MnXVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKHN0YXRpY0NsYXNzKSB7XG4gICAgZWwuc3RhdGljQ2xhc3MgPSBKU09OLnN0cmluZ2lmeShzdGF0aWNDbGFzcyk7XG4gIH1cbiAgdmFyIGNsYXNzQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnY2xhc3MnLCBmYWxzZSAvKiBnZXRTdGF0aWMgKi8pO1xuICBpZiAoY2xhc3NCaW5kaW5nKSB7XG4gICAgZWwuY2xhc3NCaW5kaW5nID0gY2xhc3NCaW5kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEgKGVsKSB7XG4gIHZhciBkYXRhID0gJyc7XG4gIGlmIChlbC5zdGF0aWNDbGFzcykge1xuICAgIGRhdGEgKz0gXCJzdGF0aWNDbGFzczpcIiArIChlbC5zdGF0aWNDbGFzcykgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwuY2xhc3NCaW5kaW5nKSB7XG4gICAgZGF0YSArPSBcImNsYXNzOlwiICsgKGVsLmNsYXNzQmluZGluZykgKyBcIixcIjtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG52YXIga2xhc3MkMSA9IHtcbiAgc3RhdGljS2V5czogWydzdGF0aWNDbGFzcyddLFxuICB0cmFuc2Zvcm1Ob2RlOiB0cmFuc2Zvcm1Ob2RlLFxuICBnZW5EYXRhOiBnZW5EYXRhXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdHJhbnNmb3JtTm9kZSQxIChlbCwgb3B0aW9ucykge1xuICB2YXIgd2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgdmFyIHN0YXRpY1N0eWxlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3N0eWxlJyk7XG4gIGlmIChzdGF0aWNTdHlsZSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgcmVzID0gcGFyc2VUZXh0KHN0YXRpY1N0eWxlLCBvcHRpb25zLmRlbGltaXRlcnMpO1xuICAgICAgaWYgKHJlcykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwic3R5bGU9XFxcIlwiICsgc3RhdGljU3R5bGUgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IHN0eWxlPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6c3R5bGU9XCJ2YWxcIj4uJyxcbiAgICAgICAgICBlbC5yYXdBdHRyc01hcFsnc3R5bGUnXVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBlbC5zdGF0aWNTdHlsZSA9IEpTT04uc3RyaW5naWZ5KHBhcnNlU3R5bGVUZXh0KHN0YXRpY1N0eWxlKSk7XG4gIH1cblxuICB2YXIgc3R5bGVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdzdHlsZScsIGZhbHNlIC8qIGdldFN0YXRpYyAqLyk7XG4gIGlmIChzdHlsZUJpbmRpbmcpIHtcbiAgICBlbC5zdHlsZUJpbmRpbmcgPSBzdHlsZUJpbmRpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSQxIChlbCkge1xuICB2YXIgZGF0YSA9ICcnO1xuICBpZiAoZWwuc3RhdGljU3R5bGUpIHtcbiAgICBkYXRhICs9IFwic3RhdGljU3R5bGU6XCIgKyAoZWwuc3RhdGljU3R5bGUpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLnN0eWxlQmluZGluZykge1xuICAgIGRhdGEgKz0gXCJzdHlsZTooXCIgKyAoZWwuc3R5bGVCaW5kaW5nKSArIFwiKSxcIjtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG52YXIgc3R5bGUkMSA9IHtcbiAgc3RhdGljS2V5czogWydzdGF0aWNTdHlsZSddLFxuICB0cmFuc2Zvcm1Ob2RlOiB0cmFuc2Zvcm1Ob2RlJDEsXG4gIGdlbkRhdGE6IGdlbkRhdGEkMVxufTtcblxuLyogICovXG5cbnZhciBkZWNvZGVyO1xuXG52YXIgaGUgPSB7XG4gIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlIChodG1sKSB7XG4gICAgZGVjb2RlciA9IGRlY29kZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGVjb2Rlci5pbm5lckhUTUwgPSBodG1sO1xuICAgIHJldHVybiBkZWNvZGVyLnRleHRDb250ZW50XG4gIH1cbn07XG5cbi8qICAqL1xuXG52YXIgaXNVbmFyeVRhZyA9IG1ha2VNYXAoXG4gICdhcmVhLGJhc2UsYnIsY29sLGVtYmVkLGZyYW1lLGhyLGltZyxpbnB1dCxpc2luZGV4LGtleWdlbiwnICtcbiAgJ2xpbmssbWV0YSxwYXJhbSxzb3VyY2UsdHJhY2ssd2JyJ1xuKTtcblxuLy8gRWxlbWVudHMgdGhhdCB5b3UgY2FuLCBpbnRlbnRpb25hbGx5LCBsZWF2ZSBvcGVuXG4vLyAoYW5kIHdoaWNoIGNsb3NlIHRoZW1zZWx2ZXMpXG52YXIgY2FuQmVMZWZ0T3BlblRhZyA9IG1ha2VNYXAoXG4gICdjb2xncm91cCxkZCxkdCxsaSxvcHRpb25zLHAsdGQsdGZvb3QsdGgsdGhlYWQsdHIsc291cmNlJ1xuKTtcblxuLy8gSFRNTDUgdGFncyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWwjZWxlbWVudHMtM1xuLy8gUGhyYXNpbmcgQ29udGVudCBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9kb20uaHRtbCNwaHJhc2luZy1jb250ZW50XG52YXIgaXNOb25QaHJhc2luZ1RhZyA9IG1ha2VNYXAoXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsYmFzZSxibG9ja3F1b3RlLGJvZHksY2FwdGlvbixjb2wsY29sZ3JvdXAsZGQsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxkaXYsZGwsZHQsZmllbGRzZXQsZmlnY2FwdGlvbixmaWd1cmUsZm9vdGVyLGZvcm0sJyArXG4gICdoMSxoMixoMyxoNCxoNSxoNixoZWFkLGhlYWRlcixoZ3JvdXAsaHIsaHRtbCxsZWdlbmQsbGksbWVudWl0ZW0sbWV0YSwnICtcbiAgJ29wdGdyb3VwLG9wdGlvbixwYXJhbSxycCxydCxzb3VyY2Usc3R5bGUsc3VtbWFyeSx0Ym9keSx0ZCx0Zm9vdCx0aCx0aGVhZCwnICtcbiAgJ3RpdGxlLHRyLHRyYWNrJ1xuKTtcblxuLyoqXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBpdCdzIG1vc3RseSB2ZW5kb3IgY29kZS5cbiAqL1xuXG4vLyBSZWd1bGFyIEV4cHJlc3Npb25zIGZvciBwYXJzaW5nIHRhZ3MgYW5kIGF0dHJpYnV0ZXNcbnZhciBhdHRyaWJ1dGUgPSAvXlxccyooW15cXHNcIic8PlxcLz1dKykoPzpcXHMqKD0pXFxzKig/OlwiKFteXCJdKilcIit8JyhbXiddKiknK3woW15cXHNcIic9PD5gXSspKSk/LztcbnZhciBkeW5hbWljQXJnQXR0cmlidXRlID0gL15cXHMqKCg/OnYtW1xcdy1dKzp8QHw6fCMpXFxbW149XStcXF1bXlxcc1wiJzw+XFwvPV0qKSg/OlxccyooPSlcXHMqKD86XCIoW15cIl0qKVwiK3wnKFteJ10qKScrfChbXlxcc1wiJz08PmBdKykpKT8vO1xudmFyIG5jbmFtZSA9IFwiW2EtekEtWl9dW1xcXFwtXFxcXC4wLTlfYS16QS1aXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCJdKlwiO1xudmFyIHFuYW1lQ2FwdHVyZSA9IFwiKCg/OlwiICsgbmNuYW1lICsgXCJcXFxcOik/XCIgKyBuY25hbWUgKyBcIilcIjtcbnZhciBzdGFydFRhZ09wZW4gPSBuZXcgUmVnRXhwKChcIl48XCIgKyBxbmFtZUNhcHR1cmUpKTtcbnZhciBzdGFydFRhZ0Nsb3NlID0gL15cXHMqKFxcLz8pPi87XG52YXIgZW5kVGFnID0gbmV3IFJlZ0V4cCgoXCJePFxcXFwvXCIgKyBxbmFtZUNhcHR1cmUgKyBcIltePl0qPlwiKSk7XG52YXIgZG9jdHlwZSA9IC9ePCFET0NUWVBFIFtePl0rPi9pO1xuLy8gIzcyOTg6IGVzY2FwZSAtIHRvIGF2b2lkIGJlaW5nIHBhc3NlZCBhcyBIVE1MIGNvbW1lbnQgd2hlbiBpbmxpbmVkIGluIHBhZ2VcbnZhciBjb21tZW50ID0gL148IVxcLS0vO1xudmFyIGNvbmRpdGlvbmFsQ29tbWVudCA9IC9ePCFcXFsvO1xuXG4vLyBTcGVjaWFsIEVsZW1lbnRzIChjYW4gY29udGFpbiBhbnl0aGluZylcbnZhciBpc1BsYWluVGV4dEVsZW1lbnQgPSBtYWtlTWFwKCdzY3JpcHQsc3R5bGUsdGV4dGFyZWEnLCB0cnVlKTtcbnZhciByZUNhY2hlID0ge307XG5cbnZhciBkZWNvZGluZ01hcCA9IHtcbiAgJyZsdDsnOiAnPCcsXG4gICcmZ3Q7JzogJz4nLFxuICAnJnF1b3Q7JzogJ1wiJyxcbiAgJyZhbXA7JzogJyYnLFxuICAnJiMxMDsnOiAnXFxuJyxcbiAgJyYjOTsnOiAnXFx0JyxcbiAgJyYjMzk7JzogXCInXCJcbn07XG52YXIgZW5jb2RlZEF0dHIgPSAvJig/Omx0fGd0fHF1b3R8YW1wfCMzOSk7L2c7XG52YXIgZW5jb2RlZEF0dHJXaXRoTmV3TGluZXMgPSAvJig/Omx0fGd0fHF1b3R8YW1wfCMzOXwjMTB8IzkpOy9nO1xuXG4vLyAjNTk5MlxudmFyIGlzSWdub3JlTmV3bGluZVRhZyA9IG1ha2VNYXAoJ3ByZSx0ZXh0YXJlYScsIHRydWUpO1xudmFyIHNob3VsZElnbm9yZUZpcnN0TmV3bGluZSA9IGZ1bmN0aW9uICh0YWcsIGh0bWwpIHsgcmV0dXJuIHRhZyAmJiBpc0lnbm9yZU5ld2xpbmVUYWcodGFnKSAmJiBodG1sWzBdID09PSAnXFxuJzsgfTtcblxuZnVuY3Rpb24gZGVjb2RlQXR0ciAodmFsdWUsIHNob3VsZERlY29kZU5ld2xpbmVzKSB7XG4gIHZhciByZSA9IHNob3VsZERlY29kZU5ld2xpbmVzID8gZW5jb2RlZEF0dHJXaXRoTmV3TGluZXMgOiBlbmNvZGVkQXR0cjtcbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UocmUsIGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gZGVjb2RpbmdNYXBbbWF0Y2hdOyB9KVxufVxuXG5mdW5jdGlvbiBwYXJzZUhUTUwgKGh0bWwsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YWNrID0gW107XG4gIHZhciBleHBlY3RIVE1MID0gb3B0aW9ucy5leHBlY3RIVE1MO1xuICB2YXIgaXNVbmFyeVRhZyQkMSA9IG9wdGlvbnMuaXNVbmFyeVRhZyB8fCBubztcbiAgdmFyIGNhbkJlTGVmdE9wZW5UYWckJDEgPSBvcHRpb25zLmNhbkJlTGVmdE9wZW5UYWcgfHwgbm87XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0LCBsYXN0VGFnO1xuICB3aGlsZSAoaHRtbCkge1xuICAgIGxhc3QgPSBodG1sO1xuICAgIC8vIE1ha2Ugc3VyZSB3ZSdyZSBub3QgaW4gYSBwbGFpbnRleHQgY29udGVudCBlbGVtZW50IGxpa2Ugc2NyaXB0L3N0eWxlXG4gICAgaWYgKCFsYXN0VGFnIHx8ICFpc1BsYWluVGV4dEVsZW1lbnQobGFzdFRhZykpIHtcbiAgICAgIHZhciB0ZXh0RW5kID0gaHRtbC5pbmRleE9mKCc8Jyk7XG4gICAgICBpZiAodGV4dEVuZCA9PT0gMCkge1xuICAgICAgICAvLyBDb21tZW50OlxuICAgICAgICBpZiAoY29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgdmFyIGNvbW1lbnRFbmQgPSBodG1sLmluZGV4T2YoJy0tPicpO1xuXG4gICAgICAgICAgaWYgKGNvbW1lbnRFbmQgPj0gMCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvdWxkS2VlcENvbW1lbnQpIHtcbiAgICAgICAgICAgICAgb3B0aW9ucy5jb21tZW50KGh0bWwuc3Vic3RyaW5nKDQsIGNvbW1lbnRFbmQpLCBpbmRleCwgaW5kZXggKyBjb21tZW50RW5kICsgMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZHZhbmNlKGNvbW1lbnRFbmQgKyAzKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db25kaXRpb25hbF9jb21tZW50I0Rvd25sZXZlbC1yZXZlYWxlZF9jb25kaXRpb25hbF9jb21tZW50XG4gICAgICAgIGlmIChjb25kaXRpb25hbENvbW1lbnQudGVzdChodG1sKSkge1xuICAgICAgICAgIHZhciBjb25kaXRpb25hbEVuZCA9IGh0bWwuaW5kZXhPZignXT4nKTtcblxuICAgICAgICAgIGlmIChjb25kaXRpb25hbEVuZCA+PSAwKSB7XG4gICAgICAgICAgICBhZHZhbmNlKGNvbmRpdGlvbmFsRW5kICsgMik7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERvY3R5cGU6XG4gICAgICAgIHZhciBkb2N0eXBlTWF0Y2ggPSBodG1sLm1hdGNoKGRvY3R5cGUpO1xuICAgICAgICBpZiAoZG9jdHlwZU1hdGNoKSB7XG4gICAgICAgICAgYWR2YW5jZShkb2N0eXBlTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRW5kIHRhZzpcbiAgICAgICAgdmFyIGVuZFRhZ01hdGNoID0gaHRtbC5tYXRjaChlbmRUYWcpO1xuICAgICAgICBpZiAoZW5kVGFnTWF0Y2gpIHtcbiAgICAgICAgICB2YXIgY3VySW5kZXggPSBpbmRleDtcbiAgICAgICAgICBhZHZhbmNlKGVuZFRhZ01hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgcGFyc2VFbmRUYWcoZW5kVGFnTWF0Y2hbMV0sIGN1ckluZGV4LCBpbmRleCk7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0YXJ0IHRhZzpcbiAgICAgICAgdmFyIHN0YXJ0VGFnTWF0Y2ggPSBwYXJzZVN0YXJ0VGFnKCk7XG4gICAgICAgIGlmIChzdGFydFRhZ01hdGNoKSB7XG4gICAgICAgICAgaGFuZGxlU3RhcnRUYWcoc3RhcnRUYWdNYXRjaCk7XG4gICAgICAgICAgaWYgKHNob3VsZElnbm9yZUZpcnN0TmV3bGluZShzdGFydFRhZ01hdGNoLnRhZ05hbWUsIGh0bWwpKSB7XG4gICAgICAgICAgICBhZHZhbmNlKDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZXh0ID0gKHZvaWQgMCksIHJlc3QgPSAodm9pZCAwKSwgbmV4dCA9ICh2b2lkIDApO1xuICAgICAgaWYgKHRleHRFbmQgPj0gMCkge1xuICAgICAgICByZXN0ID0gaHRtbC5zbGljZSh0ZXh0RW5kKTtcbiAgICAgICAgd2hpbGUgKFxuICAgICAgICAgICFlbmRUYWcudGVzdChyZXN0KSAmJlxuICAgICAgICAgICFzdGFydFRhZ09wZW4udGVzdChyZXN0KSAmJlxuICAgICAgICAgICFjb21tZW50LnRlc3QocmVzdCkgJiZcbiAgICAgICAgICAhY29uZGl0aW9uYWxDb21tZW50LnRlc3QocmVzdClcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gPCBpbiBwbGFpbiB0ZXh0LCBiZSBmb3JnaXZpbmcgYW5kIHRyZWF0IGl0IGFzIHRleHRcbiAgICAgICAgICBuZXh0ID0gcmVzdC5pbmRleE9mKCc8JywgMSk7XG4gICAgICAgICAgaWYgKG5leHQgPCAwKSB7IGJyZWFrIH1cbiAgICAgICAgICB0ZXh0RW5kICs9IG5leHQ7XG4gICAgICAgICAgcmVzdCA9IGh0bWwuc2xpY2UodGV4dEVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGV4dCA9IGh0bWwuc3Vic3RyaW5nKDAsIHRleHRFbmQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGV4dEVuZCA8IDApIHtcbiAgICAgICAgdGV4dCA9IGh0bWw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgIGFkdmFuY2UodGV4dC5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5jaGFycyAmJiB0ZXh0KSB7XG4gICAgICAgIG9wdGlvbnMuY2hhcnModGV4dCwgaW5kZXggLSB0ZXh0Lmxlbmd0aCwgaW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZW5kVGFnTGVuZ3RoID0gMDtcbiAgICAgIHZhciBzdGFja2VkVGFnID0gbGFzdFRhZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIHJlU3RhY2tlZFRhZyA9IHJlQ2FjaGVbc3RhY2tlZFRhZ10gfHwgKHJlQ2FjaGVbc3RhY2tlZFRhZ10gPSBuZXcgUmVnRXhwKCcoW1xcXFxzXFxcXFNdKj8pKDwvJyArIHN0YWNrZWRUYWcgKyAnW14+XSo+KScsICdpJykpO1xuICAgICAgdmFyIHJlc3QkMSA9IGh0bWwucmVwbGFjZShyZVN0YWNrZWRUYWcsIGZ1bmN0aW9uIChhbGwsIHRleHQsIGVuZFRhZykge1xuICAgICAgICBlbmRUYWdMZW5ndGggPSBlbmRUYWcubGVuZ3RoO1xuICAgICAgICBpZiAoIWlzUGxhaW5UZXh0RWxlbWVudChzdGFja2VkVGFnKSAmJiBzdGFja2VkVGFnICE9PSAnbm9zY3JpcHQnKSB7XG4gICAgICAgICAgdGV4dCA9IHRleHRcbiAgICAgICAgICAgIC5yZXBsYWNlKC88IVxcLS0oW1xcc1xcU10qPyktLT4vZywgJyQxJykgLy8gIzcyOThcbiAgICAgICAgICAgIC5yZXBsYWNlKC88IVxcW0NEQVRBXFxbKFtcXHNcXFNdKj8pXV0+L2csICckMScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUoc3RhY2tlZFRhZywgdGV4dCkpIHtcbiAgICAgICAgICB0ZXh0ID0gdGV4dC5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5jaGFycykge1xuICAgICAgICAgIG9wdGlvbnMuY2hhcnModGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnXG4gICAgICB9KTtcbiAgICAgIGluZGV4ICs9IGh0bWwubGVuZ3RoIC0gcmVzdCQxLmxlbmd0aDtcbiAgICAgIGh0bWwgPSByZXN0JDE7XG4gICAgICBwYXJzZUVuZFRhZyhzdGFja2VkVGFnLCBpbmRleCAtIGVuZFRhZ0xlbmd0aCwgaW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChodG1sID09PSBsYXN0KSB7XG4gICAgICBvcHRpb25zLmNoYXJzICYmIG9wdGlvbnMuY2hhcnMoaHRtbCk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc3RhY2subGVuZ3RoICYmIG9wdGlvbnMud2Fybikge1xuICAgICAgICBvcHRpb25zLndhcm4oKFwiTWFsLWZvcm1hdHRlZCB0YWcgYXQgZW5kIG9mIHRlbXBsYXRlOiBcXFwiXCIgKyBodG1sICsgXCJcXFwiXCIpLCB7IHN0YXJ0OiBpbmRleCArIGh0bWwubGVuZ3RoIH0pO1xuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICAvLyBDbGVhbiB1cCBhbnkgcmVtYWluaW5nIHRhZ3NcbiAgcGFyc2VFbmRUYWcoKTtcblxuICBmdW5jdGlvbiBhZHZhbmNlIChuKSB7XG4gICAgaW5kZXggKz0gbjtcbiAgICBodG1sID0gaHRtbC5zdWJzdHJpbmcobik7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVN0YXJ0VGFnICgpIHtcbiAgICB2YXIgc3RhcnQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnT3Blbik7XG4gICAgaWYgKHN0YXJ0KSB7XG4gICAgICB2YXIgbWF0Y2ggPSB7XG4gICAgICAgIHRhZ05hbWU6IHN0YXJ0WzFdLFxuICAgICAgICBhdHRyczogW10sXG4gICAgICAgIHN0YXJ0OiBpbmRleFxuICAgICAgfTtcbiAgICAgIGFkdmFuY2Uoc3RhcnRbMF0ubGVuZ3RoKTtcbiAgICAgIHZhciBlbmQsIGF0dHI7XG4gICAgICB3aGlsZSAoIShlbmQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnQ2xvc2UpKSAmJiAoYXR0ciA9IGh0bWwubWF0Y2goZHluYW1pY0FyZ0F0dHJpYnV0ZSkgfHwgaHRtbC5tYXRjaChhdHRyaWJ1dGUpKSkge1xuICAgICAgICBhdHRyLnN0YXJ0ID0gaW5kZXg7XG4gICAgICAgIGFkdmFuY2UoYXR0clswXS5sZW5ndGgpO1xuICAgICAgICBhdHRyLmVuZCA9IGluZGV4O1xuICAgICAgICBtYXRjaC5hdHRycy5wdXNoKGF0dHIpO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCkge1xuICAgICAgICBtYXRjaC51bmFyeVNsYXNoID0gZW5kWzFdO1xuICAgICAgICBhZHZhbmNlKGVuZFswXS5sZW5ndGgpO1xuICAgICAgICBtYXRjaC5lbmQgPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIG1hdGNoXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3RhcnRUYWcgKG1hdGNoKSB7XG4gICAgdmFyIHRhZ05hbWUgPSBtYXRjaC50YWdOYW1lO1xuICAgIHZhciB1bmFyeVNsYXNoID0gbWF0Y2gudW5hcnlTbGFzaDtcblxuICAgIGlmIChleHBlY3RIVE1MKSB7XG4gICAgICBpZiAobGFzdFRhZyA9PT0gJ3AnICYmIGlzTm9uUGhyYXNpbmdUYWcodGFnTmFtZSkpIHtcbiAgICAgICAgcGFyc2VFbmRUYWcobGFzdFRhZyk7XG4gICAgICB9XG4gICAgICBpZiAoY2FuQmVMZWZ0T3BlblRhZyQkMSh0YWdOYW1lKSAmJiBsYXN0VGFnID09PSB0YWdOYW1lKSB7XG4gICAgICAgIHBhcnNlRW5kVGFnKHRhZ05hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1bmFyeSA9IGlzVW5hcnlUYWckJDEodGFnTmFtZSkgfHwgISF1bmFyeVNsYXNoO1xuXG4gICAgdmFyIGwgPSBtYXRjaC5hdHRycy5sZW5ndGg7XG4gICAgdmFyIGF0dHJzID0gbmV3IEFycmF5KGwpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgYXJncyA9IG1hdGNoLmF0dHJzW2ldO1xuICAgICAgdmFyIHZhbHVlID0gYXJnc1szXSB8fCBhcmdzWzRdIHx8IGFyZ3NbNV0gfHwgJyc7XG4gICAgICB2YXIgc2hvdWxkRGVjb2RlTmV3bGluZXMgPSB0YWdOYW1lID09PSAnYScgJiYgYXJnc1sxXSA9PT0gJ2hyZWYnXG4gICAgICAgID8gb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWZcbiAgICAgICAgOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzO1xuICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgIG5hbWU6IGFyZ3NbMV0sXG4gICAgICAgIHZhbHVlOiBkZWNvZGVBdHRyKHZhbHVlLCBzaG91bGREZWNvZGVOZXdsaW5lcylcbiAgICAgIH07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgIGF0dHJzW2ldLnN0YXJ0ID0gYXJncy5zdGFydCArIGFyZ3NbMF0ubWF0Y2goL15cXHMqLykubGVuZ3RoO1xuICAgICAgICBhdHRyc1tpXS5lbmQgPSBhcmdzLmVuZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXVuYXJ5KSB7XG4gICAgICBzdGFjay5wdXNoKHsgdGFnOiB0YWdOYW1lLCBsb3dlckNhc2VkVGFnOiB0YWdOYW1lLnRvTG93ZXJDYXNlKCksIGF0dHJzOiBhdHRycywgc3RhcnQ6IG1hdGNoLnN0YXJ0LCBlbmQ6IG1hdGNoLmVuZCB9KTtcbiAgICAgIGxhc3RUYWcgPSB0YWdOYW1lO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIGF0dHJzLCB1bmFyeSwgbWF0Y2guc3RhcnQsIG1hdGNoLmVuZCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VFbmRUYWcgKHRhZ05hbWUsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgcG9zLCBsb3dlckNhc2VkVGFnTmFtZTtcbiAgICBpZiAoc3RhcnQgPT0gbnVsbCkgeyBzdGFydCA9IGluZGV4OyB9XG4gICAgaWYgKGVuZCA9PSBudWxsKSB7IGVuZCA9IGluZGV4OyB9XG5cbiAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IG9wZW5lZCB0YWcgb2YgdGhlIHNhbWUgdHlwZVxuICAgIGlmICh0YWdOYW1lKSB7XG4gICAgICBsb3dlckNhc2VkVGFnTmFtZSA9IHRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGZvciAocG9zID0gc3RhY2subGVuZ3RoIC0gMTsgcG9zID49IDA7IHBvcy0tKSB7XG4gICAgICAgIGlmIChzdGFja1twb3NdLmxvd2VyQ2FzZWRUYWcgPT09IGxvd2VyQ2FzZWRUYWdOYW1lKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBubyB0YWcgbmFtZSBpcyBwcm92aWRlZCwgY2xlYW4gc2hvcFxuICAgICAgcG9zID0gMDtcbiAgICB9XG5cbiAgICBpZiAocG9zID49IDApIHtcbiAgICAgIC8vIENsb3NlIGFsbCB0aGUgb3BlbiBlbGVtZW50cywgdXAgdGhlIHN0YWNrXG4gICAgICBmb3IgKHZhciBpID0gc3RhY2subGVuZ3RoIC0gMTsgaSA+PSBwb3M7IGktLSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgIChpID4gcG9zIHx8ICF0YWdOYW1lKSAmJlxuICAgICAgICAgIG9wdGlvbnMud2FyblxuICAgICAgICApIHtcbiAgICAgICAgICBvcHRpb25zLndhcm4oXG4gICAgICAgICAgICAoXCJ0YWcgPFwiICsgKHN0YWNrW2ldLnRhZykgKyBcIj4gaGFzIG5vIG1hdGNoaW5nIGVuZCB0YWcuXCIpLFxuICAgICAgICAgICAgeyBzdGFydDogc3RhY2tbaV0uc3RhcnQsIGVuZDogc3RhY2tbaV0uZW5kIH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmVuZCkge1xuICAgICAgICAgIG9wdGlvbnMuZW5kKHN0YWNrW2ldLnRhZywgc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIHRoZSBvcGVuIGVsZW1lbnRzIGZyb20gdGhlIHN0YWNrXG4gICAgICBzdGFjay5sZW5ndGggPSBwb3M7XG4gICAgICBsYXN0VGFnID0gcG9zICYmIHN0YWNrW3BvcyAtIDFdLnRhZztcbiAgICB9IGVsc2UgaWYgKGxvd2VyQ2FzZWRUYWdOYW1lID09PSAnYnInKSB7XG4gICAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuICAgICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIFtdLCB0cnVlLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxvd2VyQ2FzZWRUYWdOYW1lID09PSAncCcpIHtcbiAgICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgW10sIGZhbHNlLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmVuZCkge1xuICAgICAgICBvcHRpb25zLmVuZCh0YWdOYW1lLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBvblJFID0gL15AfF52LW9uOi87XG52YXIgZGlyUkUgPSAvXnYtfF5AfF46fF4jLztcbnZhciBmb3JBbGlhc1JFID0gLyhbXFxzXFxTXSo/KVxccysoPzppbnxvZilcXHMrKFtcXHNcXFNdKikvO1xudmFyIGZvckl0ZXJhdG9yUkUgPSAvLChbXixcXH1cXF1dKikoPzosKFteLFxcfVxcXV0qKSk/JC87XG52YXIgc3RyaXBQYXJlbnNSRSA9IC9eXFwofFxcKSQvZztcbnZhciBkeW5hbWljQXJnUkUgPSAvXlxcWy4qXFxdJC87XG5cbnZhciBhcmdSRSA9IC86KC4qKSQvO1xudmFyIGJpbmRSRSA9IC9eOnxeXFwufF52LWJpbmQ6LztcbnZhciBtb2RpZmllclJFID0gL1xcLlteLlxcXV0rKD89W15cXF1dKiQpL2c7XG5cbnZhciBzbG90UkUgPSAvXnYtc2xvdCg6fCQpfF4jLztcblxudmFyIGxpbmVCcmVha1JFID0gL1tcXHJcXG5dLztcbnZhciB3aGl0ZXNwYWNlUkUkMSA9IC9cXHMrL2c7XG5cbnZhciBpbnZhbGlkQXR0cmlidXRlUkUgPSAvW1xcc1wiJzw+XFwvPV0vO1xuXG52YXIgZGVjb2RlSFRNTENhY2hlZCA9IGNhY2hlZChoZS5kZWNvZGUpO1xuXG52YXIgZW1wdHlTbG90U2NvcGVUb2tlbiA9IFwiX2VtcHR5X1wiO1xuXG4vLyBjb25maWd1cmFibGUgc3RhdGVcbnZhciB3YXJuJDI7XG52YXIgZGVsaW1pdGVycztcbnZhciB0cmFuc2Zvcm1zO1xudmFyIHByZVRyYW5zZm9ybXM7XG52YXIgcG9zdFRyYW5zZm9ybXM7XG52YXIgcGxhdGZvcm1Jc1ByZVRhZztcbnZhciBwbGF0Zm9ybU11c3RVc2VQcm9wO1xudmFyIHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlO1xudmFyIG1heWJlQ29tcG9uZW50O1xuXG5mdW5jdGlvbiBjcmVhdGVBU1RFbGVtZW50IChcbiAgdGFnLFxuICBhdHRycyxcbiAgcGFyZW50XG4pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAxLFxuICAgIHRhZzogdGFnLFxuICAgIGF0dHJzTGlzdDogYXR0cnMsXG4gICAgYXR0cnNNYXA6IG1ha2VBdHRyc01hcChhdHRycyksXG4gICAgcmF3QXR0cnNNYXA6IHt9LFxuICAgIHBhcmVudDogcGFyZW50LFxuICAgIGNoaWxkcmVuOiBbXVxuICB9XG59XG5cbi8qKlxuICogQ29udmVydCBIVE1MIHN0cmluZyB0byBBU1QuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChcbiAgdGVtcGxhdGUsXG4gIG9wdGlvbnNcbikge1xuICB3YXJuJDIgPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG5cbiAgcGxhdGZvcm1Jc1ByZVRhZyA9IG9wdGlvbnMuaXNQcmVUYWcgfHwgbm87XG4gIHBsYXRmb3JtTXVzdFVzZVByb3AgPSBvcHRpb25zLm11c3RVc2VQcm9wIHx8IG5vO1xuICBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSA9IG9wdGlvbnMuZ2V0VGFnTmFtZXNwYWNlIHx8IG5vO1xuICB2YXIgaXNSZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgbWF5YmVDb21wb25lbnQgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICEhZWwuY29tcG9uZW50IHx8ICFpc1Jlc2VydmVkVGFnKGVsLnRhZyk7IH07XG5cbiAgdHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtTm9kZScpO1xuICBwcmVUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwcmVUcmFuc2Zvcm1Ob2RlJyk7XG4gIHBvc3RUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwb3N0VHJhbnNmb3JtTm9kZScpO1xuXG4gIGRlbGltaXRlcnMgPSBvcHRpb25zLmRlbGltaXRlcnM7XG5cbiAgdmFyIHN0YWNrID0gW107XG4gIHZhciBwcmVzZXJ2ZVdoaXRlc3BhY2UgPSBvcHRpb25zLnByZXNlcnZlV2hpdGVzcGFjZSAhPT0gZmFsc2U7XG4gIHZhciB3aGl0ZXNwYWNlT3B0aW9uID0gb3B0aW9ucy53aGl0ZXNwYWNlO1xuICB2YXIgcm9vdDtcbiAgdmFyIGN1cnJlbnRQYXJlbnQ7XG4gIHZhciBpblZQcmUgPSBmYWxzZTtcbiAgdmFyIGluUHJlID0gZmFsc2U7XG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiB3YXJuT25jZSAobXNnLCByYW5nZSkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgd2FybiQyKG1zZywgcmFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlRWxlbWVudCAoZWxlbWVudCkge1xuICAgIHRyaW1FbmRpbmdXaGl0ZXNwYWNlKGVsZW1lbnQpO1xuICAgIGlmICghaW5WUHJlICYmICFlbGVtZW50LnByb2Nlc3NlZCkge1xuICAgICAgZWxlbWVudCA9IHByb2Nlc3NFbGVtZW50KGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvLyB0cmVlIG1hbmFnZW1lbnRcbiAgICBpZiAoIXN0YWNrLmxlbmd0aCAmJiBlbGVtZW50ICE9PSByb290KSB7XG4gICAgICAvLyBhbGxvdyByb290IGVsZW1lbnRzIHdpdGggdi1pZiwgdi1lbHNlLWlmIGFuZCB2LWVsc2VcbiAgICAgIGlmIChyb290LmlmICYmIChlbGVtZW50LmVsc2VpZiB8fCBlbGVtZW50LmVsc2UpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY2hlY2tSb290Q29uc3RyYWludHMoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkSWZDb25kaXRpb24ocm9vdCwge1xuICAgICAgICAgIGV4cDogZWxlbWVudC5lbHNlaWYsXG4gICAgICAgICAgYmxvY2s6IGVsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgXCJDb21wb25lbnQgdGVtcGxhdGUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiBcIiArXG4gICAgICAgICAgXCJJZiB5b3UgYXJlIHVzaW5nIHYtaWYgb24gbXVsdGlwbGUgZWxlbWVudHMsIFwiICtcbiAgICAgICAgICBcInVzZSB2LWVsc2UtaWYgdG8gY2hhaW4gdGhlbSBpbnN0ZWFkLlwiLFxuICAgICAgICAgIHsgc3RhcnQ6IGVsZW1lbnQuc3RhcnQgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY3VycmVudFBhcmVudCAmJiAhZWxlbWVudC5mb3JiaWRkZW4pIHtcbiAgICAgIGlmIChlbGVtZW50LmVsc2VpZiB8fCBlbGVtZW50LmVsc2UpIHtcbiAgICAgICAgcHJvY2Vzc0lmQ29uZGl0aW9ucyhlbGVtZW50LCBjdXJyZW50UGFyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChlbGVtZW50LnNsb3RTY29wZSkge1xuICAgICAgICAgIC8vIHNjb3BlZCBzbG90XG4gICAgICAgICAgLy8ga2VlcCBpdCBpbiB0aGUgY2hpbGRyZW4gbGlzdCBzbyB0aGF0IHYtZWxzZSgtaWYpIGNvbmRpdGlvbnMgY2FuXG4gICAgICAgICAgLy8gZmluZCBpdCBhcyB0aGUgcHJldiBub2RlLlxuICAgICAgICAgIHZhciBuYW1lID0gZWxlbWVudC5zbG90VGFyZ2V0IHx8ICdcImRlZmF1bHRcIidcbiAgICAgICAgICA7KGN1cnJlbnRQYXJlbnQuc2NvcGVkU2xvdHMgfHwgKGN1cnJlbnRQYXJlbnQuc2NvcGVkU2xvdHMgPSB7fSkpW25hbWVdID0gZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50UGFyZW50LmNoaWxkcmVuLnB1c2goZWxlbWVudCk7XG4gICAgICAgIGVsZW1lbnQucGFyZW50ID0gY3VycmVudFBhcmVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmaW5hbCBjaGlsZHJlbiBjbGVhbnVwXG4gICAgLy8gZmlsdGVyIG91dCBzY29wZWQgc2xvdHNcbiAgICBlbGVtZW50LmNoaWxkcmVuID0gZWxlbWVudC5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuICEoYykuc2xvdFNjb3BlOyB9KTtcbiAgICAvLyByZW1vdmUgdHJhaWxpbmcgd2hpdGVzcGFjZSBub2RlIGFnYWluXG4gICAgdHJpbUVuZGluZ1doaXRlc3BhY2UoZWxlbWVudCk7XG5cbiAgICAvLyBjaGVjayBwcmUgc3RhdGVcbiAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgIGluVlByZSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpIHtcbiAgICAgIGluUHJlID0gZmFsc2U7XG4gICAgfVxuICAgIC8vIGFwcGx5IHBvc3QtdHJhbnNmb3Jtc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zdFRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHBvc3RUcmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRyaW1FbmRpbmdXaGl0ZXNwYWNlIChlbCkge1xuICAgIC8vIHJlbW92ZSB0cmFpbGluZyB3aGl0ZXNwYWNlIG5vZGVcbiAgICBpZiAoIWluUHJlKSB7XG4gICAgICB2YXIgbGFzdE5vZGU7XG4gICAgICB3aGlsZSAoXG4gICAgICAgIChsYXN0Tm9kZSA9IGVsLmNoaWxkcmVuW2VsLmNoaWxkcmVuLmxlbmd0aCAtIDFdKSAmJlxuICAgICAgICBsYXN0Tm9kZS50eXBlID09PSAzICYmXG4gICAgICAgIGxhc3ROb2RlLnRleHQgPT09ICcgJ1xuICAgICAgKSB7XG4gICAgICAgIGVsLmNoaWxkcmVuLnBvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrUm9vdENvbnN0cmFpbnRzIChlbCkge1xuICAgIGlmIChlbC50YWcgPT09ICdzbG90JyB8fCBlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHdhcm5PbmNlKFxuICAgICAgICBcIkNhbm5vdCB1c2UgPFwiICsgKGVsLnRhZykgKyBcIj4gYXMgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlIGl0IG1heSBcIiArXG4gICAgICAgICdjb250YWluIG11bHRpcGxlIG5vZGVzLicsXG4gICAgICAgIHsgc3RhcnQ6IGVsLnN0YXJ0IH1cbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChlbC5hdHRyc01hcC5oYXNPd25Qcm9wZXJ0eSgndi1mb3InKSkge1xuICAgICAgd2Fybk9uY2UoXG4gICAgICAgICdDYW5ub3QgdXNlIHYtZm9yIG9uIHN0YXRlZnVsIGNvbXBvbmVudCByb290IGVsZW1lbnQgYmVjYXVzZSAnICtcbiAgICAgICAgJ2l0IHJlbmRlcnMgbXVsdGlwbGUgZWxlbWVudHMuJyxcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtZm9yJ11cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcGFyc2VIVE1MKHRlbXBsYXRlLCB7XG4gICAgd2Fybjogd2FybiQyLFxuICAgIGV4cGVjdEhUTUw6IG9wdGlvbnMuZXhwZWN0SFRNTCxcbiAgICBpc1VuYXJ5VGFnOiBvcHRpb25zLmlzVW5hcnlUYWcsXG4gICAgY2FuQmVMZWZ0T3BlblRhZzogb3B0aW9ucy5jYW5CZUxlZnRPcGVuVGFnLFxuICAgIHNob3VsZERlY29kZU5ld2xpbmVzOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzLFxuICAgIHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZjogb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWYsXG4gICAgc2hvdWxkS2VlcENvbW1lbnQ6IG9wdGlvbnMuY29tbWVudHMsXG4gICAgb3V0cHV0U291cmNlUmFuZ2U6IG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UsXG4gICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0ICh0YWcsIGF0dHJzLCB1bmFyeSwgc3RhcnQkMSwgZW5kKSB7XG4gICAgICAvLyBjaGVjayBuYW1lc3BhY2UuXG4gICAgICAvLyBpbmhlcml0IHBhcmVudCBucyBpZiB0aGVyZSBpcyBvbmVcbiAgICAgIHZhciBucyA9IChjdXJyZW50UGFyZW50ICYmIGN1cnJlbnRQYXJlbnQubnMpIHx8IHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlKHRhZyk7XG5cbiAgICAgIC8vIGhhbmRsZSBJRSBzdmcgYnVnXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpc0lFICYmIG5zID09PSAnc3ZnJykge1xuICAgICAgICBhdHRycyA9IGd1YXJkSUVTVkdCdWcoYXR0cnMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxlbWVudCA9IGNyZWF0ZUFTVEVsZW1lbnQodGFnLCBhdHRycywgY3VycmVudFBhcmVudCk7XG4gICAgICBpZiAobnMpIHtcbiAgICAgICAgZWxlbWVudC5ucyA9IG5zO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGVsZW1lbnQuc3RhcnQgPSBzdGFydCQxO1xuICAgICAgICAgIGVsZW1lbnQuZW5kID0gZW5kO1xuICAgICAgICAgIGVsZW1lbnQucmF3QXR0cnNNYXAgPSBlbGVtZW50LmF0dHJzTGlzdC5yZWR1Y2UoZnVuY3Rpb24gKGN1bXVsYXRlZCwgYXR0cikge1xuICAgICAgICAgICAgY3VtdWxhdGVkW2F0dHIubmFtZV0gPSBhdHRyO1xuICAgICAgICAgICAgcmV0dXJuIGN1bXVsYXRlZFxuICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgfVxuICAgICAgICBhdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICAgICAgaWYgKGludmFsaWRBdHRyaWJ1dGVSRS50ZXN0KGF0dHIubmFtZSkpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgXCJJbnZhbGlkIGR5bmFtaWMgYXJndW1lbnQgZXhwcmVzc2lvbjogYXR0cmlidXRlIG5hbWVzIGNhbm5vdCBjb250YWluIFwiICtcbiAgICAgICAgICAgICAgXCJzcGFjZXMsIHF1b3RlcywgPCwgPiwgLyBvciA9LlwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IGF0dHIuc3RhcnQgKyBhdHRyLm5hbWUuaW5kZXhPZihcIltcIiksXG4gICAgICAgICAgICAgICAgZW5kOiBhdHRyLnN0YXJ0ICsgYXR0ci5uYW1lLmxlbmd0aFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0ZvcmJpZGRlblRhZyhlbGVtZW50KSAmJiAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSkge1xuICAgICAgICBlbGVtZW50LmZvcmJpZGRlbiA9IHRydWU7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybiQyKFxuICAgICAgICAgICdUZW1wbGF0ZXMgc2hvdWxkIG9ubHkgYmUgcmVzcG9uc2libGUgZm9yIG1hcHBpbmcgdGhlIHN0YXRlIHRvIHRoZSAnICtcbiAgICAgICAgICAnVUkuIEF2b2lkIHBsYWNpbmcgdGFncyB3aXRoIHNpZGUtZWZmZWN0cyBpbiB5b3VyIHRlbXBsYXRlcywgc3VjaCBhcyAnICtcbiAgICAgICAgICBcIjxcIiArIHRhZyArIFwiPlwiICsgJywgYXMgdGhleSB3aWxsIG5vdCBiZSBwYXJzZWQuJyxcbiAgICAgICAgICB7IHN0YXJ0OiBlbGVtZW50LnN0YXJ0IH1cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgcHJlLXRyYW5zZm9ybXNcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlVHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBlbGVtZW50ID0gcHJlVHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKSB8fCBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWluVlByZSkge1xuICAgICAgICBwcm9jZXNzUHJlKGVsZW1lbnQpO1xuICAgICAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgICAgICBpblZQcmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpIHtcbiAgICAgICAgaW5QcmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGluVlByZSkge1xuICAgICAgICBwcm9jZXNzUmF3QXR0cnMoZWxlbWVudCk7XG4gICAgICB9IGVsc2UgaWYgKCFlbGVtZW50LnByb2Nlc3NlZCkge1xuICAgICAgICAvLyBzdHJ1Y3R1cmFsIGRpcmVjdGl2ZXNcbiAgICAgICAgcHJvY2Vzc0ZvcihlbGVtZW50KTtcbiAgICAgICAgcHJvY2Vzc0lmKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzT25jZShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyb290KSB7XG4gICAgICAgIHJvb3QgPSBlbGVtZW50O1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKHJvb3QpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdW5hcnkpIHtcbiAgICAgICAgY3VycmVudFBhcmVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHN0YWNrLnB1c2goZWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9zZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGVuZDogZnVuY3Rpb24gZW5kICh0YWcsIHN0YXJ0LCBlbmQkMSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIC8vIHBvcCBzdGFja1xuICAgICAgc3RhY2subGVuZ3RoIC09IDE7XG4gICAgICBjdXJyZW50UGFyZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgIGVsZW1lbnQuZW5kID0gZW5kJDE7XG4gICAgICB9XG4gICAgICBjbG9zZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgfSxcblxuICAgIGNoYXJzOiBmdW5jdGlvbiBjaGFycyAodGV4dCwgc3RhcnQsIGVuZCkge1xuICAgICAgaWYgKCFjdXJyZW50UGFyZW50KSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRleHQgPT09IHRlbXBsYXRlKSB7XG4gICAgICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAgICAgJ0NvbXBvbmVudCB0ZW1wbGF0ZSByZXF1aXJlcyBhIHJvb3QgZWxlbWVudCwgcmF0aGVyIHRoYW4ganVzdCB0ZXh0LicsXG4gICAgICAgICAgICAgIHsgc3RhcnQ6IHN0YXJ0IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIGlmICgodGV4dCA9IHRleHQudHJpbSgpKSkge1xuICAgICAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgICAgIChcInRleHQgXFxcIlwiICsgdGV4dCArIFwiXFxcIiBvdXRzaWRlIHJvb3QgZWxlbWVudCB3aWxsIGJlIGlnbm9yZWQuXCIpLFxuICAgICAgICAgICAgICB7IHN0YXJ0OiBzdGFydCB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8vIElFIHRleHRhcmVhIHBsYWNlaG9sZGVyIGJ1Z1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSAmJlxuICAgICAgICBjdXJyZW50UGFyZW50LnRhZyA9PT0gJ3RleHRhcmVhJyAmJlxuICAgICAgICBjdXJyZW50UGFyZW50LmF0dHJzTWFwLnBsYWNlaG9sZGVyID09PSB0ZXh0XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB2YXIgY2hpbGRyZW4gPSBjdXJyZW50UGFyZW50LmNoaWxkcmVuO1xuICAgICAgaWYgKGluUHJlIHx8IHRleHQudHJpbSgpKSB7XG4gICAgICAgIHRleHQgPSBpc1RleHRUYWcoY3VycmVudFBhcmVudCkgPyB0ZXh0IDogZGVjb2RlSFRNTENhY2hlZCh0ZXh0KTtcbiAgICAgIH0gZWxzZSBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAvLyByZW1vdmUgdGhlIHdoaXRlc3BhY2Utb25seSBub2RlIHJpZ2h0IGFmdGVyIGFuIG9wZW5pbmcgdGFnXG4gICAgICAgIHRleHQgPSAnJztcbiAgICAgIH0gZWxzZSBpZiAod2hpdGVzcGFjZU9wdGlvbikge1xuICAgICAgICBpZiAod2hpdGVzcGFjZU9wdGlvbiA9PT0gJ2NvbmRlbnNlJykge1xuICAgICAgICAgIC8vIGluIGNvbmRlbnNlIG1vZGUsIHJlbW92ZSB0aGUgd2hpdGVzcGFjZSBub2RlIGlmIGl0IGNvbnRhaW5zXG4gICAgICAgICAgLy8gbGluZSBicmVhaywgb3RoZXJ3aXNlIGNvbmRlbnNlIHRvIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgICAgdGV4dCA9IGxpbmVCcmVha1JFLnRlc3QodGV4dCkgPyAnJyA6ICcgJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0ID0gJyAnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0ID0gcHJlc2VydmVXaGl0ZXNwYWNlID8gJyAnIDogJyc7XG4gICAgICB9XG4gICAgICBpZiAodGV4dCkge1xuICAgICAgICBpZiAoIWluUHJlICYmIHdoaXRlc3BhY2VPcHRpb24gPT09ICdjb25kZW5zZScpIHtcbiAgICAgICAgICAvLyBjb25kZW5zZSBjb25zZWN1dGl2ZSB3aGl0ZXNwYWNlcyBpbnRvIHNpbmdsZSBzcGFjZVxuICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2Uod2hpdGVzcGFjZVJFJDEsICcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgdmFyIGNoaWxkO1xuICAgICAgICBpZiAoIWluVlByZSAmJiB0ZXh0ICE9PSAnICcgJiYgKHJlcyA9IHBhcnNlVGV4dCh0ZXh0LCBkZWxpbWl0ZXJzKSkpIHtcbiAgICAgICAgICBjaGlsZCA9IHtcbiAgICAgICAgICAgIHR5cGU6IDIsXG4gICAgICAgICAgICBleHByZXNzaW9uOiByZXMuZXhwcmVzc2lvbixcbiAgICAgICAgICAgIHRva2VuczogcmVzLnRva2VucyxcbiAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHRleHQgIT09ICcgJyB8fCAhY2hpbGRyZW4ubGVuZ3RoIHx8IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLnRleHQgIT09ICcgJykge1xuICAgICAgICAgIGNoaWxkID0ge1xuICAgICAgICAgICAgdHlwZTogMyxcbiAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICBjaGlsZC5lbmQgPSBlbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjb21tZW50OiBmdW5jdGlvbiBjb21tZW50ICh0ZXh0LCBzdGFydCwgZW5kKSB7XG4gICAgICAvLyBhZGRpbmcgYW55dGhpbmcgYXMgYSBzaWJsaW5nIHRvIHRoZSByb290IG5vZGUgaXMgZm9yYmlkZGVuXG4gICAgICAvLyBjb21tZW50cyBzaG91bGQgc3RpbGwgYmUgYWxsb3dlZCwgYnV0IGlnbm9yZWRcbiAgICAgIGlmIChjdXJyZW50UGFyZW50KSB7XG4gICAgICAgIHZhciBjaGlsZCA9IHtcbiAgICAgICAgICB0eXBlOiAzLFxuICAgICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgICAgaXNDb21tZW50OiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBjaGlsZC5zdGFydCA9IHN0YXJ0O1xuICAgICAgICAgIGNoaWxkLmVuZCA9IGVuZDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50UGFyZW50LmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiByb290XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NQcmUgKGVsKSB7XG4gIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1wcmUnKSAhPSBudWxsKSB7XG4gICAgZWwucHJlID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzUmF3QXR0cnMgKGVsKSB7XG4gIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICB2YXIgbGVuID0gbGlzdC5sZW5ndGg7XG4gIGlmIChsZW4pIHtcbiAgICB2YXIgYXR0cnMgPSBlbC5hdHRycyA9IG5ldyBBcnJheShsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGF0dHJzW2ldID0ge1xuICAgICAgICBuYW1lOiBsaXN0W2ldLm5hbWUsXG4gICAgICAgIHZhbHVlOiBKU09OLnN0cmluZ2lmeShsaXN0W2ldLnZhbHVlKVxuICAgICAgfTtcbiAgICAgIGlmIChsaXN0W2ldLnN0YXJ0ICE9IG51bGwpIHtcbiAgICAgICAgYXR0cnNbaV0uc3RhcnQgPSBsaXN0W2ldLnN0YXJ0O1xuICAgICAgICBhdHRyc1tpXS5lbmQgPSBsaXN0W2ldLmVuZDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoIWVsLnByZSkge1xuICAgIC8vIG5vbiByb290IG5vZGUgaW4gcHJlIGJsb2NrcyB3aXRoIG5vIGF0dHJpYnV0ZXNcbiAgICBlbC5wbGFpbiA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0VsZW1lbnQgKFxuICBlbGVtZW50LFxuICBvcHRpb25zXG4pIHtcbiAgcHJvY2Vzc0tleShlbGVtZW50KTtcblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciB0aGlzIGlzIGEgcGxhaW4gZWxlbWVudCBhZnRlclxuICAvLyByZW1vdmluZyBzdHJ1Y3R1cmFsIGF0dHJpYnV0ZXNcbiAgZWxlbWVudC5wbGFpbiA9IChcbiAgICAhZWxlbWVudC5rZXkgJiZcbiAgICAhZWxlbWVudC5zY29wZWRTbG90cyAmJlxuICAgICFlbGVtZW50LmF0dHJzTGlzdC5sZW5ndGhcbiAgKTtcblxuICBwcm9jZXNzUmVmKGVsZW1lbnQpO1xuICBwcm9jZXNzU2xvdENvbnRlbnQoZWxlbWVudCk7XG4gIHByb2Nlc3NTbG90T3V0bGV0KGVsZW1lbnQpO1xuICBwcm9jZXNzQ29tcG9uZW50KGVsZW1lbnQpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICBlbGVtZW50ID0gdHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKSB8fCBlbGVtZW50O1xuICB9XG4gIHByb2Nlc3NBdHRycyhlbGVtZW50KTtcbiAgcmV0dXJuIGVsZW1lbnRcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0tleSAoZWwpIHtcbiAgdmFyIGV4cCA9IGdldEJpbmRpbmdBdHRyKGVsLCAna2V5Jyk7XG4gIGlmIChleHApIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgXCI8dGVtcGxhdGU+IGNhbm5vdCBiZSBrZXllZC4gUGxhY2UgdGhlIGtleSBvbiByZWFsIGVsZW1lbnRzIGluc3RlYWQuXCIsXG4gICAgICAgICAgZ2V0UmF3QmluZGluZ0F0dHIoZWwsICdrZXknKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGVsLmZvcikge1xuICAgICAgICB2YXIgaXRlcmF0b3IgPSBlbC5pdGVyYXRvcjIgfHwgZWwuaXRlcmF0b3IxO1xuICAgICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50O1xuICAgICAgICBpZiAoaXRlcmF0b3IgJiYgaXRlcmF0b3IgPT09IGV4cCAmJiBwYXJlbnQgJiYgcGFyZW50LnRhZyA9PT0gJ3RyYW5zaXRpb24tZ3JvdXAnKSB7XG4gICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgXCJEbyBub3QgdXNlIHYtZm9yIGluZGV4IGFzIGtleSBvbiA8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4sIFwiICtcbiAgICAgICAgICAgIFwidGhpcyBpcyB0aGUgc2FtZSBhcyBub3QgdXNpbmcga2V5cy5cIixcbiAgICAgICAgICAgIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAna2V5JyksXG4gICAgICAgICAgICB0cnVlIC8qIHRpcCAqL1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZWwua2V5ID0gZXhwO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSZWYgKGVsKSB7XG4gIHZhciByZWYgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3JlZicpO1xuICBpZiAocmVmKSB7XG4gICAgZWwucmVmID0gcmVmO1xuICAgIGVsLnJlZkluRm9yID0gY2hlY2tJbkZvcihlbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0ZvciAoZWwpIHtcbiAgdmFyIGV4cDtcbiAgaWYgKChleHAgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1mb3InKSkpIHtcbiAgICB2YXIgcmVzID0gcGFyc2VGb3IoZXhwKTtcbiAgICBpZiAocmVzKSB7XG4gICAgICBleHRlbmQoZWwsIHJlcyk7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIChcIkludmFsaWQgdi1mb3IgZXhwcmVzc2lvbjogXCIgKyBleHApLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1mb3InXVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuXG5cbmZ1bmN0aW9uIHBhcnNlRm9yIChleHApIHtcbiAgdmFyIGluTWF0Y2ggPSBleHAubWF0Y2goZm9yQWxpYXNSRSk7XG4gIGlmICghaW5NYXRjaCkgeyByZXR1cm4gfVxuICB2YXIgcmVzID0ge307XG4gIHJlcy5mb3IgPSBpbk1hdGNoWzJdLnRyaW0oKTtcbiAgdmFyIGFsaWFzID0gaW5NYXRjaFsxXS50cmltKCkucmVwbGFjZShzdHJpcFBhcmVuc1JFLCAnJyk7XG4gIHZhciBpdGVyYXRvck1hdGNoID0gYWxpYXMubWF0Y2goZm9ySXRlcmF0b3JSRSk7XG4gIGlmIChpdGVyYXRvck1hdGNoKSB7XG4gICAgcmVzLmFsaWFzID0gYWxpYXMucmVwbGFjZShmb3JJdGVyYXRvclJFLCAnJykudHJpbSgpO1xuICAgIHJlcy5pdGVyYXRvcjEgPSBpdGVyYXRvck1hdGNoWzFdLnRyaW0oKTtcbiAgICBpZiAoaXRlcmF0b3JNYXRjaFsyXSkge1xuICAgICAgcmVzLml0ZXJhdG9yMiA9IGl0ZXJhdG9yTWF0Y2hbMl0udHJpbSgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXMuYWxpYXMgPSBhbGlhcztcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NJZiAoZWwpIHtcbiAgdmFyIGV4cCA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWlmJyk7XG4gIGlmIChleHApIHtcbiAgICBlbC5pZiA9IGV4cDtcbiAgICBhZGRJZkNvbmRpdGlvbihlbCwge1xuICAgICAgZXhwOiBleHAsXG4gICAgICBibG9jazogZWxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZScpICE9IG51bGwpIHtcbiAgICAgIGVsLmVsc2UgPSB0cnVlO1xuICAgIH1cbiAgICB2YXIgZWxzZWlmID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZS1pZicpO1xuICAgIGlmIChlbHNlaWYpIHtcbiAgICAgIGVsLmVsc2VpZiA9IGVsc2VpZjtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0lmQ29uZGl0aW9ucyAoZWwsIHBhcmVudCkge1xuICB2YXIgcHJldiA9IGZpbmRQcmV2RWxlbWVudChwYXJlbnQuY2hpbGRyZW4pO1xuICBpZiAocHJldiAmJiBwcmV2LmlmKSB7XG4gICAgYWRkSWZDb25kaXRpb24ocHJldiwge1xuICAgICAgZXhwOiBlbC5lbHNlaWYsXG4gICAgICBibG9jazogZWxcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybiQyKFxuICAgICAgXCJ2LVwiICsgKGVsLmVsc2VpZiA/ICgnZWxzZS1pZj1cIicgKyBlbC5lbHNlaWYgKyAnXCInKSA6ICdlbHNlJykgKyBcIiBcIiArXG4gICAgICBcInVzZWQgb24gZWxlbWVudCA8XCIgKyAoZWwudGFnKSArIFwiPiB3aXRob3V0IGNvcnJlc3BvbmRpbmcgdi1pZi5cIixcbiAgICAgIGVsLnJhd0F0dHJzTWFwW2VsLmVsc2VpZiA/ICd2LWVsc2UtaWYnIDogJ3YtZWxzZSddXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kUHJldkVsZW1lbnQgKGNoaWxkcmVuKSB7XG4gIHZhciBpID0gY2hpbGRyZW4ubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKGNoaWxkcmVuW2ldLnR5cGUgPT09IDEpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbltpXVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGlsZHJlbltpXS50ZXh0ICE9PSAnICcpIHtcbiAgICAgICAgd2FybiQyKFxuICAgICAgICAgIFwidGV4dCBcXFwiXCIgKyAoY2hpbGRyZW5baV0udGV4dC50cmltKCkpICsgXCJcXFwiIGJldHdlZW4gdi1pZiBhbmQgdi1lbHNlKC1pZikgXCIgK1xuICAgICAgICAgIFwid2lsbCBiZSBpZ25vcmVkLlwiLFxuICAgICAgICAgIGNoaWxkcmVuW2ldXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjaGlsZHJlbi5wb3AoKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkSWZDb25kaXRpb24gKGVsLCBjb25kaXRpb24pIHtcbiAgaWYgKCFlbC5pZkNvbmRpdGlvbnMpIHtcbiAgICBlbC5pZkNvbmRpdGlvbnMgPSBbXTtcbiAgfVxuICBlbC5pZkNvbmRpdGlvbnMucHVzaChjb25kaXRpb24pO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzT25jZSAoZWwpIHtcbiAgdmFyIG9uY2UkJDEgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1vbmNlJyk7XG4gIGlmIChvbmNlJCQxICE9IG51bGwpIHtcbiAgICBlbC5vbmNlID0gdHJ1ZTtcbiAgfVxufVxuXG4vLyBoYW5kbGUgY29udGVudCBiZWluZyBwYXNzZWQgdG8gYSBjb21wb25lbnQgYXMgc2xvdCxcbi8vIGUuZy4gPHRlbXBsYXRlIHNsb3Q9XCJ4eHhcIj4sIDxkaXYgc2xvdC1zY29wZT1cInh4eFwiPlxuZnVuY3Rpb24gcHJvY2Vzc1Nsb3RDb250ZW50IChlbCkge1xuICB2YXIgc2xvdFNjb3BlO1xuICBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgc2xvdFNjb3BlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Njb3BlJyk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2xvdFNjb3BlKSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIFwidGhlIFxcXCJzY29wZVxcXCIgYXR0cmlidXRlIGZvciBzY29wZWQgc2xvdHMgaGF2ZSBiZWVuIGRlcHJlY2F0ZWQgYW5kIFwiICtcbiAgICAgICAgXCJyZXBsYWNlZCBieSBcXFwic2xvdC1zY29wZVxcXCIgc2luY2UgMi41LiBUaGUgbmV3IFxcXCJzbG90LXNjb3BlXFxcIiBhdHRyaWJ1dGUgXCIgK1xuICAgICAgICBcImNhbiBhbHNvIGJlIHVzZWQgb24gcGxhaW4gZWxlbWVudHMgaW4gYWRkaXRpb24gdG8gPHRlbXBsYXRlPiB0byBcIiArXG4gICAgICAgIFwiZGVub3RlIHNjb3BlZCBzbG90cy5cIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3Njb3BlJ10sXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgfVxuICAgIGVsLnNsb3RTY29wZSA9IHNsb3RTY29wZSB8fCBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc2xvdC1zY29wZScpO1xuICB9IGVsc2UgaWYgKChzbG90U2NvcGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc2xvdC1zY29wZScpKSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGVsLmF0dHJzTWFwWyd2LWZvciddKSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIFwiQW1iaWd1b3VzIGNvbWJpbmVkIHVzYWdlIG9mIHNsb3Qtc2NvcGUgYW5kIHYtZm9yIG9uIDxcIiArIChlbC50YWcpICsgXCI+IFwiICtcbiAgICAgICAgXCIodi1mb3IgdGFrZXMgaGlnaGVyIHByaW9yaXR5KS4gVXNlIGEgd3JhcHBlciA8dGVtcGxhdGU+IGZvciB0aGUgXCIgK1xuICAgICAgICBcInNjb3BlZCBzbG90IHRvIG1ha2UgaXQgY2xlYXJlci5cIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3Nsb3Qtc2NvcGUnXSxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgZWwuc2xvdFNjb3BlID0gc2xvdFNjb3BlO1xuICB9XG5cbiAgLy8gc2xvdD1cInh4eFwiXG4gIHZhciBzbG90VGFyZ2V0ID0gZ2V0QmluZGluZ0F0dHIoZWwsICdzbG90Jyk7XG4gIGlmIChzbG90VGFyZ2V0KSB7XG4gICAgZWwuc2xvdFRhcmdldCA9IHNsb3RUYXJnZXQgPT09ICdcIlwiJyA/ICdcImRlZmF1bHRcIicgOiBzbG90VGFyZ2V0O1xuICAgIGVsLnNsb3RUYXJnZXREeW5hbWljID0gISEoZWwuYXR0cnNNYXBbJzpzbG90J10gfHwgZWwuYXR0cnNNYXBbJ3YtYmluZDpzbG90J10pO1xuICAgIC8vIHByZXNlcnZlIHNsb3QgYXMgYW4gYXR0cmlidXRlIGZvciBuYXRpdmUgc2hhZG93IERPTSBjb21wYXRcbiAgICAvLyBvbmx5IGZvciBub24tc2NvcGVkIHNsb3RzLlxuICAgIGlmIChlbC50YWcgIT09ICd0ZW1wbGF0ZScgJiYgIWVsLnNsb3RTY29wZSkge1xuICAgICAgYWRkQXR0cihlbCwgJ3Nsb3QnLCBzbG90VGFyZ2V0LCBnZXRSYXdCaW5kaW5nQXR0cihlbCwgJ3Nsb3QnKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gMi42IHYtc2xvdCBzeW50YXhcbiAge1xuICAgIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIC8vIHYtc2xvdCBvbiA8dGVtcGxhdGU+XG4gICAgICB2YXIgc2xvdEJpbmRpbmcgPSBnZXRBbmRSZW1vdmVBdHRyQnlSZWdleChlbCwgc2xvdFJFKTtcbiAgICAgIGlmIChzbG90QmluZGluZykge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmIChlbC5zbG90VGFyZ2V0IHx8IGVsLnNsb3RTY29wZSkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcIlVuZXhwZWN0ZWQgbWl4ZWQgdXNhZ2Ugb2YgZGlmZmVyZW50IHNsb3Qgc3ludGF4ZXMuXCIsXG4gICAgICAgICAgICAgIGVsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZWwucGFyZW50ICYmICFtYXliZUNvbXBvbmVudChlbC5wYXJlbnQpKSB7XG4gICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgIFwiPHRlbXBsYXRlIHYtc2xvdD4gY2FuIG9ubHkgYXBwZWFyIGF0IHRoZSByb290IGxldmVsIGluc2lkZSBcIiArXG4gICAgICAgICAgICAgIFwidGhlIHJlY2VpdmluZyBjb21wb25lbnRcIixcbiAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciByZWYgPSBnZXRTbG90TmFtZShzbG90QmluZGluZyk7XG4gICAgICAgIHZhciBuYW1lID0gcmVmLm5hbWU7XG4gICAgICAgIHZhciBkeW5hbWljID0gcmVmLmR5bmFtaWM7XG4gICAgICAgIGVsLnNsb3RUYXJnZXQgPSBuYW1lO1xuICAgICAgICBlbC5zbG90VGFyZ2V0RHluYW1pYyA9IGR5bmFtaWM7XG4gICAgICAgIGVsLnNsb3RTY29wZSA9IHNsb3RCaW5kaW5nLnZhbHVlIHx8IGVtcHR5U2xvdFNjb3BlVG9rZW47IC8vIGZvcmNlIGl0IGludG8gYSBzY29wZWQgc2xvdCBmb3IgcGVyZlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB2LXNsb3Qgb24gY29tcG9uZW50LCBkZW5vdGVzIGRlZmF1bHQgc2xvdFxuICAgICAgdmFyIHNsb3RCaW5kaW5nJDEgPSBnZXRBbmRSZW1vdmVBdHRyQnlSZWdleChlbCwgc2xvdFJFKTtcbiAgICAgIGlmIChzbG90QmluZGluZyQxKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKCFtYXliZUNvbXBvbmVudChlbCkpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgXCJ2LXNsb3QgY2FuIG9ubHkgYmUgdXNlZCBvbiBjb21wb25lbnRzIG9yIDx0ZW1wbGF0ZT4uXCIsXG4gICAgICAgICAgICAgIHNsb3RCaW5kaW5nJDFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5zbG90U2NvcGUgfHwgZWwuc2xvdFRhcmdldCkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcIlVuZXhwZWN0ZWQgbWl4ZWQgdXNhZ2Ugb2YgZGlmZmVyZW50IHNsb3Qgc3ludGF4ZXMuXCIsXG4gICAgICAgICAgICAgIGVsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZWwuc2NvcGVkU2xvdHMpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgXCJUbyBhdm9pZCBzY29wZSBhbWJpZ3VpdHksIHRoZSBkZWZhdWx0IHNsb3Qgc2hvdWxkIGFsc28gdXNlIFwiICtcbiAgICAgICAgICAgICAgXCI8dGVtcGxhdGU+IHN5bnRheCB3aGVuIHRoZXJlIGFyZSBvdGhlciBuYW1lZCBzbG90cy5cIixcbiAgICAgICAgICAgICAgc2xvdEJpbmRpbmckMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWRkIHRoZSBjb21wb25lbnQncyBjaGlsZHJlbiB0byBpdHMgZGVmYXVsdCBzbG90XG4gICAgICAgIHZhciBzbG90cyA9IGVsLnNjb3BlZFNsb3RzIHx8IChlbC5zY29wZWRTbG90cyA9IHt9KTtcbiAgICAgICAgdmFyIHJlZiQxID0gZ2V0U2xvdE5hbWUoc2xvdEJpbmRpbmckMSk7XG4gICAgICAgIHZhciBuYW1lJDEgPSByZWYkMS5uYW1lO1xuICAgICAgICB2YXIgZHluYW1pYyQxID0gcmVmJDEuZHluYW1pYztcbiAgICAgICAgdmFyIHNsb3RDb250YWluZXIgPSBzbG90c1tuYW1lJDFdID0gY3JlYXRlQVNURWxlbWVudCgndGVtcGxhdGUnLCBbXSwgZWwpO1xuICAgICAgICBzbG90Q29udGFpbmVyLnNsb3RUYXJnZXQgPSBuYW1lJDE7XG4gICAgICAgIHNsb3RDb250YWluZXIuc2xvdFRhcmdldER5bmFtaWMgPSBkeW5hbWljJDE7XG4gICAgICAgIHNsb3RDb250YWluZXIuY2hpbGRyZW4gPSBlbC5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICBpZiAoIWMuc2xvdFNjb3BlKSB7XG4gICAgICAgICAgICBjLnBhcmVudCA9IHNsb3RDb250YWluZXI7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHNsb3RDb250YWluZXIuc2xvdFNjb3BlID0gc2xvdEJpbmRpbmckMS52YWx1ZSB8fCBlbXB0eVNsb3RTY29wZVRva2VuO1xuICAgICAgICAvLyByZW1vdmUgY2hpbGRyZW4gYXMgdGhleSBhcmUgcmV0dXJuZWQgZnJvbSBzY29wZWRTbG90cyBub3dcbiAgICAgICAgZWwuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgLy8gbWFyayBlbCBub24tcGxhaW4gc28gZGF0YSBnZXRzIGdlbmVyYXRlZFxuICAgICAgICBlbC5wbGFpbiA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTbG90TmFtZSAoYmluZGluZykge1xuICB2YXIgbmFtZSA9IGJpbmRpbmcubmFtZS5yZXBsYWNlKHNsb3RSRSwgJycpO1xuICBpZiAoIW5hbWUpIHtcbiAgICBpZiAoYmluZGluZy5uYW1lWzBdICE9PSAnIycpIHtcbiAgICAgIG5hbWUgPSAnZGVmYXVsdCc7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIFwidi1zbG90IHNob3J0aGFuZCBzeW50YXggcmVxdWlyZXMgYSBzbG90IG5hbWUuXCIsXG4gICAgICAgIGJpbmRpbmdcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkeW5hbWljQXJnUkUudGVzdChuYW1lKVxuICAgIC8vIGR5bmFtaWMgW25hbWVdXG4gICAgPyB7IG5hbWU6IG5hbWUuc2xpY2UoMSwgLTEpLCBkeW5hbWljOiB0cnVlIH1cbiAgICAvLyBzdGF0aWMgbmFtZVxuICAgIDogeyBuYW1lOiAoXCJcXFwiXCIgKyBuYW1lICsgXCJcXFwiXCIpLCBkeW5hbWljOiBmYWxzZSB9XG59XG5cbi8vIGhhbmRsZSA8c2xvdC8+IG91dGxldHNcbmZ1bmN0aW9uIHByb2Nlc3NTbG90T3V0bGV0IChlbCkge1xuICBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICBlbC5zbG90TmFtZSA9IGdldEJpbmRpbmdBdHRyKGVsLCAnbmFtZScpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGVsLmtleSkge1xuICAgICAgd2FybiQyKFxuICAgICAgICBcImBrZXlgIGRvZXMgbm90IHdvcmsgb24gPHNsb3Q+IGJlY2F1c2Ugc2xvdHMgYXJlIGFic3RyYWN0IG91dGxldHMgXCIgK1xuICAgICAgICBcImFuZCBjYW4gcG9zc2libHkgZXhwYW5kIGludG8gbXVsdGlwbGUgZWxlbWVudHMuIFwiICtcbiAgICAgICAgXCJVc2UgdGhlIGtleSBvbiBhIHdyYXBwaW5nIGVsZW1lbnQgaW5zdGVhZC5cIixcbiAgICAgICAgZ2V0UmF3QmluZGluZ0F0dHIoZWwsICdrZXknKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0NvbXBvbmVudCAoZWwpIHtcbiAgdmFyIGJpbmRpbmc7XG4gIGlmICgoYmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnaXMnKSkpIHtcbiAgICBlbC5jb21wb25lbnQgPSBiaW5kaW5nO1xuICB9XG4gIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAnaW5saW5lLXRlbXBsYXRlJykgIT0gbnVsbCkge1xuICAgIGVsLmlubGluZVRlbXBsYXRlID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzQXR0cnMgKGVsKSB7XG4gIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICB2YXIgaSwgbCwgbmFtZSwgcmF3TmFtZSwgdmFsdWUsIG1vZGlmaWVycywgc3luY0dlbiwgaXNEeW5hbWljO1xuICBmb3IgKGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBuYW1lID0gcmF3TmFtZSA9IGxpc3RbaV0ubmFtZTtcbiAgICB2YWx1ZSA9IGxpc3RbaV0udmFsdWU7XG4gICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHtcbiAgICAgIC8vIG1hcmsgZWxlbWVudCBhcyBkeW5hbWljXG4gICAgICBlbC5oYXNCaW5kaW5ncyA9IHRydWU7XG4gICAgICAvLyBtb2RpZmllcnNcbiAgICAgIG1vZGlmaWVycyA9IHBhcnNlTW9kaWZpZXJzKG5hbWUucmVwbGFjZShkaXJSRSwgJycpKTtcbiAgICAgIC8vIHN1cHBvcnQgLmZvbyBzaG9ydGhhbmQgc3ludGF4IGZvciB0aGUgLnByb3AgbW9kaWZpZXJcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShtb2RpZmllclJFLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoYmluZFJFLnRlc3QobmFtZSkpIHsgLy8gdi1iaW5kXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoYmluZFJFLCAnJyk7XG4gICAgICAgIHZhbHVlID0gcGFyc2VGaWx0ZXJzKHZhbHVlKTtcbiAgICAgICAgaXNEeW5hbWljID0gZHluYW1pY0FyZ1JFLnRlc3QobmFtZSk7XG4gICAgICAgIGlmIChpc0R5bmFtaWMpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgxLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICB2YWx1ZS50cmltKCkubGVuZ3RoID09PSAwXG4gICAgICAgICkge1xuICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgIChcIlRoZSB2YWx1ZSBmb3IgYSB2LWJpbmQgZXhwcmVzc2lvbiBjYW5ub3QgYmUgZW1wdHkuIEZvdW5kIGluIFxcXCJ2LWJpbmQ6XCIgKyBuYW1lICsgXCJcXFwiXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5wcm9wICYmICFpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnaW5uZXJIdG1sJykgeyBuYW1lID0gJ2lubmVySFRNTCc7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5jYW1lbCAmJiAhaXNEeW5hbWljKSB7XG4gICAgICAgICAgICBuYW1lID0gY2FtZWxpemUobmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtb2RpZmllcnMuc3luYykge1xuICAgICAgICAgICAgc3luY0dlbiA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCBcIiRldmVudFwiKTtcbiAgICAgICAgICAgIGlmICghaXNEeW5hbWljKSB7XG4gICAgICAgICAgICAgIGFkZEhhbmRsZXIoXG4gICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgKFwidXBkYXRlOlwiICsgKGNhbWVsaXplKG5hbWUpKSksXG4gICAgICAgICAgICAgICAgc3luY0dlbixcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHdhcm4kMixcbiAgICAgICAgICAgICAgICBsaXN0W2ldXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmIChoeXBoZW5hdGUobmFtZSkgIT09IGNhbWVsaXplKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgYWRkSGFuZGxlcihcbiAgICAgICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICAgICAgKFwidXBkYXRlOlwiICsgKGh5cGhlbmF0ZShuYW1lKSkpLFxuICAgICAgICAgICAgICAgICAgc3luY0dlbixcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIHdhcm4kMixcbiAgICAgICAgICAgICAgICAgIGxpc3RbaV1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBoYW5kbGVyIHcvIGR5bmFtaWMgZXZlbnQgbmFtZVxuICAgICAgICAgICAgICBhZGRIYW5kbGVyKFxuICAgICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICAgIChcIlxcXCJ1cGRhdGU6XFxcIisoXCIgKyBuYW1lICsgXCIpXCIpLFxuICAgICAgICAgICAgICAgIHN5bmNHZW4sXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB3YXJuJDIsXG4gICAgICAgICAgICAgICAgbGlzdFtpXSxcbiAgICAgICAgICAgICAgICB0cnVlIC8vIGR5bmFtaWNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChtb2RpZmllcnMgJiYgbW9kaWZpZXJzLnByb3ApIHx8IChcbiAgICAgICAgICAhZWwuY29tcG9uZW50ICYmIHBsYXRmb3JtTXVzdFVzZVByb3AoZWwudGFnLCBlbC5hdHRyc01hcC50eXBlLCBuYW1lKVxuICAgICAgICApKSB7XG4gICAgICAgICAgYWRkUHJvcChlbCwgbmFtZSwgdmFsdWUsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQXR0cihlbCwgbmFtZSwgdmFsdWUsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob25SRS50ZXN0KG5hbWUpKSB7IC8vIHYtb25cbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShvblJFLCAnJyk7XG4gICAgICAgIGlzRHluYW1pYyA9IGR5bmFtaWNBcmdSRS50ZXN0KG5hbWUpO1xuICAgICAgICBpZiAoaXNEeW5hbWljKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMSwgLTEpO1xuICAgICAgICB9XG4gICAgICAgIGFkZEhhbmRsZXIoZWwsIG5hbWUsIHZhbHVlLCBtb2RpZmllcnMsIGZhbHNlLCB3YXJuJDIsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICB9IGVsc2UgeyAvLyBub3JtYWwgZGlyZWN0aXZlc1xuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKGRpclJFLCAnJyk7XG4gICAgICAgIC8vIHBhcnNlIGFyZ1xuICAgICAgICB2YXIgYXJnTWF0Y2ggPSBuYW1lLm1hdGNoKGFyZ1JFKTtcbiAgICAgICAgdmFyIGFyZyA9IGFyZ01hdGNoICYmIGFyZ01hdGNoWzFdO1xuICAgICAgICBpc0R5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgaWYgKGFyZykge1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIC0oYXJnLmxlbmd0aCArIDEpKTtcbiAgICAgICAgICBpZiAoZHluYW1pY0FyZ1JFLnRlc3QoYXJnKSkge1xuICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICAgIGlzRHluYW1pYyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFkZERpcmVjdGl2ZShlbCwgbmFtZSwgcmF3TmFtZSwgdmFsdWUsIGFyZywgaXNEeW5hbWljLCBtb2RpZmllcnMsIGxpc3RbaV0pO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lID09PSAnbW9kZWwnKSB7XG4gICAgICAgICAgY2hlY2tGb3JBbGlhc01vZGVsKGVsLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbGl0ZXJhbCBhdHRyaWJ1dGVcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciByZXMgPSBwYXJzZVRleHQodmFsdWUsIGRlbGltaXRlcnMpO1xuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgbmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiOiBcIiArXG4gICAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBpZD1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmlkPVwidmFsXCI+LicsXG4gICAgICAgICAgICBsaXN0W2ldXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYWRkQXR0cihlbCwgbmFtZSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpLCBsaXN0W2ldKTtcbiAgICAgIC8vICM2ODg3IGZpcmVmb3ggZG9lc24ndCB1cGRhdGUgbXV0ZWQgc3RhdGUgaWYgc2V0IHZpYSBhdHRyaWJ1dGVcbiAgICAgIC8vIGV2ZW4gaW1tZWRpYXRlbHkgYWZ0ZXIgZWxlbWVudCBjcmVhdGlvblxuICAgICAgaWYgKCFlbC5jb21wb25lbnQgJiZcbiAgICAgICAgICBuYW1lID09PSAnbXV0ZWQnICYmXG4gICAgICAgICAgcGxhdGZvcm1NdXN0VXNlUHJvcChlbC50YWcsIGVsLmF0dHJzTWFwLnR5cGUsIG5hbWUpKSB7XG4gICAgICAgIGFkZFByb3AoZWwsIG5hbWUsICd0cnVlJywgbGlzdFtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrSW5Gb3IgKGVsKSB7XG4gIHZhciBwYXJlbnQgPSBlbDtcbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQuZm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9kaWZpZXJzIChuYW1lKSB7XG4gIHZhciBtYXRjaCA9IG5hbWUubWF0Y2gobW9kaWZpZXJSRSk7XG4gIGlmIChtYXRjaCkge1xuICAgIHZhciByZXQgPSB7fTtcbiAgICBtYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7IHJldFttLnNsaWNlKDEpXSA9IHRydWU7IH0pO1xuICAgIHJldHVybiByZXRcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlQXR0cnNNYXAgKGF0dHJzKSB7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBtYXBbYXR0cnNbaV0ubmFtZV0gJiYgIWlzSUUgJiYgIWlzRWRnZVxuICAgICkge1xuICAgICAgd2FybiQyKCdkdXBsaWNhdGUgYXR0cmlidXRlOiAnICsgYXR0cnNbaV0ubmFtZSwgYXR0cnNbaV0pO1xuICAgIH1cbiAgICBtYXBbYXR0cnNbaV0ubmFtZV0gPSBhdHRyc1tpXS52YWx1ZTtcbiAgfVxuICByZXR1cm4gbWFwXG59XG5cbi8vIGZvciBzY3JpcHQgKGUuZy4gdHlwZT1cIngvdGVtcGxhdGVcIikgb3Igc3R5bGUsIGRvIG5vdCBkZWNvZGUgY29udGVudFxuZnVuY3Rpb24gaXNUZXh0VGFnIChlbCkge1xuICByZXR1cm4gZWwudGFnID09PSAnc2NyaXB0JyB8fCBlbC50YWcgPT09ICdzdHlsZSdcbn1cblxuZnVuY3Rpb24gaXNGb3JiaWRkZW5UYWcgKGVsKSB7XG4gIHJldHVybiAoXG4gICAgZWwudGFnID09PSAnc3R5bGUnIHx8XG4gICAgKGVsLnRhZyA9PT0gJ3NjcmlwdCcgJiYgKFxuICAgICAgIWVsLmF0dHJzTWFwLnR5cGUgfHxcbiAgICAgIGVsLmF0dHJzTWFwLnR5cGUgPT09ICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgKSlcbiAgKVxufVxuXG52YXIgaWVOU0J1ZyA9IC9eeG1sbnM6TlNcXGQrLztcbnZhciBpZU5TUHJlZml4ID0gL15OU1xcZCs6LztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGd1YXJkSUVTVkdCdWcgKGF0dHJzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBhdHRyID0gYXR0cnNbaV07XG4gICAgaWYgKCFpZU5TQnVnLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgYXR0ci5uYW1lID0gYXR0ci5uYW1lLnJlcGxhY2UoaWVOU1ByZWZpeCwgJycpO1xuICAgICAgcmVzLnB1c2goYXR0cik7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JBbGlhc01vZGVsIChlbCwgdmFsdWUpIHtcbiAgdmFyIF9lbCA9IGVsO1xuICB3aGlsZSAoX2VsKSB7XG4gICAgaWYgKF9lbC5mb3IgJiYgX2VsLmFsaWFzID09PSB2YWx1ZSkge1xuICAgICAgd2FybiQyKFxuICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIj46IFwiICtcbiAgICAgICAgXCJZb3UgYXJlIGJpbmRpbmcgdi1tb2RlbCBkaXJlY3RseSB0byBhIHYtZm9yIGl0ZXJhdGlvbiBhbGlhcy4gXCIgK1xuICAgICAgICBcIlRoaXMgd2lsbCBub3QgYmUgYWJsZSB0byBtb2RpZnkgdGhlIHYtZm9yIHNvdXJjZSBhcnJheSBiZWNhdXNlIFwiICtcbiAgICAgICAgXCJ3cml0aW5nIHRvIHRoZSBhbGlhcyBpcyBsaWtlIG1vZGlmeWluZyBhIGZ1bmN0aW9uIGxvY2FsIHZhcmlhYmxlLiBcIiArXG4gICAgICAgIFwiQ29uc2lkZXIgdXNpbmcgYW4gYXJyYXkgb2Ygb2JqZWN0cyBhbmQgdXNlIHYtbW9kZWwgb24gYW4gb2JqZWN0IHByb3BlcnR5IGluc3RlYWQuXCIsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW1vZGVsJ11cbiAgICAgICk7XG4gICAgfVxuICAgIF9lbCA9IF9lbC5wYXJlbnQ7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHByZVRyYW5zZm9ybU5vZGUgKGVsLCBvcHRpb25zKSB7XG4gIGlmIChlbC50YWcgPT09ICdpbnB1dCcpIHtcbiAgICB2YXIgbWFwID0gZWwuYXR0cnNNYXA7XG4gICAgaWYgKCFtYXBbJ3YtbW9kZWwnXSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIHR5cGVCaW5kaW5nO1xuICAgIGlmIChtYXBbJzp0eXBlJ10gfHwgbWFwWyd2LWJpbmQ6dHlwZSddKSB7XG4gICAgICB0eXBlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndHlwZScpO1xuICAgIH1cbiAgICBpZiAoIW1hcC50eXBlICYmICF0eXBlQmluZGluZyAmJiBtYXBbJ3YtYmluZCddKSB7XG4gICAgICB0eXBlQmluZGluZyA9IFwiKFwiICsgKG1hcFsndi1iaW5kJ10pICsgXCIpLnR5cGVcIjtcbiAgICB9XG5cbiAgICBpZiAodHlwZUJpbmRpbmcpIHtcbiAgICAgIHZhciBpZkNvbmRpdGlvbiA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWlmJywgdHJ1ZSk7XG4gICAgICB2YXIgaWZDb25kaXRpb25FeHRyYSA9IGlmQ29uZGl0aW9uID8gKFwiJiYoXCIgKyBpZkNvbmRpdGlvbiArIFwiKVwiKSA6IFwiXCI7XG4gICAgICB2YXIgaGFzRWxzZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UnLCB0cnVlKSAhPSBudWxsO1xuICAgICAgdmFyIGVsc2VJZkNvbmRpdGlvbiA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UtaWYnLCB0cnVlKTtcbiAgICAgIC8vIDEuIGNoZWNrYm94XG4gICAgICB2YXIgYnJhbmNoMCA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICAvLyBwcm9jZXNzIGZvciBvbiB0aGUgbWFpbiBub2RlXG4gICAgICBwcm9jZXNzRm9yKGJyYW5jaDApO1xuICAgICAgYWRkUmF3QXR0cihicmFuY2gwLCAndHlwZScsICdjaGVja2JveCcpO1xuICAgICAgcHJvY2Vzc0VsZW1lbnQoYnJhbmNoMCwgb3B0aW9ucyk7XG4gICAgICBicmFuY2gwLnByb2Nlc3NlZCA9IHRydWU7IC8vIHByZXZlbnQgaXQgZnJvbSBkb3VibGUtcHJvY2Vzc2VkXG4gICAgICBicmFuY2gwLmlmID0gXCIoXCIgKyB0eXBlQmluZGluZyArIFwiKT09PSdjaGVja2JveCdcIiArIGlmQ29uZGl0aW9uRXh0cmE7XG4gICAgICBhZGRJZkNvbmRpdGlvbihicmFuY2gwLCB7XG4gICAgICAgIGV4cDogYnJhbmNoMC5pZixcbiAgICAgICAgYmxvY2s6IGJyYW5jaDBcbiAgICAgIH0pO1xuICAgICAgLy8gMi4gYWRkIHJhZGlvIGVsc2UtaWYgY29uZGl0aW9uXG4gICAgICB2YXIgYnJhbmNoMSA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICBnZXRBbmRSZW1vdmVBdHRyKGJyYW5jaDEsICd2LWZvcicsIHRydWUpO1xuICAgICAgYWRkUmF3QXR0cihicmFuY2gxLCAndHlwZScsICdyYWRpbycpO1xuICAgICAgcHJvY2Vzc0VsZW1lbnQoYnJhbmNoMSwgb3B0aW9ucyk7XG4gICAgICBhZGRJZkNvbmRpdGlvbihicmFuY2gwLCB7XG4gICAgICAgIGV4cDogXCIoXCIgKyB0eXBlQmluZGluZyArIFwiKT09PSdyYWRpbydcIiArIGlmQ29uZGl0aW9uRXh0cmEsXG4gICAgICAgIGJsb2NrOiBicmFuY2gxXG4gICAgICB9KTtcbiAgICAgIC8vIDMuIG90aGVyXG4gICAgICB2YXIgYnJhbmNoMiA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICBnZXRBbmRSZW1vdmVBdHRyKGJyYW5jaDIsICd2LWZvcicsIHRydWUpO1xuICAgICAgYWRkUmF3QXR0cihicmFuY2gyLCAnOnR5cGUnLCB0eXBlQmluZGluZyk7XG4gICAgICBwcm9jZXNzRWxlbWVudChicmFuY2gyLCBvcHRpb25zKTtcbiAgICAgIGFkZElmQ29uZGl0aW9uKGJyYW5jaDAsIHtcbiAgICAgICAgZXhwOiBpZkNvbmRpdGlvbixcbiAgICAgICAgYmxvY2s6IGJyYW5jaDJcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaGFzRWxzZSkge1xuICAgICAgICBicmFuY2gwLmVsc2UgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChlbHNlSWZDb25kaXRpb24pIHtcbiAgICAgICAgYnJhbmNoMC5lbHNlaWYgPSBlbHNlSWZDb25kaXRpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicmFuY2gwXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQVNURWxlbWVudCAoZWwpIHtcbiAgcmV0dXJuIGNyZWF0ZUFTVEVsZW1lbnQoZWwudGFnLCBlbC5hdHRyc0xpc3Quc2xpY2UoKSwgZWwucGFyZW50KVxufVxuXG52YXIgbW9kZWwkMSA9IHtcbiAgcHJlVHJhbnNmb3JtTm9kZTogcHJlVHJhbnNmb3JtTm9kZVxufTtcblxudmFyIG1vZHVsZXMkMSA9IFtcbiAga2xhc3MkMSxcbiAgc3R5bGUkMSxcbiAgbW9kZWwkMVxuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHRleHQgKGVsLCBkaXIpIHtcbiAgaWYgKGRpci52YWx1ZSkge1xuICAgIGFkZFByb3AoZWwsICd0ZXh0Q29udGVudCcsIChcIl9zKFwiICsgKGRpci52YWx1ZSkgKyBcIilcIiksIGRpcik7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGh0bWwgKGVsLCBkaXIpIHtcbiAgaWYgKGRpci52YWx1ZSkge1xuICAgIGFkZFByb3AoZWwsICdpbm5lckhUTUwnLCAoXCJfcyhcIiArIChkaXIudmFsdWUpICsgXCIpXCIpLCBkaXIpO1xuICB9XG59XG5cbnZhciBkaXJlY3RpdmVzJDEgPSB7XG4gIG1vZGVsOiBtb2RlbCxcbiAgdGV4dDogdGV4dCxcbiAgaHRtbDogaHRtbFxufTtcblxuLyogICovXG5cbnZhciBiYXNlT3B0aW9ucyA9IHtcbiAgZXhwZWN0SFRNTDogdHJ1ZSxcbiAgbW9kdWxlczogbW9kdWxlcyQxLFxuICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzJDEsXG4gIGlzUHJlVGFnOiBpc1ByZVRhZyxcbiAgaXNVbmFyeVRhZzogaXNVbmFyeVRhZyxcbiAgbXVzdFVzZVByb3A6IG11c3RVc2VQcm9wLFxuICBjYW5CZUxlZnRPcGVuVGFnOiBjYW5CZUxlZnRPcGVuVGFnLFxuICBpc1Jlc2VydmVkVGFnOiBpc1Jlc2VydmVkVGFnLFxuICBnZXRUYWdOYW1lc3BhY2U6IGdldFRhZ05hbWVzcGFjZSxcbiAgc3RhdGljS2V5czogZ2VuU3RhdGljS2V5cyhtb2R1bGVzJDEpXG59O1xuXG4vKiAgKi9cblxudmFyIGlzU3RhdGljS2V5O1xudmFyIGlzUGxhdGZvcm1SZXNlcnZlZFRhZztcblxudmFyIGdlblN0YXRpY0tleXNDYWNoZWQgPSBjYWNoZWQoZ2VuU3RhdGljS2V5cyQxKTtcblxuLyoqXG4gKiBHb2FsIG9mIHRoZSBvcHRpbWl6ZXI6IHdhbGsgdGhlIGdlbmVyYXRlZCB0ZW1wbGF0ZSBBU1QgdHJlZVxuICogYW5kIGRldGVjdCBzdWItdHJlZXMgdGhhdCBhcmUgcHVyZWx5IHN0YXRpYywgaS5lLiBwYXJ0cyBvZlxuICogdGhlIERPTSB0aGF0IG5ldmVyIG5lZWRzIHRvIGNoYW5nZS5cbiAqXG4gKiBPbmNlIHdlIGRldGVjdCB0aGVzZSBzdWItdHJlZXMsIHdlIGNhbjpcbiAqXG4gKiAxLiBIb2lzdCB0aGVtIGludG8gY29uc3RhbnRzLCBzbyB0aGF0IHdlIG5vIGxvbmdlciBuZWVkIHRvXG4gKiAgICBjcmVhdGUgZnJlc2ggbm9kZXMgZm9yIHRoZW0gb24gZWFjaCByZS1yZW5kZXI7XG4gKiAyLiBDb21wbGV0ZWx5IHNraXAgdGhlbSBpbiB0aGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAqL1xuZnVuY3Rpb24gb3B0aW1pemUgKHJvb3QsIG9wdGlvbnMpIHtcbiAgaWYgKCFyb290KSB7IHJldHVybiB9XG4gIGlzU3RhdGljS2V5ID0gZ2VuU3RhdGljS2V5c0NhY2hlZChvcHRpb25zLnN0YXRpY0tleXMgfHwgJycpO1xuICBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcgPSBvcHRpb25zLmlzUmVzZXJ2ZWRUYWcgfHwgbm87XG4gIC8vIGZpcnN0IHBhc3M6IG1hcmsgYWxsIG5vbi1zdGF0aWMgbm9kZXMuXG4gIG1hcmtTdGF0aWMkMShyb290KTtcbiAgLy8gc2Vjb25kIHBhc3M6IG1hcmsgc3RhdGljIHJvb3RzLlxuICBtYXJrU3RhdGljUm9vdHMocm9vdCwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBnZW5TdGF0aWNLZXlzJDEgKGtleXMpIHtcbiAgcmV0dXJuIG1ha2VNYXAoXG4gICAgJ3R5cGUsdGFnLGF0dHJzTGlzdCxhdHRyc01hcCxwbGFpbixwYXJlbnQsY2hpbGRyZW4sYXR0cnMsc3RhcnQsZW5kLHJhd0F0dHJzTWFwJyArXG4gICAgKGtleXMgPyAnLCcgKyBrZXlzIDogJycpXG4gIClcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyQxIChub2RlKSB7XG4gIG5vZGUuc3RhdGljID0gaXNTdGF0aWMobm9kZSk7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICAvLyBkbyBub3QgbWFrZSBjb21wb25lbnQgc2xvdCBjb250ZW50IHN0YXRpYy4gdGhpcyBhdm9pZHNcbiAgICAvLyAxLiBjb21wb25lbnRzIG5vdCBhYmxlIHRvIG11dGF0ZSBzbG90IG5vZGVzXG4gICAgLy8gMi4gc3RhdGljIHNsb3QgY29udGVudCBmYWlscyBmb3IgaG90LXJlbG9hZGluZ1xuICAgIGlmIChcbiAgICAgICFpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcobm9kZS50YWcpICYmXG4gICAgICBub2RlLnRhZyAhPT0gJ3Nsb3QnICYmXG4gICAgICBub2RlLmF0dHJzTWFwWydpbmxpbmUtdGVtcGxhdGUnXSA9PSBudWxsXG4gICAgKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIG1hcmtTdGF0aWMkMShjaGlsZCk7XG4gICAgICBpZiAoIWNoaWxkLnN0YXRpYykge1xuICAgICAgICBub2RlLnN0YXRpYyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5pZkNvbmRpdGlvbnMpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDEsIGwkMSA9IG5vZGUuaWZDb25kaXRpb25zLmxlbmd0aDsgaSQxIDwgbCQxOyBpJDErKykge1xuICAgICAgICB2YXIgYmxvY2sgPSBub2RlLmlmQ29uZGl0aW9uc1tpJDFdLmJsb2NrO1xuICAgICAgICBtYXJrU3RhdGljJDEoYmxvY2spO1xuICAgICAgICBpZiAoIWJsb2NrLnN0YXRpYykge1xuICAgICAgICAgIG5vZGUuc3RhdGljID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY1Jvb3RzIChub2RlLCBpc0luRm9yKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICBpZiAobm9kZS5zdGF0aWMgfHwgbm9kZS5vbmNlKSB7XG4gICAgICBub2RlLnN0YXRpY0luRm9yID0gaXNJbkZvcjtcbiAgICB9XG4gICAgLy8gRm9yIGEgbm9kZSB0byBxdWFsaWZ5IGFzIGEgc3RhdGljIHJvb3QsIGl0IHNob3VsZCBoYXZlIGNoaWxkcmVuIHRoYXRcbiAgICAvLyBhcmUgbm90IGp1c3Qgc3RhdGljIHRleHQuIE90aGVyd2lzZSB0aGUgY29zdCBvZiBob2lzdGluZyBvdXQgd2lsbFxuICAgIC8vIG91dHdlaWdoIHRoZSBiZW5lZml0cyBhbmQgaXQncyBiZXR0ZXIgb2ZmIHRvIGp1c3QgYWx3YXlzIHJlbmRlciBpdCBmcmVzaC5cbiAgICBpZiAobm9kZS5zdGF0aWMgJiYgbm9kZS5jaGlsZHJlbi5sZW5ndGggJiYgIShcbiAgICAgIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmXG4gICAgICBub2RlLmNoaWxkcmVuWzBdLnR5cGUgPT09IDNcbiAgICApKSB7XG4gICAgICBub2RlLnN0YXRpY1Jvb3QgPSB0cnVlO1xuICAgICAgcmV0dXJuXG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc3RhdGljUm9vdCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBtYXJrU3RhdGljUm9vdHMobm9kZS5jaGlsZHJlbltpXSwgaXNJbkZvciB8fCAhIW5vZGUuZm9yKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuaWZDb25kaXRpb25zKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAxLCBsJDEgPSBub2RlLmlmQ29uZGl0aW9ucy5sZW5ndGg7IGkkMSA8IGwkMTsgaSQxKyspIHtcbiAgICAgICAgbWFya1N0YXRpY1Jvb3RzKG5vZGUuaWZDb25kaXRpb25zW2kkMV0uYmxvY2ssIGlzSW5Gb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1N0YXRpYyAobm9kZSkge1xuICBpZiAobm9kZS50eXBlID09PSAyKSB7IC8vIGV4cHJlc3Npb25cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBpZiAobm9kZS50eXBlID09PSAzKSB7IC8vIHRleHRcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiAhIShub2RlLnByZSB8fCAoXG4gICAgIW5vZGUuaGFzQmluZGluZ3MgJiYgLy8gbm8gZHluYW1pYyBiaW5kaW5nc1xuICAgICFub2RlLmlmICYmICFub2RlLmZvciAmJiAvLyBub3Qgdi1pZiBvciB2LWZvciBvciB2LWVsc2VcbiAgICAhaXNCdWlsdEluVGFnKG5vZGUudGFnKSAmJiAvLyBub3QgYSBidWlsdC1pblxuICAgIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiYgLy8gbm90IGEgY29tcG9uZW50XG4gICAgIWlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yKG5vZGUpICYmXG4gICAgT2JqZWN0LmtleXMobm9kZSkuZXZlcnkoaXNTdGF0aWNLZXkpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yIChub2RlKSB7XG4gIHdoaWxlIChub2RlLnBhcmVudCkge1xuICAgIG5vZGUgPSBub2RlLnBhcmVudDtcbiAgICBpZiAobm9kZS50YWcgIT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAobm9kZS5mb3IpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxudmFyIGZuRXhwUkUgPSAvXihbXFx3JF9dK3xcXChbXildKj9cXCkpXFxzKj0+fF5mdW5jdGlvbig/OlxccytbXFx3JF0rKT9cXHMqXFwoLztcbnZhciBmbkludm9rZVJFID0gL1xcKFteKV0qP1xcKTsqJC87XG52YXIgc2ltcGxlUGF0aFJFID0gL15bQS1aYS16XyRdW1xcdyRdKig/OlxcLltBLVphLXpfJF1bXFx3JF0qfFxcWydbXiddKj8nXXxcXFtcIlteXCJdKj9cIl18XFxbXFxkK118XFxbW0EtWmEtel8kXVtcXHckXSpdKSokLztcblxuLy8gS2V5Ym9hcmRFdmVudC5rZXlDb2RlIGFsaWFzZXNcbnZhciBrZXlDb2RlcyA9IHtcbiAgZXNjOiAyNyxcbiAgdGFiOiA5LFxuICBlbnRlcjogMTMsXG4gIHNwYWNlOiAzMixcbiAgdXA6IDM4LFxuICBsZWZ0OiAzNyxcbiAgcmlnaHQ6IDM5LFxuICBkb3duOiA0MCxcbiAgJ2RlbGV0ZSc6IFs4LCA0Nl1cbn07XG5cbi8vIEtleWJvYXJkRXZlbnQua2V5IGFsaWFzZXNcbnZhciBrZXlOYW1lcyA9IHtcbiAgLy8gIzc4ODA6IElFMTEgYW5kIEVkZ2UgdXNlIGBFc2NgIGZvciBFc2NhcGUga2V5IG5hbWUuXG4gIGVzYzogWydFc2MnLCAnRXNjYXBlJ10sXG4gIHRhYjogJ1RhYicsXG4gIGVudGVyOiAnRW50ZXInLFxuICAvLyAjOTExMjogSUUxMSB1c2VzIGBTcGFjZWJhcmAgZm9yIFNwYWNlIGtleSBuYW1lLlxuICBzcGFjZTogWycgJywgJ1NwYWNlYmFyJ10sXG4gIC8vICM3ODA2OiBJRTExIHVzZXMga2V5IG5hbWVzIHdpdGhvdXQgYEFycm93YCBwcmVmaXggZm9yIGFycm93IGtleXMuXG4gIHVwOiBbJ1VwJywgJ0Fycm93VXAnXSxcbiAgbGVmdDogWydMZWZ0JywgJ0Fycm93TGVmdCddLFxuICByaWdodDogWydSaWdodCcsICdBcnJvd1JpZ2h0J10sXG4gIGRvd246IFsnRG93bicsICdBcnJvd0Rvd24nXSxcbiAgLy8gIzkxMTI6IElFMTEgdXNlcyBgRGVsYCBmb3IgRGVsZXRlIGtleSBuYW1lLlxuICAnZGVsZXRlJzogWydCYWNrc3BhY2UnLCAnRGVsZXRlJywgJ0RlbCddXG59O1xuXG4vLyAjNDg2ODogbW9kaWZpZXJzIHRoYXQgcHJldmVudCB0aGUgZXhlY3V0aW9uIG9mIHRoZSBsaXN0ZW5lclxuLy8gbmVlZCB0byBleHBsaWNpdGx5IHJldHVybiBudWxsIHNvIHRoYXQgd2UgY2FuIGRldGVybWluZSB3aGV0aGVyIHRvIHJlbW92ZVxuLy8gdGhlIGxpc3RlbmVyIGZvciAub25jZVxudmFyIGdlbkd1YXJkID0gZnVuY3Rpb24gKGNvbmRpdGlvbikgeyByZXR1cm4gKFwiaWYoXCIgKyBjb25kaXRpb24gKyBcIilyZXR1cm4gbnVsbDtcIik7IH07XG5cbnZhciBtb2RpZmllckNvZGUgPSB7XG4gIHN0b3A6ICckZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7JyxcbiAgcHJldmVudDogJyRldmVudC5wcmV2ZW50RGVmYXVsdCgpOycsXG4gIHNlbGY6IGdlbkd1YXJkKFwiJGV2ZW50LnRhcmdldCAhPT0gJGV2ZW50LmN1cnJlbnRUYXJnZXRcIiksXG4gIGN0cmw6IGdlbkd1YXJkKFwiISRldmVudC5jdHJsS2V5XCIpLFxuICBzaGlmdDogZ2VuR3VhcmQoXCIhJGV2ZW50LnNoaWZ0S2V5XCIpLFxuICBhbHQ6IGdlbkd1YXJkKFwiISRldmVudC5hbHRLZXlcIiksXG4gIG1ldGE6IGdlbkd1YXJkKFwiISRldmVudC5tZXRhS2V5XCIpLFxuICBsZWZ0OiBnZW5HdWFyZChcIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAwXCIpLFxuICBtaWRkbGU6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDFcIiksXG4gIHJpZ2h0OiBnZW5HdWFyZChcIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAyXCIpXG59O1xuXG5mdW5jdGlvbiBnZW5IYW5kbGVycyAoXG4gIGV2ZW50cyxcbiAgaXNOYXRpdmVcbikge1xuICB2YXIgcHJlZml4ID0gaXNOYXRpdmUgPyAnbmF0aXZlT246JyA6ICdvbjonO1xuICB2YXIgc3RhdGljSGFuZGxlcnMgPSBcIlwiO1xuICB2YXIgZHluYW1pY0hhbmRsZXJzID0gXCJcIjtcbiAgZm9yICh2YXIgbmFtZSBpbiBldmVudHMpIHtcbiAgICB2YXIgaGFuZGxlckNvZGUgPSBnZW5IYW5kbGVyKGV2ZW50c1tuYW1lXSk7XG4gICAgaWYgKGV2ZW50c1tuYW1lXSAmJiBldmVudHNbbmFtZV0uZHluYW1pYykge1xuICAgICAgZHluYW1pY0hhbmRsZXJzICs9IG5hbWUgKyBcIixcIiArIGhhbmRsZXJDb2RlICsgXCIsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRpY0hhbmRsZXJzICs9IFwiXFxcIlwiICsgbmFtZSArIFwiXFxcIjpcIiArIGhhbmRsZXJDb2RlICsgXCIsXCI7XG4gICAgfVxuICB9XG4gIHN0YXRpY0hhbmRsZXJzID0gXCJ7XCIgKyAoc3RhdGljSGFuZGxlcnMuc2xpY2UoMCwgLTEpKSArIFwifVwiO1xuICBpZiAoZHluYW1pY0hhbmRsZXJzKSB7XG4gICAgcmV0dXJuIHByZWZpeCArIFwiX2QoXCIgKyBzdGF0aWNIYW5kbGVycyArIFwiLFtcIiArIChkeW5hbWljSGFuZGxlcnMuc2xpY2UoMCwgLTEpKSArIFwiXSlcIlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcmVmaXggKyBzdGF0aWNIYW5kbGVyc1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkhhbmRsZXIgKGhhbmRsZXIpIHtcbiAgaWYgKCFoYW5kbGVyKSB7XG4gICAgcmV0dXJuICdmdW5jdGlvbigpe30nXG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgIHJldHVybiAoXCJbXCIgKyAoaGFuZGxlci5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIGdlbkhhbmRsZXIoaGFuZGxlcik7IH0pLmpvaW4oJywnKSkgKyBcIl1cIilcbiAgfVxuXG4gIHZhciBpc01ldGhvZFBhdGggPSBzaW1wbGVQYXRoUkUudGVzdChoYW5kbGVyLnZhbHVlKTtcbiAgdmFyIGlzRnVuY3Rpb25FeHByZXNzaW9uID0gZm5FeHBSRS50ZXN0KGhhbmRsZXIudmFsdWUpO1xuICB2YXIgaXNGdW5jdGlvbkludm9jYXRpb24gPSBzaW1wbGVQYXRoUkUudGVzdChoYW5kbGVyLnZhbHVlLnJlcGxhY2UoZm5JbnZva2VSRSwgJycpKTtcblxuICBpZiAoIWhhbmRsZXIubW9kaWZpZXJzKSB7XG4gICAgaWYgKGlzTWV0aG9kUGF0aCB8fCBpc0Z1bmN0aW9uRXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuIGhhbmRsZXIudmFsdWVcbiAgICB9XG4gICAgcmV0dXJuIChcImZ1bmN0aW9uKCRldmVudCl7XCIgKyAoaXNGdW5jdGlvbkludm9jYXRpb24gPyAoXCJyZXR1cm4gXCIgKyAoaGFuZGxlci52YWx1ZSkpIDogaGFuZGxlci52YWx1ZSkgKyBcIn1cIikgLy8gaW5saW5lIHN0YXRlbWVudFxuICB9IGVsc2Uge1xuICAgIHZhciBjb2RlID0gJyc7XG4gICAgdmFyIGdlbk1vZGlmaWVyQ29kZSA9ICcnO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIGhhbmRsZXIubW9kaWZpZXJzKSB7XG4gICAgICBpZiAobW9kaWZpZXJDb2RlW2tleV0pIHtcbiAgICAgICAgZ2VuTW9kaWZpZXJDb2RlICs9IG1vZGlmaWVyQ29kZVtrZXldO1xuICAgICAgICAvLyBsZWZ0L3JpZ2h0XG4gICAgICAgIGlmIChrZXlDb2Rlc1trZXldKSB7XG4gICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZXhhY3QnKSB7XG4gICAgICAgIHZhciBtb2RpZmllcnMgPSAoaGFuZGxlci5tb2RpZmllcnMpO1xuICAgICAgICBnZW5Nb2RpZmllckNvZGUgKz0gZ2VuR3VhcmQoXG4gICAgICAgICAgWydjdHJsJywgJ3NoaWZ0JywgJ2FsdCcsICdtZXRhJ11cbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGtleU1vZGlmaWVyKSB7IHJldHVybiAhbW9kaWZpZXJzW2tleU1vZGlmaWVyXTsgfSlcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleU1vZGlmaWVyKSB7IHJldHVybiAoXCIkZXZlbnQuXCIgKyBrZXlNb2RpZmllciArIFwiS2V5XCIpOyB9KVxuICAgICAgICAgICAgLmpvaW4oJ3x8JylcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgIGNvZGUgKz0gZ2VuS2V5RmlsdGVyKGtleXMpO1xuICAgIH1cbiAgICAvLyBNYWtlIHN1cmUgbW9kaWZpZXJzIGxpa2UgcHJldmVudCBhbmQgc3RvcCBnZXQgZXhlY3V0ZWQgYWZ0ZXIga2V5IGZpbHRlcmluZ1xuICAgIGlmIChnZW5Nb2RpZmllckNvZGUpIHtcbiAgICAgIGNvZGUgKz0gZ2VuTW9kaWZpZXJDb2RlO1xuICAgIH1cbiAgICB2YXIgaGFuZGxlckNvZGUgPSBpc01ldGhvZFBhdGhcbiAgICAgID8gKFwicmV0dXJuIFwiICsgKGhhbmRsZXIudmFsdWUpICsgXCIoJGV2ZW50KVwiKVxuICAgICAgOiBpc0Z1bmN0aW9uRXhwcmVzc2lvblxuICAgICAgICA/IChcInJldHVybiAoXCIgKyAoaGFuZGxlci52YWx1ZSkgKyBcIikoJGV2ZW50KVwiKVxuICAgICAgICA6IGlzRnVuY3Rpb25JbnZvY2F0aW9uXG4gICAgICAgICAgPyAoXCJyZXR1cm4gXCIgKyAoaGFuZGxlci52YWx1ZSkpXG4gICAgICAgICAgOiBoYW5kbGVyLnZhbHVlO1xuICAgIHJldHVybiAoXCJmdW5jdGlvbigkZXZlbnQpe1wiICsgY29kZSArIGhhbmRsZXJDb2RlICsgXCJ9XCIpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuS2V5RmlsdGVyIChrZXlzKSB7XG4gIHJldHVybiAoXG4gICAgLy8gbWFrZSBzdXJlIHRoZSBrZXkgZmlsdGVycyBvbmx5IGFwcGx5IHRvIEtleWJvYXJkRXZlbnRzXG4gICAgLy8gIzk0NDE6IGNhbid0IHVzZSAna2V5Q29kZScgaW4gJGV2ZW50IGJlY2F1c2UgQ2hyb21lIGF1dG9maWxsIGZpcmVzIGZha2VcbiAgICAvLyBrZXkgZXZlbnRzIHRoYXQgZG8gbm90IGhhdmUga2V5Q29kZSBwcm9wZXJ0eS4uLlxuICAgIFwiaWYoISRldmVudC50eXBlLmluZGV4T2YoJ2tleScpJiZcIiArXG4gICAgKGtleXMubWFwKGdlbkZpbHRlckNvZGUpLmpvaW4oJyYmJykpICsgXCIpcmV0dXJuIG51bGw7XCJcbiAgKVxufVxuXG5mdW5jdGlvbiBnZW5GaWx0ZXJDb2RlIChrZXkpIHtcbiAgdmFyIGtleVZhbCA9IHBhcnNlSW50KGtleSwgMTApO1xuICBpZiAoa2V5VmFsKSB7XG4gICAgcmV0dXJuIChcIiRldmVudC5rZXlDb2RlIT09XCIgKyBrZXlWYWwpXG4gIH1cbiAgdmFyIGtleUNvZGUgPSBrZXlDb2Rlc1trZXldO1xuICB2YXIga2V5TmFtZSA9IGtleU5hbWVzW2tleV07XG4gIHJldHVybiAoXG4gICAgXCJfaygkZXZlbnQua2V5Q29kZSxcIiArXG4gICAgKEpTT04uc3RyaW5naWZ5KGtleSkpICsgXCIsXCIgK1xuICAgIChKU09OLnN0cmluZ2lmeShrZXlDb2RlKSkgKyBcIixcIiArXG4gICAgXCIkZXZlbnQua2V5LFwiICtcbiAgICBcIlwiICsgKEpTT04uc3RyaW5naWZ5KGtleU5hbWUpKSArXG4gICAgXCIpXCJcbiAgKVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gb24gKGVsLCBkaXIpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZGlyLm1vZGlmaWVycykge1xuICAgIHdhcm4oXCJ2LW9uIHdpdGhvdXQgYXJndW1lbnQgZG9lcyBub3Qgc3VwcG9ydCBtb2RpZmllcnMuXCIpO1xuICB9XG4gIGVsLndyYXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoY29kZSkgeyByZXR1cm4gKFwiX2coXCIgKyBjb2RlICsgXCIsXCIgKyAoZGlyLnZhbHVlKSArIFwiKVwiKTsgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmQkMSAoZWwsIGRpcikge1xuICBlbC53cmFwRGF0YSA9IGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgcmV0dXJuIChcIl9iKFwiICsgY29kZSArIFwiLCdcIiArIChlbC50YWcpICsgXCInLFwiICsgKGRpci52YWx1ZSkgKyBcIixcIiArIChkaXIubW9kaWZpZXJzICYmIGRpci5tb2RpZmllcnMucHJvcCA/ICd0cnVlJyA6ICdmYWxzZScpICsgKGRpci5tb2RpZmllcnMgJiYgZGlyLm1vZGlmaWVycy5zeW5jID8gJyx0cnVlJyA6ICcnKSArIFwiKVwiKVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIGJhc2VEaXJlY3RpdmVzID0ge1xuICBvbjogb24sXG4gIGJpbmQ6IGJpbmQkMSxcbiAgY2xvYWs6IG5vb3Bcbn07XG5cbi8qICAqL1xuXG5cblxuXG5cbnZhciBDb2RlZ2VuU3RhdGUgPSBmdW5jdGlvbiBDb2RlZ2VuU3RhdGUgKG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgdGhpcy53YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICB0aGlzLnRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3RyYW5zZm9ybUNvZGUnKTtcbiAgdGhpcy5kYXRhR2VuRm5zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdnZW5EYXRhJyk7XG4gIHRoaXMuZGlyZWN0aXZlcyA9IGV4dGVuZChleHRlbmQoe30sIGJhc2VEaXJlY3RpdmVzKSwgb3B0aW9ucy5kaXJlY3RpdmVzKTtcbiAgdmFyIGlzUmVzZXJ2ZWRUYWcgPSBvcHRpb25zLmlzUmVzZXJ2ZWRUYWcgfHwgbm87XG4gIHRoaXMubWF5YmVDb21wb25lbnQgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICEhZWwuY29tcG9uZW50IHx8ICFpc1Jlc2VydmVkVGFnKGVsLnRhZyk7IH07XG4gIHRoaXMub25jZUlkID0gMDtcbiAgdGhpcy5zdGF0aWNSZW5kZXJGbnMgPSBbXTtcbiAgdGhpcy5wcmUgPSBmYWxzZTtcbn07XG5cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZSAoXG4gIGFzdCxcbiAgb3B0aW9uc1xuKSB7XG4gIHZhciBzdGF0ZSA9IG5ldyBDb2RlZ2VuU3RhdGUob3B0aW9ucyk7XG4gIHZhciBjb2RlID0gYXN0ID8gZ2VuRWxlbWVudChhc3QsIHN0YXRlKSA6ICdfYyhcImRpdlwiKSc7XG4gIHJldHVybiB7XG4gICAgcmVuZGVyOiAoXCJ3aXRoKHRoaXMpe3JldHVybiBcIiArIGNvZGUgKyBcIn1cIiksXG4gICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0ZS5zdGF0aWNSZW5kZXJGbnNcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5FbGVtZW50IChlbCwgc3RhdGUpIHtcbiAgaWYgKGVsLnBhcmVudCkge1xuICAgIGVsLnByZSA9IGVsLnByZSB8fCBlbC5wYXJlbnQucHJlO1xuICB9XG5cbiAgaWYgKGVsLnN0YXRpY1Jvb3QgJiYgIWVsLnN0YXRpY1Byb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5TdGF0aWMoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLm9uY2UgJiYgIWVsLm9uY2VQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuT25jZShlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwuZm9yICYmICFlbC5mb3JQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuRm9yKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJyAmJiAhZWwuc2xvdFRhcmdldCAmJiAhc3RhdGUucHJlKSB7XG4gICAgcmV0dXJuIGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3ZvaWQgMCdcbiAgfSBlbHNlIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgIHJldHVybiBnZW5TbG90KGVsLCBzdGF0ZSlcbiAgfSBlbHNlIHtcbiAgICAvLyBjb21wb25lbnQgb3IgZWxlbWVudFxuICAgIHZhciBjb2RlO1xuICAgIGlmIChlbC5jb21wb25lbnQpIHtcbiAgICAgIGNvZGUgPSBnZW5Db21wb25lbnQoZWwuY29tcG9uZW50LCBlbCwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZGF0YTtcbiAgICAgIGlmICghZWwucGxhaW4gfHwgKGVsLnByZSAmJiBzdGF0ZS5tYXliZUNvbXBvbmVudChlbCkpKSB7XG4gICAgICAgIGRhdGEgPSBnZW5EYXRhJDIoZWwsIHN0YXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoaWxkcmVuID0gZWwuaW5saW5lVGVtcGxhdGUgPyBudWxsIDogZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlLCB0cnVlKTtcbiAgICAgIGNvZGUgPSBcIl9jKCdcIiArIChlbC50YWcpICsgXCInXCIgKyAoZGF0YSA/IChcIixcIiArIGRhdGEpIDogJycpICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpICsgXCIpXCI7XG4gICAgfVxuICAgIC8vIG1vZHVsZSB0cmFuc2Zvcm1zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS50cmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb2RlID0gc3RhdGUudHJhbnNmb3Jtc1tpXShlbCwgY29kZSk7XG4gICAgfVxuICAgIHJldHVybiBjb2RlXG4gIH1cbn1cblxuLy8gaG9pc3Qgc3RhdGljIHN1Yi10cmVlcyBvdXRcbmZ1bmN0aW9uIGdlblN0YXRpYyAoZWwsIHN0YXRlKSB7XG4gIGVsLnN0YXRpY1Byb2Nlc3NlZCA9IHRydWU7XG4gIC8vIFNvbWUgZWxlbWVudHMgKHRlbXBsYXRlcykgbmVlZCB0byBiZWhhdmUgZGlmZmVyZW50bHkgaW5zaWRlIG9mIGEgdi1wcmVcbiAgLy8gbm9kZS4gIEFsbCBwcmUgbm9kZXMgYXJlIHN0YXRpYyByb290cywgc28gd2UgY2FuIHVzZSB0aGlzIGFzIGEgbG9jYXRpb24gdG9cbiAgLy8gd3JhcCBhIHN0YXRlIGNoYW5nZSBhbmQgcmVzZXQgaXQgdXBvbiBleGl0aW5nIHRoZSBwcmUgbm9kZS5cbiAgdmFyIG9yaWdpbmFsUHJlU3RhdGUgPSBzdGF0ZS5wcmU7XG4gIGlmIChlbC5wcmUpIHtcbiAgICBzdGF0ZS5wcmUgPSBlbC5wcmU7XG4gIH1cbiAgc3RhdGUuc3RhdGljUmVuZGVyRm5zLnB1c2goKFwid2l0aCh0aGlzKXtyZXR1cm4gXCIgKyAoZ2VuRWxlbWVudChlbCwgc3RhdGUpKSArIFwifVwiKSk7XG4gIHN0YXRlLnByZSA9IG9yaWdpbmFsUHJlU3RhdGU7XG4gIHJldHVybiAoXCJfbShcIiArIChzdGF0ZS5zdGF0aWNSZW5kZXJGbnMubGVuZ3RoIC0gMSkgKyAoZWwuc3RhdGljSW5Gb3IgPyAnLHRydWUnIDogJycpICsgXCIpXCIpXG59XG5cbi8vIHYtb25jZVxuZnVuY3Rpb24gZ2VuT25jZSAoZWwsIHN0YXRlKSB7XG4gIGVsLm9uY2VQcm9jZXNzZWQgPSB0cnVlO1xuICBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbklmKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5zdGF0aWNJbkZvcikge1xuICAgIHZhciBrZXkgPSAnJztcbiAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50O1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQuZm9yKSB7XG4gICAgICAgIGtleSA9IHBhcmVudC5rZXk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIH1cbiAgICBpZiAoIWtleSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdGF0ZS53YXJuKFxuICAgICAgICBcInYtb25jZSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSB2LWZvciB0aGF0IGlzIGtleWVkLiBcIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3Ytb25jZSddXG4gICAgICApO1xuICAgICAgcmV0dXJuIGdlbkVsZW1lbnQoZWwsIHN0YXRlKVxuICAgIH1cbiAgICByZXR1cm4gKFwiX28oXCIgKyAoZ2VuRWxlbWVudChlbCwgc3RhdGUpKSArIFwiLFwiICsgKHN0YXRlLm9uY2VJZCsrKSArIFwiLFwiICsga2V5ICsgXCIpXCIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdlblN0YXRpYyhlbCwgc3RhdGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuSWYgKFxuICBlbCxcbiAgc3RhdGUsXG4gIGFsdEdlbixcbiAgYWx0RW1wdHlcbikge1xuICBlbC5pZlByb2Nlc3NlZCA9IHRydWU7IC8vIGF2b2lkIHJlY3Vyc2lvblxuICByZXR1cm4gZ2VuSWZDb25kaXRpb25zKGVsLmlmQ29uZGl0aW9ucy5zbGljZSgpLCBzdGF0ZSwgYWx0R2VuLCBhbHRFbXB0eSlcbn1cblxuZnVuY3Rpb24gZ2VuSWZDb25kaXRpb25zIChcbiAgY29uZGl0aW9ucyxcbiAgc3RhdGUsXG4gIGFsdEdlbixcbiAgYWx0RW1wdHlcbikge1xuICBpZiAoIWNvbmRpdGlvbnMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFsdEVtcHR5IHx8ICdfZSgpJ1xuICB9XG5cbiAgdmFyIGNvbmRpdGlvbiA9IGNvbmRpdGlvbnMuc2hpZnQoKTtcbiAgaWYgKGNvbmRpdGlvbi5leHApIHtcbiAgICByZXR1cm4gKFwiKFwiICsgKGNvbmRpdGlvbi5leHApICsgXCIpP1wiICsgKGdlblRlcm5hcnlFeHAoY29uZGl0aW9uLmJsb2NrKSkgKyBcIjpcIiArIChnZW5JZkNvbmRpdGlvbnMoY29uZGl0aW9ucywgc3RhdGUsIGFsdEdlbiwgYWx0RW1wdHkpKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiXCIgKyAoZ2VuVGVybmFyeUV4cChjb25kaXRpb24uYmxvY2spKSlcbiAgfVxuXG4gIC8vIHYtaWYgd2l0aCB2LW9uY2Ugc2hvdWxkIGdlbmVyYXRlIGNvZGUgbGlrZSAoYSk/X20oMCk6X20oMSlcbiAgZnVuY3Rpb24gZ2VuVGVybmFyeUV4cCAoZWwpIHtcbiAgICByZXR1cm4gYWx0R2VuXG4gICAgICA/IGFsdEdlbihlbCwgc3RhdGUpXG4gICAgICA6IGVsLm9uY2VcbiAgICAgICAgPyBnZW5PbmNlKGVsLCBzdGF0ZSlcbiAgICAgICAgOiBnZW5FbGVtZW50KGVsLCBzdGF0ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5Gb3IgKFxuICBlbCxcbiAgc3RhdGUsXG4gIGFsdEdlbixcbiAgYWx0SGVscGVyXG4pIHtcbiAgdmFyIGV4cCA9IGVsLmZvcjtcbiAgdmFyIGFsaWFzID0gZWwuYWxpYXM7XG4gIHZhciBpdGVyYXRvcjEgPSBlbC5pdGVyYXRvcjEgPyAoXCIsXCIgKyAoZWwuaXRlcmF0b3IxKSkgOiAnJztcbiAgdmFyIGl0ZXJhdG9yMiA9IGVsLml0ZXJhdG9yMiA/IChcIixcIiArIChlbC5pdGVyYXRvcjIpKSA6ICcnO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgc3RhdGUubWF5YmVDb21wb25lbnQoZWwpICYmXG4gICAgZWwudGFnICE9PSAnc2xvdCcgJiZcbiAgICBlbC50YWcgIT09ICd0ZW1wbGF0ZScgJiZcbiAgICAhZWwua2V5XG4gICkge1xuICAgIHN0YXRlLndhcm4oXG4gICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1mb3I9XFxcIlwiICsgYWxpYXMgKyBcIiBpbiBcIiArIGV4cCArIFwiXFxcIj46IGNvbXBvbmVudCBsaXN0cyByZW5kZXJlZCB3aXRoIFwiICtcbiAgICAgIFwidi1mb3Igc2hvdWxkIGhhdmUgZXhwbGljaXQga2V5cy4gXCIgK1xuICAgICAgXCJTZWUgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvbGlzdC5odG1sI2tleSBmb3IgbW9yZSBpbmZvLlwiLFxuICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtZm9yJ10sXG4gICAgICB0cnVlIC8qIHRpcCAqL1xuICAgICk7XG4gIH1cblxuICBlbC5mb3JQcm9jZXNzZWQgPSB0cnVlOyAvLyBhdm9pZCByZWN1cnNpb25cbiAgcmV0dXJuIChhbHRIZWxwZXIgfHwgJ19sJykgKyBcIigoXCIgKyBleHAgKyBcIiksXCIgK1xuICAgIFwiZnVuY3Rpb24oXCIgKyBhbGlhcyArIGl0ZXJhdG9yMSArIGl0ZXJhdG9yMiArIFwiKXtcIiArXG4gICAgICBcInJldHVybiBcIiArICgoYWx0R2VuIHx8IGdlbkVsZW1lbnQpKGVsLCBzdGF0ZSkpICtcbiAgICAnfSknXG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEkMiAoZWwsIHN0YXRlKSB7XG4gIHZhciBkYXRhID0gJ3snO1xuXG4gIC8vIGRpcmVjdGl2ZXMgZmlyc3QuXG4gIC8vIGRpcmVjdGl2ZXMgbWF5IG11dGF0ZSB0aGUgZWwncyBvdGhlciBwcm9wZXJ0aWVzIGJlZm9yZSB0aGV5IGFyZSBnZW5lcmF0ZWQuXG4gIHZhciBkaXJzID0gZ2VuRGlyZWN0aXZlcyhlbCwgc3RhdGUpO1xuICBpZiAoZGlycykgeyBkYXRhICs9IGRpcnMgKyAnLCc7IH1cblxuICAvLyBrZXlcbiAgaWYgKGVsLmtleSkge1xuICAgIGRhdGEgKz0gXCJrZXk6XCIgKyAoZWwua2V5KSArIFwiLFwiO1xuICB9XG4gIC8vIHJlZlxuICBpZiAoZWwucmVmKSB7XG4gICAgZGF0YSArPSBcInJlZjpcIiArIChlbC5yZWYpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLnJlZkluRm9yKSB7XG4gICAgZGF0YSArPSBcInJlZkluRm9yOnRydWUsXCI7XG4gIH1cbiAgLy8gcHJlXG4gIGlmIChlbC5wcmUpIHtcbiAgICBkYXRhICs9IFwicHJlOnRydWUsXCI7XG4gIH1cbiAgLy8gcmVjb3JkIG9yaWdpbmFsIHRhZyBuYW1lIGZvciBjb21wb25lbnRzIHVzaW5nIFwiaXNcIiBhdHRyaWJ1dGVcbiAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgIGRhdGEgKz0gXCJ0YWc6XFxcIlwiICsgKGVsLnRhZykgKyBcIlxcXCIsXCI7XG4gIH1cbiAgLy8gbW9kdWxlIGRhdGEgZ2VuZXJhdGlvbiBmdW5jdGlvbnNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5kYXRhR2VuRm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgZGF0YSArPSBzdGF0ZS5kYXRhR2VuRm5zW2ldKGVsKTtcbiAgfVxuICAvLyBhdHRyaWJ1dGVzXG4gIGlmIChlbC5hdHRycykge1xuICAgIGRhdGEgKz0gXCJhdHRyczpcIiArIChnZW5Qcm9wcyhlbC5hdHRycykpICsgXCIsXCI7XG4gIH1cbiAgLy8gRE9NIHByb3BzXG4gIGlmIChlbC5wcm9wcykge1xuICAgIGRhdGEgKz0gXCJkb21Qcm9wczpcIiArIChnZW5Qcm9wcyhlbC5wcm9wcykpICsgXCIsXCI7XG4gIH1cbiAgLy8gZXZlbnQgaGFuZGxlcnNcbiAgaWYgKGVsLmV2ZW50cykge1xuICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLmV2ZW50cywgZmFsc2UpKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5uYXRpdmVFdmVudHMpIHtcbiAgICBkYXRhICs9IChnZW5IYW5kbGVycyhlbC5uYXRpdmVFdmVudHMsIHRydWUpKSArIFwiLFwiO1xuICB9XG4gIC8vIHNsb3QgdGFyZ2V0XG4gIC8vIG9ubHkgZm9yIG5vbi1zY29wZWQgc2xvdHNcbiAgaWYgKGVsLnNsb3RUYXJnZXQgJiYgIWVsLnNsb3RTY29wZSkge1xuICAgIGRhdGEgKz0gXCJzbG90OlwiICsgKGVsLnNsb3RUYXJnZXQpICsgXCIsXCI7XG4gIH1cbiAgLy8gc2NvcGVkIHNsb3RzXG4gIGlmIChlbC5zY29wZWRTbG90cykge1xuICAgIGRhdGEgKz0gKGdlblNjb3BlZFNsb3RzKGVsLCBlbC5zY29wZWRTbG90cywgc3RhdGUpKSArIFwiLFwiO1xuICB9XG4gIC8vIGNvbXBvbmVudCB2LW1vZGVsXG4gIGlmIChlbC5tb2RlbCkge1xuICAgIGRhdGEgKz0gXCJtb2RlbDp7dmFsdWU6XCIgKyAoZWwubW9kZWwudmFsdWUpICsgXCIsY2FsbGJhY2s6XCIgKyAoZWwubW9kZWwuY2FsbGJhY2spICsgXCIsZXhwcmVzc2lvbjpcIiArIChlbC5tb2RlbC5leHByZXNzaW9uKSArIFwifSxcIjtcbiAgfVxuICAvLyBpbmxpbmUtdGVtcGxhdGVcbiAgaWYgKGVsLmlubGluZVRlbXBsYXRlKSB7XG4gICAgdmFyIGlubGluZVRlbXBsYXRlID0gZ2VuSW5saW5lVGVtcGxhdGUoZWwsIHN0YXRlKTtcbiAgICBpZiAoaW5saW5lVGVtcGxhdGUpIHtcbiAgICAgIGRhdGEgKz0gaW5saW5lVGVtcGxhdGUgKyBcIixcIjtcbiAgICB9XG4gIH1cbiAgZGF0YSA9IGRhdGEucmVwbGFjZSgvLCQvLCAnJykgKyAnfSc7XG4gIC8vIHYtYmluZCBkeW5hbWljIGFyZ3VtZW50IHdyYXBcbiAgLy8gdi1iaW5kIHdpdGggZHluYW1pYyBhcmd1bWVudHMgbXVzdCBiZSBhcHBsaWVkIHVzaW5nIHRoZSBzYW1lIHYtYmluZCBvYmplY3RcbiAgLy8gbWVyZ2UgaGVscGVyIHNvIHRoYXQgY2xhc3Mvc3R5bGUvbXVzdFVzZVByb3AgYXR0cnMgYXJlIGhhbmRsZWQgY29ycmVjdGx5LlxuICBpZiAoZWwuZHluYW1pY0F0dHJzKSB7XG4gICAgZGF0YSA9IFwiX2IoXCIgKyBkYXRhICsgXCIsXFxcIlwiICsgKGVsLnRhZykgKyBcIlxcXCIsXCIgKyAoZ2VuUHJvcHMoZWwuZHluYW1pY0F0dHJzKSkgKyBcIilcIjtcbiAgfVxuICAvLyB2LWJpbmQgZGF0YSB3cmFwXG4gIGlmIChlbC53cmFwRGF0YSkge1xuICAgIGRhdGEgPSBlbC53cmFwRGF0YShkYXRhKTtcbiAgfVxuICAvLyB2LW9uIGRhdGEgd3JhcFxuICBpZiAoZWwud3JhcExpc3RlbmVycykge1xuICAgIGRhdGEgPSBlbC53cmFwTGlzdGVuZXJzKGRhdGEpO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIGdlbkRpcmVjdGl2ZXMgKGVsLCBzdGF0ZSkge1xuICB2YXIgZGlycyA9IGVsLmRpcmVjdGl2ZXM7XG4gIGlmICghZGlycykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0gJ2RpcmVjdGl2ZXM6Wyc7XG4gIHZhciBoYXNSdW50aW1lID0gZmFsc2U7XG4gIHZhciBpLCBsLCBkaXIsIG5lZWRSdW50aW1lO1xuICBmb3IgKGkgPSAwLCBsID0gZGlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIG5lZWRSdW50aW1lID0gdHJ1ZTtcbiAgICB2YXIgZ2VuID0gc3RhdGUuZGlyZWN0aXZlc1tkaXIubmFtZV07XG4gICAgaWYgKGdlbikge1xuICAgICAgLy8gY29tcGlsZS10aW1lIGRpcmVjdGl2ZSB0aGF0IG1hbmlwdWxhdGVzIEFTVC5cbiAgICAgIC8vIHJldHVybnMgdHJ1ZSBpZiBpdCBhbHNvIG5lZWRzIGEgcnVudGltZSBjb3VudGVycGFydC5cbiAgICAgIG5lZWRSdW50aW1lID0gISFnZW4oZWwsIGRpciwgc3RhdGUud2Fybik7XG4gICAgfVxuICAgIGlmIChuZWVkUnVudGltZSkge1xuICAgICAgaGFzUnVudGltZSA9IHRydWU7XG4gICAgICByZXMgKz0gXCJ7bmFtZTpcXFwiXCIgKyAoZGlyLm5hbWUpICsgXCJcXFwiLHJhd05hbWU6XFxcIlwiICsgKGRpci5yYXdOYW1lKSArIFwiXFxcIlwiICsgKGRpci52YWx1ZSA/IChcIix2YWx1ZTooXCIgKyAoZGlyLnZhbHVlKSArIFwiKSxleHByZXNzaW9uOlwiICsgKEpTT04uc3RyaW5naWZ5KGRpci52YWx1ZSkpKSA6ICcnKSArIChkaXIuYXJnID8gKFwiLGFyZzpcIiArIChkaXIuaXNEeW5hbWljQXJnID8gZGlyLmFyZyA6IChcIlxcXCJcIiArIChkaXIuYXJnKSArIFwiXFxcIlwiKSkpIDogJycpICsgKGRpci5tb2RpZmllcnMgPyAoXCIsbW9kaWZpZXJzOlwiICsgKEpTT04uc3RyaW5naWZ5KGRpci5tb2RpZmllcnMpKSkgOiAnJykgKyBcIn0sXCI7XG4gICAgfVxuICB9XG4gIGlmIChoYXNSdW50aW1lKSB7XG4gICAgcmV0dXJuIHJlcy5zbGljZSgwLCAtMSkgKyAnXSdcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5JbmxpbmVUZW1wbGF0ZSAoZWwsIHN0YXRlKSB7XG4gIHZhciBhc3QgPSBlbC5jaGlsZHJlblswXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKFxuICAgIGVsLmNoaWxkcmVuLmxlbmd0aCAhPT0gMSB8fCBhc3QudHlwZSAhPT0gMVxuICApKSB7XG4gICAgc3RhdGUud2FybihcbiAgICAgICdJbmxpbmUtdGVtcGxhdGUgY29tcG9uZW50cyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgY2hpbGQgZWxlbWVudC4nLFxuICAgICAgeyBzdGFydDogZWwuc3RhcnQgfVxuICAgICk7XG4gIH1cbiAgaWYgKGFzdCAmJiBhc3QudHlwZSA9PT0gMSkge1xuICAgIHZhciBpbmxpbmVSZW5kZXJGbnMgPSBnZW5lcmF0ZShhc3QsIHN0YXRlLm9wdGlvbnMpO1xuICAgIHJldHVybiAoXCJpbmxpbmVUZW1wbGF0ZTp7cmVuZGVyOmZ1bmN0aW9uKCl7XCIgKyAoaW5saW5lUmVuZGVyRm5zLnJlbmRlcikgKyBcIn0sc3RhdGljUmVuZGVyRm5zOltcIiArIChpbmxpbmVSZW5kZXJGbnMuc3RhdGljUmVuZGVyRm5zLm1hcChmdW5jdGlvbiAoY29kZSkgeyByZXR1cm4gKFwiZnVuY3Rpb24oKXtcIiArIGNvZGUgKyBcIn1cIik7IH0pLmpvaW4oJywnKSkgKyBcIl19XCIpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuU2NvcGVkU2xvdHMgKFxuICBlbCxcbiAgc2xvdHMsXG4gIHN0YXRlXG4pIHtcbiAgLy8gYnkgZGVmYXVsdCBzY29wZWQgc2xvdHMgYXJlIGNvbnNpZGVyZWQgXCJzdGFibGVcIiwgdGhpcyBhbGxvd3MgY2hpbGRcbiAgLy8gY29tcG9uZW50cyB3aXRoIG9ubHkgc2NvcGVkIHNsb3RzIHRvIHNraXAgZm9yY2VkIHVwZGF0ZXMgZnJvbSBwYXJlbnQuXG4gIC8vIGJ1dCBpbiBzb21lIGNhc2VzIHdlIGhhdmUgdG8gYmFpbC1vdXQgb2YgdGhpcyBvcHRpbWl6YXRpb25cbiAgLy8gZm9yIGV4YW1wbGUgaWYgdGhlIHNsb3QgY29udGFpbnMgZHluYW1pYyBuYW1lcywgaGFzIHYtaWYgb3Igdi1mb3Igb24gdGhlbS4uLlxuICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9IGVsLmZvciB8fCBPYmplY3Qua2V5cyhzbG90cykuc29tZShmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHNsb3QgPSBzbG90c1trZXldO1xuICAgIHJldHVybiAoXG4gICAgICBzbG90LnNsb3RUYXJnZXREeW5hbWljIHx8XG4gICAgICBzbG90LmlmIHx8XG4gICAgICBzbG90LmZvciB8fFxuICAgICAgY29udGFpbnNTbG90Q2hpbGQoc2xvdCkgLy8gaXMgcGFzc2luZyBkb3duIHNsb3QgZnJvbSBwYXJlbnQgd2hpY2ggbWF5IGJlIGR5bmFtaWNcbiAgICApXG4gIH0pO1xuXG4gIC8vICM5NTM0OiBpZiBhIGNvbXBvbmVudCB3aXRoIHNjb3BlZCBzbG90cyBpcyBpbnNpZGUgYSBjb25kaXRpb25hbCBicmFuY2gsXG4gIC8vIGl0J3MgcG9zc2libGUgZm9yIHRoZSBzYW1lIGNvbXBvbmVudCB0byBiZSByZXVzZWQgYnV0IHdpdGggZGlmZmVyZW50XG4gIC8vIGNvbXBpbGVkIHNsb3QgY29udGVudC4gVG8gYXZvaWQgdGhhdCwgd2UgZ2VuZXJhdGUgYSB1bmlxdWUga2V5IGJhc2VkIG9uXG4gIC8vIHRoZSBnZW5lcmF0ZWQgY29kZSBvZiBhbGwgdGhlIHNsb3QgY29udGVudHMuXG4gIHZhciBuZWVkc0tleSA9ICEhZWwuaWY7XG5cbiAgLy8gT1Igd2hlbiBpdCBpcyBpbnNpZGUgYW5vdGhlciBzY29wZWQgc2xvdCBvciB2LWZvciAodGhlIHJlYWN0aXZpdHkgbWF5IGJlXG4gIC8vIGRpc2Nvbm5lY3RlZCBkdWUgdG8gdGhlIGludGVybWVkaWF0ZSBzY29wZSB2YXJpYWJsZSlcbiAgLy8gIzk0MzgsICM5NTA2XG4gIC8vIFRPRE86IHRoaXMgY2FuIGJlIGZ1cnRoZXIgb3B0aW1pemVkIGJ5IHByb3Blcmx5IGFuYWx5emluZyBpbi1zY29wZSBiaW5kaW5nc1xuICAvLyBhbmQgc2tpcCBmb3JjZSB1cGRhdGluZyBvbmVzIHRoYXQgZG8gbm90IGFjdHVhbGx5IHVzZSBzY29wZSB2YXJpYWJsZXMuXG4gIGlmICghbmVlZHNGb3JjZVVwZGF0ZSkge1xuICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKFxuICAgICAgICAocGFyZW50LnNsb3RTY29wZSAmJiBwYXJlbnQuc2xvdFNjb3BlICE9PSBlbXB0eVNsb3RTY29wZVRva2VuKSB8fFxuICAgICAgICBwYXJlbnQuZm9yXG4gICAgICApIHtcbiAgICAgICAgbmVlZHNGb3JjZVVwZGF0ZSA9IHRydWU7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBpZiAocGFyZW50LmlmKSB7XG4gICAgICAgIG5lZWRzS2V5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIGdlbmVyYXRlZFNsb3RzID0gT2JqZWN0LmtleXMoc2xvdHMpXG4gICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBnZW5TY29wZWRTbG90KHNsb3RzW2tleV0sIHN0YXRlKTsgfSlcbiAgICAuam9pbignLCcpO1xuXG4gIHJldHVybiAoXCJzY29wZWRTbG90czpfdShbXCIgKyBnZW5lcmF0ZWRTbG90cyArIFwiXVwiICsgKG5lZWRzRm9yY2VVcGRhdGUgPyBcIixudWxsLHRydWVcIiA6IFwiXCIpICsgKCFuZWVkc0ZvcmNlVXBkYXRlICYmIG5lZWRzS2V5ID8gKFwiLG51bGwsZmFsc2UsXCIgKyAoaGFzaChnZW5lcmF0ZWRTbG90cykpKSA6IFwiXCIpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gIHZhciBoYXNoID0gNTM4MTtcbiAgdmFyIGkgPSBzdHIubGVuZ3RoO1xuICB3aGlsZShpKSB7XG4gICAgaGFzaCA9IChoYXNoICogMzMpIF4gc3RyLmNoYXJDb2RlQXQoLS1pKTtcbiAgfVxuICByZXR1cm4gaGFzaCA+Pj4gMFxufVxuXG5mdW5jdGlvbiBjb250YWluc1Nsb3RDaGlsZCAoZWwpIHtcbiAgaWYgKGVsLnR5cGUgPT09IDEpIHtcbiAgICBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBlbC5jaGlsZHJlbi5zb21lKGNvbnRhaW5zU2xvdENoaWxkKVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBnZW5TY29wZWRTbG90IChcbiAgZWwsXG4gIHN0YXRlXG4pIHtcbiAgdmFyIGlzTGVnYWN5U3ludGF4ID0gZWwuYXR0cnNNYXBbJ3Nsb3Qtc2NvcGUnXTtcbiAgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCAmJiAhaXNMZWdhY3lTeW50YXgpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlLCBnZW5TY29wZWRTbG90LCBcIm51bGxcIilcbiAgfVxuICBpZiAoZWwuZm9yICYmICFlbC5mb3JQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuRm9yKGVsLCBzdGF0ZSwgZ2VuU2NvcGVkU2xvdClcbiAgfVxuICB2YXIgc2xvdFNjb3BlID0gZWwuc2xvdFNjb3BlID09PSBlbXB0eVNsb3RTY29wZVRva2VuXG4gICAgPyBcIlwiXG4gICAgOiBTdHJpbmcoZWwuc2xvdFNjb3BlKTtcbiAgdmFyIGZuID0gXCJmdW5jdGlvbihcIiArIHNsb3RTY29wZSArIFwiKXtcIiArXG4gICAgXCJyZXR1cm4gXCIgKyAoZWwudGFnID09PSAndGVtcGxhdGUnXG4gICAgICA/IGVsLmlmICYmIGlzTGVnYWN5U3ludGF4XG4gICAgICAgID8gKFwiKFwiICsgKGVsLmlmKSArIFwiKT9cIiArIChnZW5DaGlsZHJlbihlbCwgc3RhdGUpIHx8ICd1bmRlZmluZWQnKSArIFwiOnVuZGVmaW5lZFwiKVxuICAgICAgICA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3VuZGVmaW5lZCdcbiAgICAgIDogZ2VuRWxlbWVudChlbCwgc3RhdGUpKSArIFwifVwiO1xuICAvLyByZXZlcnNlIHByb3h5IHYtc2xvdCB3aXRob3V0IHNjb3BlIG9uIHRoaXMuJHNsb3RzXG4gIHZhciByZXZlcnNlUHJveHkgPSBzbG90U2NvcGUgPyBcIlwiIDogXCIscHJveHk6dHJ1ZVwiO1xuICByZXR1cm4gKFwie2tleTpcIiArIChlbC5zbG90VGFyZ2V0IHx8IFwiXFxcImRlZmF1bHRcXFwiXCIpICsgXCIsZm46XCIgKyBmbiArIHJldmVyc2VQcm94eSArIFwifVwiKVxufVxuXG5mdW5jdGlvbiBnZW5DaGlsZHJlbiAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgY2hlY2tTa2lwLFxuICBhbHRHZW5FbGVtZW50LFxuICBhbHRHZW5Ob2RlXG4pIHtcbiAgdmFyIGNoaWxkcmVuID0gZWwuY2hpbGRyZW47XG4gIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICB2YXIgZWwkMSA9IGNoaWxkcmVuWzBdO1xuICAgIC8vIG9wdGltaXplIHNpbmdsZSB2LWZvclxuICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDEgJiZcbiAgICAgIGVsJDEuZm9yICYmXG4gICAgICBlbCQxLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJlxuICAgICAgZWwkMS50YWcgIT09ICdzbG90J1xuICAgICkge1xuICAgICAgdmFyIG5vcm1hbGl6YXRpb25UeXBlID0gY2hlY2tTa2lwXG4gICAgICAgID8gc3RhdGUubWF5YmVDb21wb25lbnQoZWwkMSkgPyBcIiwxXCIgOiBcIiwwXCJcbiAgICAgICAgOiBcIlwiO1xuICAgICAgcmV0dXJuIChcIlwiICsgKChhbHRHZW5FbGVtZW50IHx8IGdlbkVsZW1lbnQpKGVsJDEsIHN0YXRlKSkgKyBub3JtYWxpemF0aW9uVHlwZSlcbiAgICB9XG4gICAgdmFyIG5vcm1hbGl6YXRpb25UeXBlJDEgPSBjaGVja1NraXBcbiAgICAgID8gZ2V0Tm9ybWFsaXphdGlvblR5cGUoY2hpbGRyZW4sIHN0YXRlLm1heWJlQ29tcG9uZW50KVxuICAgICAgOiAwO1xuICAgIHZhciBnZW4gPSBhbHRHZW5Ob2RlIHx8IGdlbk5vZGU7XG4gICAgcmV0dXJuIChcIltcIiArIChjaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGdlbihjLCBzdGF0ZSk7IH0pLmpvaW4oJywnKSkgKyBcIl1cIiArIChub3JtYWxpemF0aW9uVHlwZSQxID8gKFwiLFwiICsgbm9ybWFsaXphdGlvblR5cGUkMSkgOiAnJykpXG4gIH1cbn1cblxuLy8gZGV0ZXJtaW5lIHRoZSBub3JtYWxpemF0aW9uIG5lZWRlZCBmb3IgdGhlIGNoaWxkcmVuIGFycmF5LlxuLy8gMDogbm8gbm9ybWFsaXphdGlvbiBuZWVkZWRcbi8vIDE6IHNpbXBsZSBub3JtYWxpemF0aW9uIG5lZWRlZCAocG9zc2libGUgMS1sZXZlbCBkZWVwIG5lc3RlZCBhcnJheSlcbi8vIDI6IGZ1bGwgbm9ybWFsaXphdGlvbiBuZWVkZWRcbmZ1bmN0aW9uIGdldE5vcm1hbGl6YXRpb25UeXBlIChcbiAgY2hpbGRyZW4sXG4gIG1heWJlQ29tcG9uZW50XG4pIHtcbiAgdmFyIHJlcyA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWwgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoZWwudHlwZSAhPT0gMSkge1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKG5lZWRzTm9ybWFsaXphdGlvbihlbCkgfHxcbiAgICAgICAgKGVsLmlmQ29uZGl0aW9ucyAmJiBlbC5pZkNvbmRpdGlvbnMuc29tZShmdW5jdGlvbiAoYykgeyByZXR1cm4gbmVlZHNOb3JtYWxpemF0aW9uKGMuYmxvY2spOyB9KSkpIHtcbiAgICAgIHJlcyA9IDI7XG4gICAgICBicmVha1xuICAgIH1cbiAgICBpZiAobWF5YmVDb21wb25lbnQoZWwpIHx8XG4gICAgICAgIChlbC5pZkNvbmRpdGlvbnMgJiYgZWwuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIG1heWJlQ29tcG9uZW50KGMuYmxvY2spOyB9KSkpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gbmVlZHNOb3JtYWxpemF0aW9uIChlbCkge1xuICByZXR1cm4gZWwuZm9yICE9PSB1bmRlZmluZWQgfHwgZWwudGFnID09PSAndGVtcGxhdGUnIHx8IGVsLnRhZyA9PT0gJ3Nsb3QnXG59XG5cbmZ1bmN0aW9uIGdlbk5vZGUgKG5vZGUsIHN0YXRlKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICByZXR1cm4gZ2VuRWxlbWVudChub2RlLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IDMgJiYgbm9kZS5pc0NvbW1lbnQpIHtcbiAgICByZXR1cm4gZ2VuQ29tbWVudChub2RlKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZW5UZXh0KG5vZGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuVGV4dCAodGV4dCkge1xuICByZXR1cm4gKFwiX3YoXCIgKyAodGV4dC50eXBlID09PSAyXG4gICAgPyB0ZXh0LmV4cHJlc3Npb24gLy8gbm8gbmVlZCBmb3IgKCkgYmVjYXVzZSBhbHJlYWR5IHdyYXBwZWQgaW4gX3MoKVxuICAgIDogdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzKEpTT04uc3RyaW5naWZ5KHRleHQudGV4dCkpKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5Db21tZW50IChjb21tZW50KSB7XG4gIHJldHVybiAoXCJfZShcIiArIChKU09OLnN0cmluZ2lmeShjb21tZW50LnRleHQpKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5TbG90IChlbCwgc3RhdGUpIHtcbiAgdmFyIHNsb3ROYW1lID0gZWwuc2xvdE5hbWUgfHwgJ1wiZGVmYXVsdFwiJztcbiAgdmFyIGNoaWxkcmVuID0gZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKTtcbiAgdmFyIHJlcyA9IFwiX3QoXCIgKyBzbG90TmFtZSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKTtcbiAgdmFyIGF0dHJzID0gZWwuYXR0cnMgfHwgZWwuZHluYW1pY0F0dHJzXG4gICAgPyBnZW5Qcm9wcygoZWwuYXR0cnMgfHwgW10pLmNvbmNhdChlbC5keW5hbWljQXR0cnMgfHwgW10pLm1hcChmdW5jdGlvbiAoYXR0cikgeyByZXR1cm4gKHtcbiAgICAgICAgLy8gc2xvdCBwcm9wcyBhcmUgY2FtZWxpemVkXG4gICAgICAgIG5hbWU6IGNhbWVsaXplKGF0dHIubmFtZSksXG4gICAgICAgIHZhbHVlOiBhdHRyLnZhbHVlLFxuICAgICAgICBkeW5hbWljOiBhdHRyLmR5bmFtaWNcbiAgICAgIH0pOyB9KSlcbiAgICA6IG51bGw7XG4gIHZhciBiaW5kJCQxID0gZWwuYXR0cnNNYXBbJ3YtYmluZCddO1xuICBpZiAoKGF0dHJzIHx8IGJpbmQkJDEpICYmICFjaGlsZHJlbikge1xuICAgIHJlcyArPSBcIixudWxsXCI7XG4gIH1cbiAgaWYgKGF0dHJzKSB7XG4gICAgcmVzICs9IFwiLFwiICsgYXR0cnM7XG4gIH1cbiAgaWYgKGJpbmQkJDEpIHtcbiAgICByZXMgKz0gKGF0dHJzID8gJycgOiAnLG51bGwnKSArIFwiLFwiICsgYmluZCQkMTtcbiAgfVxuICByZXR1cm4gcmVzICsgJyknXG59XG5cbi8vIGNvbXBvbmVudE5hbWUgaXMgZWwuY29tcG9uZW50LCB0YWtlIGl0IGFzIGFyZ3VtZW50IHRvIHNodW4gZmxvdydzIHBlc3NpbWlzdGljIHJlZmluZW1lbnRcbmZ1bmN0aW9uIGdlbkNvbXBvbmVudCAoXG4gIGNvbXBvbmVudE5hbWUsXG4gIGVsLFxuICBzdGF0ZVxuKSB7XG4gIHZhciBjaGlsZHJlbiA9IGVsLmlubGluZVRlbXBsYXRlID8gbnVsbCA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSwgdHJ1ZSk7XG4gIHJldHVybiAoXCJfYyhcIiArIGNvbXBvbmVudE5hbWUgKyBcIixcIiArIChnZW5EYXRhJDIoZWwsIHN0YXRlKSkgKyAoY2hpbGRyZW4gPyAoXCIsXCIgKyBjaGlsZHJlbikgOiAnJykgKyBcIilcIilcbn1cblxuZnVuY3Rpb24gZ2VuUHJvcHMgKHByb3BzKSB7XG4gIHZhciBzdGF0aWNQcm9wcyA9IFwiXCI7XG4gIHZhciBkeW5hbWljUHJvcHMgPSBcIlwiO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByb3AgPSBwcm9wc1tpXTtcbiAgICB2YXIgdmFsdWUgPSB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMocHJvcC52YWx1ZSk7XG4gICAgaWYgKHByb3AuZHluYW1pYykge1xuICAgICAgZHluYW1pY1Byb3BzICs9IChwcm9wLm5hbWUpICsgXCIsXCIgKyB2YWx1ZSArIFwiLFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0aWNQcm9wcyArPSBcIlxcXCJcIiArIChwcm9wLm5hbWUpICsgXCJcXFwiOlwiICsgdmFsdWUgKyBcIixcIjtcbiAgICB9XG4gIH1cbiAgc3RhdGljUHJvcHMgPSBcIntcIiArIChzdGF0aWNQcm9wcy5zbGljZSgwLCAtMSkpICsgXCJ9XCI7XG4gIGlmIChkeW5hbWljUHJvcHMpIHtcbiAgICByZXR1cm4gKFwiX2QoXCIgKyBzdGF0aWNQcm9wcyArIFwiLFtcIiArIChkeW5hbWljUHJvcHMuc2xpY2UoMCwgLTEpKSArIFwiXSlcIilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RhdGljUHJvcHNcbiAgfVxufVxuXG4vLyAjMzg5NSwgIzQyNjhcbmZ1bmN0aW9uIHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyAodGV4dCkge1xuICByZXR1cm4gdGV4dFxuICAgIC5yZXBsYWNlKC9cXHUyMDI4L2csICdcXFxcdTIwMjgnKVxuICAgIC5yZXBsYWNlKC9cXHUyMDI5L2csICdcXFxcdTIwMjknKVxufVxuXG4vKiAgKi9cblxuXG5cbi8vIHRoZXNlIGtleXdvcmRzIHNob3VsZCBub3QgYXBwZWFyIGluc2lkZSBleHByZXNzaW9ucywgYnV0IG9wZXJhdG9ycyBsaWtlXG4vLyB0eXBlb2YsIGluc3RhbmNlb2YgYW5kIGluIGFyZSBhbGxvd2VkXG52YXIgcHJvaGliaXRlZEtleXdvcmRSRSA9IG5ldyBSZWdFeHAoJ1xcXFxiJyArIChcbiAgJ2RvLGlmLGZvcixsZXQsbmV3LHRyeSx2YXIsY2FzZSxlbHNlLHdpdGgsYXdhaXQsYnJlYWssY2F0Y2gsY2xhc3MsY29uc3QsJyArXG4gICdzdXBlcix0aHJvdyx3aGlsZSx5aWVsZCxkZWxldGUsZXhwb3J0LGltcG9ydCxyZXR1cm4sc3dpdGNoLGRlZmF1bHQsJyArXG4gICdleHRlbmRzLGZpbmFsbHksY29udGludWUsZGVidWdnZXIsZnVuY3Rpb24sYXJndW1lbnRzJ1xuKS5zcGxpdCgnLCcpLmpvaW4oJ1xcXFxifFxcXFxiJykgKyAnXFxcXGInKTtcblxuLy8gdGhlc2UgdW5hcnkgb3BlcmF0b3JzIHNob3VsZCBub3QgYmUgdXNlZCBhcyBwcm9wZXJ0eS9tZXRob2QgbmFtZXNcbnZhciB1bmFyeU9wZXJhdG9yc1JFID0gbmV3IFJlZ0V4cCgnXFxcXGInICsgKFxuICAnZGVsZXRlLHR5cGVvZix2b2lkJ1xuKS5zcGxpdCgnLCcpLmpvaW4oJ1xcXFxzKlxcXFwoW15cXFxcKV0qXFxcXCl8XFxcXGInKSArICdcXFxccypcXFxcKFteXFxcXCldKlxcXFwpJyk7XG5cbi8vIHN0cmlwIHN0cmluZ3MgaW4gZXhwcmVzc2lvbnNcbnZhciBzdHJpcFN0cmluZ1JFID0gLycoPzpbXidcXFxcXXxcXFxcLikqJ3xcIig/OlteXCJcXFxcXXxcXFxcLikqXCJ8YCg/OlteYFxcXFxdfFxcXFwuKSpcXCRcXHt8XFx9KD86W15gXFxcXF18XFxcXC4pKmB8YCg/OlteYFxcXFxdfFxcXFwuKSpgL2c7XG5cbi8vIGRldGVjdCBwcm9ibGVtYXRpYyBleHByZXNzaW9ucyBpbiBhIHRlbXBsYXRlXG5mdW5jdGlvbiBkZXRlY3RFcnJvcnMgKGFzdCwgd2Fybikge1xuICBpZiAoYXN0KSB7XG4gICAgY2hlY2tOb2RlKGFzdCwgd2Fybik7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tOb2RlIChub2RlLCB3YXJuKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIG5vZGUuYXR0cnNNYXApIHtcbiAgICAgIGlmIChkaXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG5vZGUuYXR0cnNNYXBbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHZhciByYW5nZSA9IG5vZGUucmF3QXR0cnNNYXBbbmFtZV07XG4gICAgICAgICAgaWYgKG5hbWUgPT09ICd2LWZvcicpIHtcbiAgICAgICAgICAgIGNoZWNrRm9yKG5vZGUsIChcInYtZm9yPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLCB3YXJuLCByYW5nZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAndi1zbG90JyB8fCBuYW1lWzBdID09PSAnIycpIHtcbiAgICAgICAgICAgIGNoZWNrRnVuY3Rpb25QYXJhbWV0ZXJFeHByZXNzaW9uKHZhbHVlLCAobmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLCB3YXJuLCByYW5nZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChvblJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgICAgIGNoZWNrRXZlbnQodmFsdWUsIChuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hlY2tFeHByZXNzaW9uKHZhbHVlLCAobmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLCB3YXJuLCByYW5nZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2hlY2tOb2RlKG5vZGUuY2hpbGRyZW5baV0sIHdhcm4pO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IDIpIHtcbiAgICBjaGVja0V4cHJlc3Npb24obm9kZS5leHByZXNzaW9uLCBub2RlLnRleHQsIHdhcm4sIG5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrRXZlbnQgKGV4cCwgdGV4dCwgd2FybiwgcmFuZ2UpIHtcbiAgdmFyIHN0cmlwcGVkID0gZXhwLnJlcGxhY2Uoc3RyaXBTdHJpbmdSRSwgJycpO1xuICB2YXIga2V5d29yZE1hdGNoID0gc3RyaXBwZWQubWF0Y2godW5hcnlPcGVyYXRvcnNSRSk7XG4gIGlmIChrZXl3b3JkTWF0Y2ggJiYgc3RyaXBwZWQuY2hhckF0KGtleXdvcmRNYXRjaC5pbmRleCAtIDEpICE9PSAnJCcpIHtcbiAgICB3YXJuKFxuICAgICAgXCJhdm9pZCB1c2luZyBKYXZhU2NyaXB0IHVuYXJ5IG9wZXJhdG9yIGFzIHByb3BlcnR5IG5hbWU6IFwiICtcbiAgICAgIFwiXFxcIlwiICsgKGtleXdvcmRNYXRjaFswXSkgKyBcIlxcXCIgaW4gZXhwcmVzc2lvbiBcIiArICh0ZXh0LnRyaW0oKSksXG4gICAgICByYW5nZVxuICAgICk7XG4gIH1cbiAgY2hlY2tFeHByZXNzaW9uKGV4cCwgdGV4dCwgd2FybiwgcmFuZ2UpO1xufVxuXG5mdW5jdGlvbiBjaGVja0ZvciAobm9kZSwgdGV4dCwgd2FybiwgcmFuZ2UpIHtcbiAgY2hlY2tFeHByZXNzaW9uKG5vZGUuZm9yIHx8ICcnLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLmFsaWFzLCAndi1mb3IgYWxpYXMnLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLml0ZXJhdG9yMSwgJ3YtZm9yIGl0ZXJhdG9yJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xuICBjaGVja0lkZW50aWZpZXIobm9kZS5pdGVyYXRvcjIsICd2LWZvciBpdGVyYXRvcicsIHRleHQsIHdhcm4sIHJhbmdlKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tJZGVudGlmaWVyIChcbiAgaWRlbnQsXG4gIHR5cGUsXG4gIHRleHQsXG4gIHdhcm4sXG4gIHJhbmdlXG4pIHtcbiAgaWYgKHR5cGVvZiBpZGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICB0cnkge1xuICAgICAgbmV3IEZ1bmN0aW9uKChcInZhciBcIiArIGlkZW50ICsgXCI9X1wiKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgd2FybigoXCJpbnZhbGlkIFwiICsgdHlwZSArIFwiIFxcXCJcIiArIGlkZW50ICsgXCJcXFwiIGluIGV4cHJlc3Npb246IFwiICsgKHRleHQudHJpbSgpKSksIHJhbmdlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tFeHByZXNzaW9uIChleHAsIHRleHQsIHdhcm4sIHJhbmdlKSB7XG4gIHRyeSB7XG4gICAgbmV3IEZ1bmN0aW9uKChcInJldHVybiBcIiArIGV4cCkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIGtleXdvcmRNYXRjaCA9IGV4cC5yZXBsYWNlKHN0cmlwU3RyaW5nUkUsICcnKS5tYXRjaChwcm9oaWJpdGVkS2V5d29yZFJFKTtcbiAgICBpZiAoa2V5d29yZE1hdGNoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcImF2b2lkIHVzaW5nIEphdmFTY3JpcHQga2V5d29yZCBhcyBwcm9wZXJ0eSBuYW1lOiBcIiArXG4gICAgICAgIFwiXFxcIlwiICsgKGtleXdvcmRNYXRjaFswXSkgKyBcIlxcXCJcXG4gIFJhdyBleHByZXNzaW9uOiBcIiArICh0ZXh0LnRyaW0oKSksXG4gICAgICAgIHJhbmdlXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcImludmFsaWQgZXhwcmVzc2lvbjogXCIgKyAoZS5tZXNzYWdlKSArIFwiIGluXFxuXFxuXCIgK1xuICAgICAgICBcIiAgICBcIiArIGV4cCArIFwiXFxuXFxuXCIgK1xuICAgICAgICBcIiAgUmF3IGV4cHJlc3Npb246IFwiICsgKHRleHQudHJpbSgpKSArIFwiXFxuXCIsXG4gICAgICAgIHJhbmdlXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0Z1bmN0aW9uUGFyYW1ldGVyRXhwcmVzc2lvbiAoZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICB0cnkge1xuICAgIG5ldyBGdW5jdGlvbihleHAsICcnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHdhcm4oXG4gICAgICBcImludmFsaWQgZnVuY3Rpb24gcGFyYW1ldGVyIGV4cHJlc3Npb246IFwiICsgKGUubWVzc2FnZSkgKyBcIiBpblxcblxcblwiICtcbiAgICAgIFwiICAgIFwiICsgZXhwICsgXCJcXG5cXG5cIiArXG4gICAgICBcIiAgUmF3IGV4cHJlc3Npb246IFwiICsgKHRleHQudHJpbSgpKSArIFwiXFxuXCIsXG4gICAgICByYW5nZVxuICAgICk7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciByYW5nZSA9IDI7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ29kZUZyYW1lIChcbiAgc291cmNlLFxuICBzdGFydCxcbiAgZW5kXG4pIHtcbiAgaWYgKCBzdGFydCA9PT0gdm9pZCAwICkgc3RhcnQgPSAwO1xuICBpZiAoIGVuZCA9PT0gdm9pZCAwICkgZW5kID0gc291cmNlLmxlbmd0aDtcblxuICB2YXIgbGluZXMgPSBzb3VyY2Uuc3BsaXQoL1xccj9cXG4vKTtcbiAgdmFyIGNvdW50ID0gMDtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY291bnQgKz0gbGluZXNbaV0ubGVuZ3RoICsgMTtcbiAgICBpZiAoY291bnQgPj0gc3RhcnQpIHtcbiAgICAgIGZvciAodmFyIGogPSBpIC0gcmFuZ2U7IGogPD0gaSArIHJhbmdlIHx8IGVuZCA+IGNvdW50OyBqKyspIHtcbiAgICAgICAgaWYgKGogPCAwIHx8IGogPj0gbGluZXMubGVuZ3RoKSB7IGNvbnRpbnVlIH1cbiAgICAgICAgcmVzLnB1c2goKFwiXCIgKyAoaiArIDEpICsgKHJlcGVhdCQxKFwiIFwiLCAzIC0gU3RyaW5nKGogKyAxKS5sZW5ndGgpKSArIFwifCAgXCIgKyAobGluZXNbal0pKSk7XG4gICAgICAgIHZhciBsaW5lTGVuZ3RoID0gbGluZXNbal0ubGVuZ3RoO1xuICAgICAgICBpZiAoaiA9PT0gaSkge1xuICAgICAgICAgIC8vIHB1c2ggdW5kZXJsaW5lXG4gICAgICAgICAgdmFyIHBhZCA9IHN0YXJ0IC0gKGNvdW50IC0gbGluZUxlbmd0aCkgKyAxO1xuICAgICAgICAgIHZhciBsZW5ndGggPSBlbmQgPiBjb3VudCA/IGxpbmVMZW5ndGggLSBwYWQgOiBlbmQgLSBzdGFydDtcbiAgICAgICAgICByZXMucHVzaChcIiAgIHwgIFwiICsgcmVwZWF0JDEoXCIgXCIsIHBhZCkgKyByZXBlYXQkMShcIl5cIiwgbGVuZ3RoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaiA+IGkpIHtcbiAgICAgICAgICBpZiAoZW5kID4gY291bnQpIHtcbiAgICAgICAgICAgIHZhciBsZW5ndGgkMSA9IE1hdGgubWluKGVuZCAtIGNvdW50LCBsaW5lTGVuZ3RoKTtcbiAgICAgICAgICAgIHJlcy5wdXNoKFwiICAgfCAgXCIgKyByZXBlYXQkMShcIl5cIiwgbGVuZ3RoJDEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY291bnQgKz0gbGluZUxlbmd0aCArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHJldHVybiByZXMuam9pbignXFxuJylcbn1cblxuZnVuY3Rpb24gcmVwZWF0JDEgKHN0ciwgbikge1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmIChuID4gMCkge1xuICAgIHdoaWxlICh0cnVlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIGlmIChuICYgMSkgeyByZXN1bHQgKz0gc3RyOyB9XG4gICAgICBuID4+Pj0gMTtcbiAgICAgIGlmIChuIDw9IDApIHsgYnJlYWsgfVxuICAgICAgc3RyICs9IHN0cjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uIChjb2RlLCBlcnJvcnMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKGNvZGUpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9ycy5wdXNoKHsgZXJyOiBlcnIsIGNvZGU6IGNvZGUgfSk7XG4gICAgcmV0dXJuIG5vb3BcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21waWxlVG9GdW5jdGlvbkZuIChjb21waWxlKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXBpbGVUb0Z1bmN0aW9ucyAoXG4gICAgdGVtcGxhdGUsXG4gICAgb3B0aW9ucyxcbiAgICB2bVxuICApIHtcbiAgICBvcHRpb25zID0gZXh0ZW5kKHt9LCBvcHRpb25zKTtcbiAgICB2YXIgd2FybiQkMSA9IG9wdGlvbnMud2FybiB8fCB3YXJuO1xuICAgIGRlbGV0ZSBvcHRpb25zLndhcm47XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gZGV0ZWN0IHBvc3NpYmxlIENTUCByZXN0cmljdGlvblxuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gMScpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZS50b1N0cmluZygpLm1hdGNoKC91bnNhZmUtZXZhbHxDU1AvKSkge1xuICAgICAgICAgIHdhcm4kJDEoXG4gICAgICAgICAgICAnSXQgc2VlbXMgeW91IGFyZSB1c2luZyB0aGUgc3RhbmRhbG9uZSBidWlsZCBvZiBWdWUuanMgaW4gYW4gJyArXG4gICAgICAgICAgICAnZW52aXJvbm1lbnQgd2l0aCBDb250ZW50IFNlY3VyaXR5IFBvbGljeSB0aGF0IHByb2hpYml0cyB1bnNhZmUtZXZhbC4gJyArXG4gICAgICAgICAgICAnVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGNhbm5vdCB3b3JrIGluIHRoaXMgZW52aXJvbm1lbnQuIENvbnNpZGVyICcgK1xuICAgICAgICAgICAgJ3JlbGF4aW5nIHRoZSBwb2xpY3kgdG8gYWxsb3cgdW5zYWZlLWV2YWwgb3IgcHJlLWNvbXBpbGluZyB5b3VyICcgK1xuICAgICAgICAgICAgJ3RlbXBsYXRlcyBpbnRvIHJlbmRlciBmdW5jdGlvbnMuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjaGVjayBjYWNoZVxuICAgIHZhciBrZXkgPSBvcHRpb25zLmRlbGltaXRlcnNcbiAgICAgID8gU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVycykgKyB0ZW1wbGF0ZVxuICAgICAgOiB0ZW1wbGF0ZTtcbiAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgcmV0dXJuIGNhY2hlW2tleV1cbiAgICB9XG5cbiAgICAvLyBjb21waWxlXG4gICAgdmFyIGNvbXBpbGVkID0gY29tcGlsZSh0ZW1wbGF0ZSwgb3B0aW9ucyk7XG5cbiAgICAvLyBjaGVjayBjb21waWxhdGlvbiBlcnJvcnMvdGlwc1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoY29tcGlsZWQuZXJyb3JzICYmIGNvbXBpbGVkLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBjb21waWxlZC5lcnJvcnMuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgICAgXCJFcnJvciBjb21waWxpbmcgdGVtcGxhdGU6XFxuXFxuXCIgKyAoZS5tc2cpICsgXCJcXG5cXG5cIiArXG4gICAgICAgICAgICAgIGdlbmVyYXRlQ29kZUZyYW1lKHRlbXBsYXRlLCBlLnN0YXJ0LCBlLmVuZCksXG4gICAgICAgICAgICAgIHZtXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4kJDEoXG4gICAgICAgICAgICBcIkVycm9yIGNvbXBpbGluZyB0ZW1wbGF0ZTpcXG5cXG5cIiArIHRlbXBsYXRlICsgXCJcXG5cXG5cIiArXG4gICAgICAgICAgICBjb21waWxlZC5lcnJvcnMubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiAoXCItIFwiICsgZSk7IH0pLmpvaW4oJ1xcbicpICsgJ1xcbicsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjb21waWxlZC50aXBzICYmIGNvbXBpbGVkLnRpcHMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgY29tcGlsZWQudGlwcy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiB0aXAoZS5tc2csIHZtKTsgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29tcGlsZWQudGlwcy5mb3JFYWNoKGZ1bmN0aW9uIChtc2cpIHsgcmV0dXJuIHRpcChtc2csIHZtKTsgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB0dXJuIGNvZGUgaW50byBmdW5jdGlvbnNcbiAgICB2YXIgcmVzID0ge307XG4gICAgdmFyIGZuR2VuRXJyb3JzID0gW107XG4gICAgcmVzLnJlbmRlciA9IGNyZWF0ZUZ1bmN0aW9uKGNvbXBpbGVkLnJlbmRlciwgZm5HZW5FcnJvcnMpO1xuICAgIHJlcy5zdGF0aWNSZW5kZXJGbnMgPSBjb21waWxlZC5zdGF0aWNSZW5kZXJGbnMubWFwKGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb24oY29kZSwgZm5HZW5FcnJvcnMpXG4gICAgfSk7XG5cbiAgICAvLyBjaGVjayBmdW5jdGlvbiBnZW5lcmF0aW9uIGVycm9ycy5cbiAgICAvLyB0aGlzIHNob3VsZCBvbmx5IGhhcHBlbiBpZiB0aGVyZSBpcyBhIGJ1ZyBpbiB0aGUgY29tcGlsZXIgaXRzZWxmLlxuICAgIC8vIG1vc3RseSBmb3IgY29kZWdlbiBkZXZlbG9wbWVudCB1c2VcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCghY29tcGlsZWQuZXJyb3JzIHx8ICFjb21waWxlZC5lcnJvcnMubGVuZ3RoKSAmJiBmbkdlbkVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgd2FybiQkMShcbiAgICAgICAgICBcIkZhaWxlZCB0byBnZW5lcmF0ZSByZW5kZXIgZnVuY3Rpb246XFxuXFxuXCIgK1xuICAgICAgICAgIGZuR2VuRXJyb3JzLm1hcChmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICB2YXIgZXJyID0gcmVmLmVycjtcbiAgICAgICAgICAgIHZhciBjb2RlID0gcmVmLmNvZGU7XG5cbiAgICAgICAgICAgIHJldHVybiAoKGVyci50b1N0cmluZygpKSArIFwiIGluXFxuXFxuXCIgKyBjb2RlICsgXCJcXG5cIik7XG4gICAgICAgIH0pLmpvaW4oJ1xcbicpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChjYWNoZVtrZXldID0gcmVzKVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVDb21waWxlckNyZWF0b3IgKGJhc2VDb21waWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVDb21waWxlciAoYmFzZU9wdGlvbnMpIHtcbiAgICBmdW5jdGlvbiBjb21waWxlIChcbiAgICAgIHRlbXBsYXRlLFxuICAgICAgb3B0aW9uc1xuICAgICkge1xuICAgICAgdmFyIGZpbmFsT3B0aW9ucyA9IE9iamVjdC5jcmVhdGUoYmFzZU9wdGlvbnMpO1xuICAgICAgdmFyIGVycm9ycyA9IFtdO1xuICAgICAgdmFyIHRpcHMgPSBbXTtcblxuICAgICAgdmFyIHdhcm4gPSBmdW5jdGlvbiAobXNnLCByYW5nZSwgdGlwKSB7XG4gICAgICAgICh0aXAgPyB0aXBzIDogZXJyb3JzKS5wdXNoKG1zZyk7XG4gICAgICB9O1xuXG4gICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgICAgdmFyIGxlYWRpbmdTcGFjZUxlbmd0aCA9IHRlbXBsYXRlLm1hdGNoKC9eXFxzKi8pWzBdLmxlbmd0aDtcblxuICAgICAgICAgIHdhcm4gPSBmdW5jdGlvbiAobXNnLCByYW5nZSwgdGlwKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHsgbXNnOiBtc2cgfTtcbiAgICAgICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRhdGEuc3RhcnQgPSByYW5nZS5zdGFydCArIGxlYWRpbmdTcGFjZUxlbmd0aDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAocmFuZ2UuZW5kICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkYXRhLmVuZCA9IHJhbmdlLmVuZCArIGxlYWRpbmdTcGFjZUxlbmd0aDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKHRpcCA/IHRpcHMgOiBlcnJvcnMpLnB1c2goZGF0YSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtZXJnZSBjdXN0b20gbW9kdWxlc1xuICAgICAgICBpZiAob3B0aW9ucy5tb2R1bGVzKSB7XG4gICAgICAgICAgZmluYWxPcHRpb25zLm1vZHVsZXMgPVxuICAgICAgICAgICAgKGJhc2VPcHRpb25zLm1vZHVsZXMgfHwgW10pLmNvbmNhdChvcHRpb25zLm1vZHVsZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIG1lcmdlIGN1c3RvbSBkaXJlY3RpdmVzXG4gICAgICAgIGlmIChvcHRpb25zLmRpcmVjdGl2ZXMpIHtcbiAgICAgICAgICBmaW5hbE9wdGlvbnMuZGlyZWN0aXZlcyA9IGV4dGVuZChcbiAgICAgICAgICAgIE9iamVjdC5jcmVhdGUoYmFzZU9wdGlvbnMuZGlyZWN0aXZlcyB8fCBudWxsKSxcbiAgICAgICAgICAgIG9wdGlvbnMuZGlyZWN0aXZlc1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29weSBvdGhlciBvcHRpb25zXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgaWYgKGtleSAhPT0gJ21vZHVsZXMnICYmIGtleSAhPT0gJ2RpcmVjdGl2ZXMnKSB7XG4gICAgICAgICAgICBmaW5hbE9wdGlvbnNba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZmluYWxPcHRpb25zLndhcm4gPSB3YXJuO1xuXG4gICAgICB2YXIgY29tcGlsZWQgPSBiYXNlQ29tcGlsZSh0ZW1wbGF0ZS50cmltKCksIGZpbmFsT3B0aW9ucyk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBkZXRlY3RFcnJvcnMoY29tcGlsZWQuYXN0LCB3YXJuKTtcbiAgICAgIH1cbiAgICAgIGNvbXBpbGVkLmVycm9ycyA9IGVycm9ycztcbiAgICAgIGNvbXBpbGVkLnRpcHMgPSB0aXBzO1xuICAgICAgcmV0dXJuIGNvbXBpbGVkXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbXBpbGU6IGNvbXBpbGUsXG4gICAgICBjb21waWxlVG9GdW5jdGlvbnM6IGNyZWF0ZUNvbXBpbGVUb0Z1bmN0aW9uRm4oY29tcGlsZSlcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8vIGBjcmVhdGVDb21waWxlckNyZWF0b3JgIGFsbG93cyBjcmVhdGluZyBjb21waWxlcnMgdGhhdCB1c2UgYWx0ZXJuYXRpdmVcbi8vIHBhcnNlci9vcHRpbWl6ZXIvY29kZWdlbiwgZS5nIHRoZSBTU1Igb3B0aW1pemluZyBjb21waWxlci5cbi8vIEhlcmUgd2UganVzdCBleHBvcnQgYSBkZWZhdWx0IGNvbXBpbGVyIHVzaW5nIHRoZSBkZWZhdWx0IHBhcnRzLlxudmFyIGNyZWF0ZUNvbXBpbGVyID0gY3JlYXRlQ29tcGlsZXJDcmVhdG9yKGZ1bmN0aW9uIGJhc2VDb21waWxlIChcbiAgdGVtcGxhdGUsXG4gIG9wdGlvbnNcbikge1xuICB2YXIgYXN0ID0gcGFyc2UodGVtcGxhdGUudHJpbSgpLCBvcHRpb25zKTtcbiAgaWYgKG9wdGlvbnMub3B0aW1pemUgIT09IGZhbHNlKSB7XG4gICAgb3B0aW1pemUoYXN0LCBvcHRpb25zKTtcbiAgfVxuICB2YXIgY29kZSA9IGdlbmVyYXRlKGFzdCwgb3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgYXN0OiBhc3QsXG4gICAgcmVuZGVyOiBjb2RlLnJlbmRlcixcbiAgICBzdGF0aWNSZW5kZXJGbnM6IGNvZGUuc3RhdGljUmVuZGVyRm5zXG4gIH1cbn0pO1xuXG4vKiAgKi9cblxudmFyIHJlZiQxID0gY3JlYXRlQ29tcGlsZXIoYmFzZU9wdGlvbnMpO1xudmFyIGNvbXBpbGUgPSByZWYkMS5jb21waWxlO1xudmFyIGNvbXBpbGVUb0Z1bmN0aW9ucyA9IHJlZiQxLmNvbXBpbGVUb0Z1bmN0aW9ucztcblxuLyogICovXG5cbi8vIGNoZWNrIHdoZXRoZXIgY3VycmVudCBicm93c2VyIGVuY29kZXMgYSBjaGFyIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzXG52YXIgZGl2O1xuZnVuY3Rpb24gZ2V0U2hvdWxkRGVjb2RlIChocmVmKSB7XG4gIGRpdiA9IGRpdiB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZGl2LmlubmVySFRNTCA9IGhyZWYgPyBcIjxhIGhyZWY9XFxcIlxcblxcXCIvPlwiIDogXCI8ZGl2IGE9XFxcIlxcblxcXCIvPlwiO1xuICByZXR1cm4gZGl2LmlubmVySFRNTC5pbmRleE9mKCcmIzEwOycpID4gMFxufVxuXG4vLyAjMzY2MzogSUUgZW5jb2RlcyBuZXdsaW5lcyBpbnNpZGUgYXR0cmlidXRlIHZhbHVlcyB3aGlsZSBvdGhlciBicm93c2VycyBkb24ndFxudmFyIHNob3VsZERlY29kZU5ld2xpbmVzID0gaW5Ccm93c2VyID8gZ2V0U2hvdWxkRGVjb2RlKGZhbHNlKSA6IGZhbHNlO1xuLy8gIzY4Mjg6IGNocm9tZSBlbmNvZGVzIGNvbnRlbnQgaW4gYVtocmVmXVxudmFyIHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZiA9IGluQnJvd3NlciA/IGdldFNob3VsZERlY29kZSh0cnVlKSA6IGZhbHNlO1xuXG4vKiAgKi9cblxudmFyIGlkVG9UZW1wbGF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoaWQpIHtcbiAgdmFyIGVsID0gcXVlcnkoaWQpO1xuICByZXR1cm4gZWwgJiYgZWwuaW5uZXJIVE1MXG59KTtcblxudmFyIG1vdW50ID0gVnVlLnByb3RvdHlwZS4kbW91bnQ7XG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgcXVlcnkoZWwpO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZWwgPT09IGRvY3VtZW50LmJvZHkgfHwgZWwgPT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiRG8gbm90IG1vdW50IFZ1ZSB0byA8aHRtbD4gb3IgPGJvZHk+IC0gbW91bnQgdG8gbm9ybWFsIGVsZW1lbnRzIGluc3RlYWQuXCJcbiAgICApO1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnM7XG4gIC8vIHJlc29sdmUgdGVtcGxhdGUvZWwgYW5kIGNvbnZlcnQgdG8gcmVuZGVyIGZ1bmN0aW9uXG4gIGlmICghb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2YXIgdGVtcGxhdGUgPSBvcHRpb25zLnRlbXBsYXRlO1xuICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHRlbXBsYXRlLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgICAgICAgdGVtcGxhdGUgPSBpZFRvVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgKFwiVGVtcGxhdGUgZWxlbWVudCBub3QgZm91bmQgb3IgaXMgZW1wdHk6IFwiICsgKG9wdGlvbnMudGVtcGxhdGUpKSxcbiAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGVtcGxhdGUubm9kZVR5cGUpIHtcbiAgICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5pbm5lckhUTUw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oJ2ludmFsaWQgdGVtcGxhdGUgb3B0aW9uOicgKyB0ZW1wbGF0ZSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsKSB7XG4gICAgICB0ZW1wbGF0ZSA9IGdldE91dGVySFRNTChlbCk7XG4gICAgfVxuICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgICBtYXJrKCdjb21waWxlJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWYgPSBjb21waWxlVG9GdW5jdGlvbnModGVtcGxhdGUsIHtcbiAgICAgICAgb3V0cHV0U291cmNlUmFuZ2U6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG4gICAgICAgIHNob3VsZERlY29kZU5ld2xpbmVzOiBzaG91bGREZWNvZGVOZXdsaW5lcyxcbiAgICAgICAgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmOiBzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWYsXG4gICAgICAgIGRlbGltaXRlcnM6IG9wdGlvbnMuZGVsaW1pdGVycyxcbiAgICAgICAgY29tbWVudHM6IG9wdGlvbnMuY29tbWVudHNcbiAgICAgIH0sIHRoaXMpO1xuICAgICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgICB2YXIgc3RhdGljUmVuZGVyRm5zID0gcmVmLnN0YXRpY1JlbmRlckZucztcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyO1xuICAgICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnM7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgICAgbWFyaygnY29tcGlsZSBlbmQnKTtcbiAgICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyAodGhpcy5fbmFtZSkgKyBcIiBjb21waWxlXCIpLCAnY29tcGlsZScsICdjb21waWxlIGVuZCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbW91bnQuY2FsbCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxufTtcblxuLyoqXG4gKiBHZXQgb3V0ZXJIVE1MIG9mIGVsZW1lbnRzLCB0YWtpbmcgY2FyZVxuICogb2YgU1ZHIGVsZW1lbnRzIGluIElFIGFzIHdlbGwuXG4gKi9cbmZ1bmN0aW9uIGdldE91dGVySFRNTCAoZWwpIHtcbiAgaWYgKGVsLm91dGVySFRNTCkge1xuICAgIHJldHVybiBlbC5vdXRlckhUTUxcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGVsLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5pbm5lckhUTUxcbiAgfVxufVxuXG5WdWUuY29tcGlsZSA9IGNvbXBpbGVUb0Z1bmN0aW9ucztcblxuZXhwb3J0IGRlZmF1bHQgVnVlO1xuIiwiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xyXG5pbXBvcnQgeyByZW1vdmUgfSBmcm9tICcuLi9hc3luYy1hY3Rpb24nO1xyXG5pbXBvcnQgeyBzdG9yZSQgfSBmcm9tICcuLi9zdG9yZSc7XHJcblxyXG5leHBvcnQgY29uc3QgTGlzdFdvcmtlciA9IFZ1ZS5leHRlbmQoe1xyXG4gIHByb3BzOiBbJ3dvcmtlcnMnXSxcclxuXHJcbiAgcmVuZGVyKGVsZW1lbnQpIHtcclxuICAgIGNvbnN0IHdvcmtlckxpc3QgPSB0aGlzLiRwcm9wcy53b3JrZXJzLm1hcCgod29ya2VyKSA9PiB7XHJcbiAgICAgIHJldHVybiBlbGVtZW50KCdkaXYnLCBbXHJcbiAgICAgICAgZWxlbWVudCgnbGknLCBbXHJcbiAgICAgICAgICBlbGVtZW50KCdpbWcnLCB7XHJcbiAgICAgICAgICAgIGF0dHJzOiB7XHJcbiAgICAgICAgICAgICAgaHJlZjogJyR7d29ya2VyLnBob3RvfScsXHJcbiAgICAgICAgICAgICAgYWx0OiAnJyxcclxuICAgICAgICAgICAgICB3aWR0aDogJzMwcHgnLFxyXG4gICAgICAgICAgICAgIGhlaWdodDogJzMwcHgnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgfSksXHJcbiAgICAgICAgICBlbGVtZW50KCdzcGFuJywgd29ya2VyLm5hbWUpLFxyXG4gICAgICAgICAgZWxlbWVudChcclxuICAgICAgICAgICAgJ2J1dHRvbicsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBvbjoge1xyXG4gICAgICAgICAgICAgICAgY2xpY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVXb3JrZXIod29ya2VyKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ2hhcHVzJ1xyXG4gICAgICAgICAgKSxcclxuICAgICAgICBdKSxcclxuICAgICAgXSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBlbGVtZW50KCdvbCcsIHdvcmtlckxpc3QpO1xyXG4gIH0sXHJcblxyXG4gIG1ldGhvZHM6IHtcclxuICAgIHJlbW92ZVdvcmtlcih3b3JrZXIpIHtcclxuICAgICAgc3RvcmUkLmRpc3BhdGNoKHJlbW92ZSh3b3JrZXIuaWQpKTtcclxuICAgIH0sXHJcbiAgfSxcclxufSk7XHJcbiIsImltcG9ydCBWdWUgZnJvbSAndnVlJztcclxuaW1wb3J0IHsgcmVnaXN0ZXIsIGdldExpc3QsIHJlbW92ZSB9IGZyb20gJy4uL2FzeW5jLWFjdGlvbic7XHJcbmltcG9ydCB7IHN0b3JlJCwgZXJyb3JBY3Rpb24sIGNsZWFyRXJyb3JBY3Rpb24gfSBmcm9tICcuLi9zdG9yZSc7XHJcblxyXG5leHBvcnQgY29uc3QgQWRkV29ya2VyID0gVnVlLmV4dGVuZCh7XHJcbiAgICByZW5kZXIoZWxlbWVudCkge1xyXG4gICAgICByZXR1cm4gZWxlbWVudCgnZGl2JywgW1xyXG4gICAgICAgIGVsZW1lbnQoJ2Zvcm0nLCB7IG9uOiB7IHN1Ym1pdDogdGhpcy5hZGROZXdXb3JrZXIgfSB9LCBbXHJcbiAgICAgICAgICBlbGVtZW50KFxyXG4gICAgICAgICAgICAnbGFiZWwnLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHtcclxuICAgICAgICAgICAgICAgIGZvcjogJ25hbWUnLFxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICdOYW1hOidcclxuICAgICAgICAgICksXHJcbiAgICAgICAgICBlbGVtZW50KCdpbnB1dCcsIHtcclxuICAgICAgICAgICAgZG9tUHJvcHM6IHtcclxuICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgICAgbmFtZTogJ25hbWUnLFxyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnbWlzYWwgYnVkaW1hbicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uOiB7XHJcbiAgICAgICAgICAgICAgaW5wdXQ6IChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICAgIGVsZW1lbnQoJ2JyJyksXHJcbiAgXHJcbiAgICAgICAgICBlbGVtZW50KFxyXG4gICAgICAgICAgICAnbGFiZWwnLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHtcclxuICAgICAgICAgICAgICAgIGZvcjogJ2FnZScsXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ1VtdXI6J1xyXG4gICAgICAgICAgKSxcclxuICAgICAgICAgIGVsZW1lbnQoJ2lucHV0Jywge1xyXG4gICAgICAgICAgICBkb21Qcm9wczoge1xyXG4gICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICAgICAgICAgIG5hbWU6ICdhZ2UnLFxyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnbWlzYWwgMjMnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbjoge1xyXG4gICAgICAgICAgICAgIGlucHV0OiAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWdlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICAgIGVsZW1lbnQoJ2JyJyksXHJcbiAgXHJcbiAgICAgICAgICBlbGVtZW50KFxyXG4gICAgICAgICAgICAnbGFiZWwnLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHtcclxuICAgICAgICAgICAgICAgIGZvcjogJ3Bob3RvJyxcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAnRm90bzonXHJcbiAgICAgICAgICApLFxyXG4gICAgICAgICAgZWxlbWVudCgnaW5wdXQnLCB7XHJcbiAgICAgICAgICAgIGRvbVByb3BzOiB7XHJcbiAgICAgICAgICAgICAgdHlwZTogJ2ZpbGUnLFxyXG4gICAgICAgICAgICAgIG5hbWU6ICdwaG90bycsXHJcbiAgICAgICAgICAgICAgaWQ6ICdwaG90bycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uOiB7XHJcbiAgICAgICAgICAgICAgY2hhbmdlOiAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGhvdG8gPSBldmVudC50YXJnZXQuZmlsZXNbMF07XHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgZWxlbWVudCgnYnInKSxcclxuICAgICAgICAgIGVsZW1lbnQoXHJcbiAgICAgICAgICAgICdsYWJlbCcsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBkb21Qcm9wczoge1xyXG4gICAgICAgICAgICAgICAgZm9yOiAnYmlvJyxcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAnQmlvZGF0YSBzaW5na2F0OidcclxuICAgICAgICAgICksXHJcbiAgICAgICAgICBlbGVtZW50KCdicicpLFxyXG4gICAgICAgICAgZWxlbWVudCgndGV4dGFyZWEnLCB7XHJcbiAgICAgICAgICAgIGRvbVByb3BzOiB7XHJcbiAgICAgICAgICAgICAgbmFtZTogJ2JpbycsXHJcbiAgICAgICAgICAgICAgaWQ6ICdiaW8nLFxyXG4gICAgICAgICAgICAgIGNvbHM6ICczMCcsXHJcbiAgICAgICAgICAgICAgcm93czogJzMnLFxyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnYmlvZGF0YSBzaW5na2F0IHBla2VyamEnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbjoge1xyXG4gICAgICAgICAgICAgIGlucHV0OiAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmlvID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICAgIGVsZW1lbnQoJ2JyJyksXHJcbiAgXHJcbiAgICAgICAgICBlbGVtZW50KFxyXG4gICAgICAgICAgICAnbGFiZWwnLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHtcclxuICAgICAgICAgICAgICAgIGZvcjogJ2FkZHJlc3MnLFxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICdBbGFtYXQ6J1xyXG4gICAgICAgICAgKSxcclxuICAgICAgICAgIGVsZW1lbnQoJ2JyJyksXHJcbiAgICAgICAgICBlbGVtZW50KCd0ZXh0YXJlYScsIHtcclxuICAgICAgICAgICAgZG9tUHJvcHM6IHtcclxuICAgICAgICAgICAgICBuYW1lOiAnYWRkcmVzcycsXHJcbiAgICAgICAgICAgICAgaWQ6ICdhZGRyZXNzJyxcclxuICAgICAgICAgICAgICBjb2xzOiAnMzAnLFxyXG4gICAgICAgICAgICAgIHJvd3M6ICczJyxcclxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ2FsYW1hdCBwZWtlcmphJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb246IHtcclxuICAgICAgICAgICAgICBpbnB1dDogKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZHJlc3MgPSBldmVudC50YXJnZXQudmFsdWU7XHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgZWxlbWVudCgnYnInKSxcclxuICAgICAgICAgIGVsZW1lbnQoJ2JyJyksXHJcbiAgXHJcbiAgICAgICAgICBlbGVtZW50KFxyXG4gICAgICAgICAgICAnYnV0dG9uJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGRvbVByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3VibWl0JyxcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAna2lyaW0nXHJcbiAgICAgICAgICApLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICBdKTtcclxuICAgIH0sXHJcbiAgXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgICBlcnJvcjogbnVsbCxcclxuICAgICAgbmFtZTogJycsXHJcbiAgICAgIGFnZTogJycsXHJcbiAgICAgIHBob3RvOiBudWxsLFxyXG4gICAgICBiaW86ICcnLFxyXG4gICAgICBhZGRyZXNzOiAnJyxcclxuICAgICAgd29ya2VyczogW10sXHJcbiAgICB9LFxyXG4gIFxyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICBhZGROZXdXb3JrZXIoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHN0b3JlJC5kaXNwYXRjaChjbGVhckVycm9yQWN0aW9uKCkpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICF0aGlzLm5hbWUgfHxcclxuICAgICAgICAgICF0aGlzLmFnZSB8fFxyXG4gICAgICAgICAgIXRoaXMucGhvdG8gfHxcclxuICAgICAgICAgICF0aGlzLmJpbyB8fFxyXG4gICAgICAgICAgIXRoaXMuYWRkcmVzc1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgc3RvcmUkLmRpc3BhdGNoKGVycm9yQWN0aW9uKCdmb3JtIGlzaWFuIHRpZGFrIGxlbmdrYXAhJykpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICBcclxuICAgICAgICAvLyByZWdpc3RlciB1c2VyXHJcbiAgICAgICAgc3RvcmUkLmRpc3BhdGNoKFxyXG4gICAgICAgICAgcmVnaXN0ZXIoe1xyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIHBob3RvOiB0aGlzLnBob3RvLFxyXG4gICAgICAgICAgICBhZ2U6IHRoaXMuYWdlLFxyXG4gICAgICAgICAgICBiaW86IHRoaXMuYmlvLFxyXG4gICAgICAgICAgICBhZGRyZXNzOiB0aGlzLmFkZHJlc3MsXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgXHJcbiAgICAgICAgdGhpcy5uYW1lID0gJyc7XHJcbiAgICAgICAgdGhpcy5hZ2UgPSAnJztcclxuICAgICAgICB0aGlzLnBob3RvID0gbnVsbDtcclxuICAgICAgICB0aGlzLmJpbyA9ICcnO1xyXG4gICAgICAgIHRoaXMuYWRkcmVzcyA9ICcnO1xyXG4gICAgICAgIGV2ZW50LnRhcmdldC5yZXNldCgpO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICBcclxuICAgIG1vdW50ZWQoKSB7XHJcbiAgICAgIGNvbnN0IHN0YXRlID0gc3RvcmUkLmdldFN0YXRlKCk7XHJcbiAgICAgIHRoaXMubG9hZGluZyA9IHN0YXRlLmxvYWRpbmc7XHJcbiAgICAgIHRoaXMuZXJyb3IgPSBzdGF0ZS5lcnJvcjtcclxuICAgICAgdGhpcy53b3JrZXJzID0gc3RhdGUud29ya2VycztcclxuICAgICAgc3RvcmUkLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBzdG9yZSQuZ2V0U3RhdGUoKTtcclxuICAgICAgICB0aGlzLmxvYWRpbmcgPSBzdGF0ZS5sb2FkaW5nO1xyXG4gICAgICAgIHRoaXMuZXJyb3IgPSBzdGF0ZS5lcnJvcjtcclxuICAgICAgICB0aGlzLndvcmtlcnMgPSBzdGF0ZS53b3JrZXJzO1xyXG4gICAgICB9KTtcclxuICAgICAgc3RvcmUkLmRpc3BhdGNoKGdldExpc3QpO1xyXG4gICAgfSxcclxuICB9KTtcclxuICAiLCJpbXBvcnQgJy4vbWFpbi5jc3MnO1xyXG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XHJcbmltcG9ydCB7IGdldExpc3QgfSBmcm9tICcuL2FzeW5jLWFjdGlvbic7XHJcbmltcG9ydCB7IHN0b3JlJCB9IGZyb20gJy4vc3RvcmUnO1xyXG5pbXBvcnQgeyBMaXN0V29ya2VyIH0gZnJvbSAnLi9jb21wb25lbnRzL3dvcmtlci1saXN0JztcclxuaW1wb3J0IHsgQWRkV29ya2VyIH0gZnJvbSAnLi9jb21wb25lbnRzL3dvcmtlci1hZGQnO1xyXG5cclxubmV3IFZ1ZSh7XHJcbiAgZWw6ICcjd29ya2VyJyxcclxuICBjb21wb25lbnRzOiB7XHJcbiAgICAnd29ya2VyLWxpc3QnOiBMaXN0V29ya2VyLFxyXG4gICAgJ3dvcmtlci1hZGQnOiBBZGRXb3JrZXIsXHJcbiAgfSxcclxuICByZW5kZXIoZWxlbWVudCkge1xyXG4gICAgcmV0dXJuIGVsZW1lbnQoJ2RpdicsIFtcclxuICAgICAgZWxlbWVudCgncCcsIHsgY2xhc3M6IHsgZXJyb3I6IHRydWUgfSB9LCB0aGlzLmVycm9yKSxcclxuICAgICAgdGhpcy5sb2FkaW5nXHJcbiAgICAgICAgPyBlbGVtZW50KCdwJywgeyBjbGFzczogeyBwcmltYXJ5OiB0cnVlIH0gfSwgJ21lbXVhdC4uLicpXHJcbiAgICAgICAgOiBudWxsLFxyXG4gICAgICBlbGVtZW50KCdoNCcsICdEYWZ0YXJrYW4gcGVrZXJqYSBiYXJ1JyksXHJcbiAgICAgIGVsZW1lbnQoJ3dvcmtlci1hZGQnKSxcclxuICAgICAgZWxlbWVudCgnaHInKSxcclxuICAgICAgZWxlbWVudCgnaDQnLCAnRGFmdGFyIFBla2VyamEnKSxcclxuICAgICAgZWxlbWVudCgnd29ya2VyLWxpc3QnLCB7IHByb3BzOiB7IHdvcmtlcnM6IHRoaXMud29ya2VycyB9IH0pLFxyXG4gICAgXSk7XHJcbiAgfSxcclxuXHJcbiAgZGF0YToge1xyXG4gICAgbG9hZGluZzogZmFsc2UsXHJcbiAgICBlcnJvcjogbnVsbCxcclxuICAgIHdvcmtlcnM6IFtdLFxyXG4gIH0sXHJcblxyXG4gIG1vdW50ZWQoKSB7XHJcbiAgICBjb25zdCBzdGF0ZSA9IHN0b3JlJC5nZXRTdGF0ZSgpO1xyXG4gICAgdGhpcy5sb2FkaW5nID0gc3RhdGUubG9hZGluZztcclxuICAgIHRoaXMuZXJyb3IgPSBzdGF0ZS5lcnJvcjtcclxuICAgIHRoaXMud29ya2VycyA9IHN0YXRlLndvcmtlcnM7XHJcbiAgICBzdG9yZSQuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgY29uc3Qgc3RhdGUgPSBzdG9yZSQuZ2V0U3RhdGUoKTtcclxuICAgICAgdGhpcy5sb2FkaW5nID0gc3RhdGUubG9hZGluZztcclxuICAgICAgdGhpcy5lcnJvciA9IHN0YXRlLmVycm9yO1xyXG4gICAgICB0aGlzLndvcmtlcnMgPSBzdGF0ZS53b3JrZXJzO1xyXG4gICAgfSk7XHJcbiAgICBzdG9yZSQuZGlzcGF0Y2goZ2V0TGlzdCk7XHJcbiAgfSxcclxufSk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=